<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Welcome to Hello World</title>
    <link>https://harryho.github.io/blog/index.xml</link>
    <description>Recent content in Blogs on Welcome to Hello World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2015, harryho; All rights reserved.</copyright>
    <lastBuildDate>Wed, 15 Feb 2017 14:59:31 +1100</lastBuildDate>
    <atom:link href="https://harryho.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Create a blog site on GitHub Pages within Windows environment</title>
      <link>https://harryho.github.io/blog/create-a-blog-on-github-pages/</link>
      <pubDate>Wed, 15 Feb 2017 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/blog/create-a-blog-on-github-pages/</guid>
      <description>

&lt;p&gt;&lt;em&gt;After I setup a blog site with Hugo on my ubuntu machine, I decided to use it to create a blog to GitHub pages on my windows machine, since I use Windows machine as workstation. If you use Unix-style system, I pretty sure you can follow the &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Hugo Quick Start&lt;/a&gt; and &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog&#34;&gt;Hosting on GitHub Pages&lt;/a&gt; to create a blog to GitHub pages within 5 mins, but when I try to do the same on Windows machine, it took me over 30 mins. I hope this blog can help someone want to do sth similar within Windows environment.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You already have &lt;em&gt;Hugo&lt;/em&gt; on your computer. If not, please follow the instruction to &lt;a href=&#34;https://gohugo.io/tutorials/installing-on-windows&#34;&gt;install hugo on Windows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You will have two repositories &lt;code&gt;blog-hugo&lt;/code&gt; and &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; repositories to hold your hugo content and blog site respectively.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;blog-hugo&lt;/code&gt; repository will host actual Hugo’s blog content.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;username&amp;gt;.github.io repository&lt;/code&gt; repository will host the static website.&lt;/li&gt;
&lt;li&gt;Your &lt;em&gt;Hugo&lt;/em&gt; blog folder will be &amp;ldquo;C:\git\blog-hugo&amp;rdquo; in this example.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Your blog site will finally sit in C driver and map to repositories as follow&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\&amp;gt;
|--git 
    |--blog-hugo (https://github.com/&amp;lt;yourname&amp;gt;/blog-hugo.git
        |--archetypes
        |--content
        |--data
        |--layouts
        |--public (https://github.com/&amp;lt;yourname&amp;gt;/&amp;lt;yourname&amp;gt;.github.io.git)
        |--themes
        |--

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-a-blog-site-on-github-pages&#34;&gt;Create a blog site on GitHub pages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create on GitHub blog-hugo and &lt;username&gt;.github.io repositories  repository via GitHub website&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clone blog-hugo via Windows command prompt&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;c:\&amp;gt;
c:\&amp;gt;cd git
c:\git&amp;gt;git clone &amp;lt;&amp;lt;your-project&amp;gt;-hugo-url&amp;gt; &amp;amp;&amp;amp; cd &amp;lt;your-project&amp;gt;-hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create hugo site and setup the theme you like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\git&amp;gt;hugo new site blog-hugo
C:\git&amp;gt;hugo server -t &amp;lt;yourtheme&amp;gt; -D
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clean up the &lt;code&gt;public&lt;/code&gt; folder&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set submodule inside the blog-hugo and map to folder &lt;code&gt;public&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\&amp;gt;cd git
C:\git&amp;gt;rm -rf public
C:\git&amp;gt;git submodule add -b master https://github.com/&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the blog site to GitHub page with the script &lt;code&gt;deploy.bat&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;deploy.bat &amp;quot;Your optional commit message&amp;quot;&lt;/code&gt; will commit the changes to &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;. You can use and tailor the script below as your &lt;code&gt;deploy.bat&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@echo OFF

echo  Deploying updates to GitHub...

REM Build the project. 
hugo -t &amp;lt;yourtheme&amp;gt; -D

REM Go To Public folder
cd public

REM Add changes to git.
git add -A

REM Commit changes.
set msg=&amp;quot;rebuilding site %date%&amp;quot;
if  NOT &amp;quot;%1&amp;quot;==&amp;quot;&amp;quot;    set msg=%1
git commit -m &#39;%msg%&#39;

REM Push source and build repos.
git push origin master

REM Come Back
cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You might want to commit the changes to &lt;code&gt;blog-hugo&lt;/code&gt; repository. Please don&amp;rsquo;t forget to add &lt;code&gt;public&lt;/code&gt; into the &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Use Windows command &amp; hotkey as a hacker - Part 2</title>
      <link>https://harryho.github.io/blog/use-windows-command-hotkey-as-hacker-2/</link>
      <pubDate>Mon, 24 Mar 2014 10:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/blog/use-windows-command-hotkey-as-hacker-2/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This article will continue the topic of Windows command &amp;amp; hotkeys. Part-1 shows you common hotkeys and short command lines for &lt;code&gt;Run&lt;/code&gt; windnow dialog. The rest of this topic will focus on the advanced commands and how to create a batch script with all those commands.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let me clarify something first. Advanced command here does not mean that commands here are very complicated or much more powerful than common ones, which have been shown in the Part-1. Here we call them advanced, because they are used by experienced users to complete their given tasks, and those commands are used seldom by majority people. Comparing with Part-1, advanced commands have some specific features which allow them to do some special jobs, which usually are done by system admin. Advanced command is known as Admin command as well.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;advanced-commands-and-usages&#34;&gt;Advanced commands and usages&lt;/h2&gt;

&lt;h3 id=&#34;attrib&#34;&gt;attrib&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;attrib +h a.txt&lt;/code&gt; to hide file and use &lt;code&gt;attrib -h a.txt&lt;/code&gt; to unhide it.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;attrib +r a.txt&lt;/code&gt; to change file to read-only and reverse the action by &lt;code&gt;-r&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;env&#34;&gt;env&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;env&amp;gt;env.txt &amp;amp; notepad env.txt&lt;/code&gt; Display all environment variable in text file&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;set&#34;&gt;set&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;set path&lt;/code&gt; to display &lt;strong&gt;PATH&lt;/strong&gt; environment variable, which is useful to check if your &lt;strong&gt;PATH&lt;/strong&gt; has been setup properly.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;set /P a=b&lt;/code&gt; to set b as value to variable a. It will be used in bat/cmd script.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;net&#34;&gt;net&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;get sub-commands&lt;/strong&gt; &amp;ndash; type &lt;code&gt;net /?&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    [ ACCOUNTS | COMPUTER | CONFIG | CONTINUE | FILE | GROUP | HELP |
     HELPMSG | LOCALGROUP | PAUSE | SESSION | SHARE | START | 
     STATISTICS | STOP | TIME | USE | USER | VIEW ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;get sub-command&amp;rsquo;s help&lt;/strong&gt; &amp;ndash; type &lt;code&gt;net [sub-command] /?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;net view&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;net view&lt;/code&gt; to show a list of computers and network devices on the network.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;net statistics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;net statistics workstation(/server)&lt;/code&gt; to show the network statistics log for the Server or Workstation service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;net localgroup&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;net localgroup&lt;/code&gt; to show a list of local user group on your computer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;net user&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;net user %username%&lt;/code&gt; to retrieve your user information&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;net user adminstrator&lt;/code&gt; to check the status of administrator&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;net user administrator /active:yes&lt;/code&gt; to activate adminstrator and inactivate by replacing &lt;code&gt;yes&lt;/code&gt; with&lt;code&gt;no&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;net accounts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use&lt;code&gt;net accounts &amp;lt;user&amp;gt;&lt;/code&gt; to show current user&amp;rsquo;s password and login requirement.&lt;/li&gt;
&lt;li&gt;Use&lt;code&gt;net accounts &amp;lt;user&amp;gt; /minpwlen:6&lt;/code&gt; to set password minimum length requirement for user.&lt;/li&gt;
&lt;li&gt;Use&lt;code&gt;net accounts &amp;lt;user&amp;gt; /maxpwage:30&lt;/code&gt; to force user to reset password every 30 days, or use &lt;code&gt;unlimited&lt;/code&gt; to replace the number &lt;code&gt;30&lt;/code&gt;, then user&amp;rsquo;s password will never expire.&lt;/li&gt;
&lt;li&gt;User&lt;code&gt;net accounts /unique:5&lt;/code&gt; to prevent user reuse previous passwords, and default value is 5.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;runas&#34;&gt;runas&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;runas /user:yourpc\administrator &amp;quot;cmd&amp;quot;
runas /user:yourpc\administrator &amp;quot;cmd /C type \&amp;quot;\&amp;quot;&amp;gt;c:\z.txt &amp;amp; dir c:\z.txt &amp;amp; pause &amp;amp; del c:\z.txt &amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sc&#34;&gt;sc&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;sc command usage: &lt;code&gt;sc &amp;lt;server&amp;gt; [command] [service name] &amp;lt;option1&amp;gt; &amp;lt;option2&amp;gt;...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;sc query&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic usage&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sc \\yourpcname query
sc query &amp;lt;servicename&amp;gt;
sc query state= all | find &amp;quot;SERVICE_NAME&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Retrieve service name and state. type parameter can be used twice in some case.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;state = {active | inactive | all}&lt;/li&gt;
&lt;li&gt;type = {driver | service | all}&lt;/li&gt;
&lt;li&gt;type= {own | share | interact | kernel | filesys | rec | adapt}&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;IMPORTANT&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The command options for SC are case sensitive.&lt;/li&gt;
&lt;li&gt;If you run this inside a batch file, the percent signs (e.g. at %s) need to be doubled.&lt;/li&gt;
&lt;li&gt;Extra space within option is necessary. e.g. &lt;code&gt;state= all&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;REM query all services which are inactive and type are driver and kernel
sc query state= inactive type= driver type= kernel
REM get all services&#39; name 
for /f &amp;quot;tokens=2&amp;quot; %s in (&#39;sc query state^= all ^| find &amp;quot;SERVICE_NAME&amp;quot;&#39;) do @echo %s 
REM get all services&#39; name and state
for /f &amp;quot;tokens=2&amp;quot; %s in (&#39;sc query state^= all ^| find &amp;quot;SERVICE_NAME&amp;quot;&#39;) do @(
    for /f &amp;quot;tokens=4&amp;quot; %t in (&#39;sc query %s ^| find &amp;quot;STATE&amp;quot; &#39;) do @echo %s -- %t
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;sc queryex&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;REM get all services&#39; name and pid
for /f &amp;quot;tokens=2&amp;quot; %s in (&#39;sc queryex state^= all ^| find &amp;quot;SERVICE_NAME&amp;quot;&#39;) do @(
    for /f &amp;quot;tokens=3&amp;quot; %t in (&#39;sc queryex %s ^| find &amp;quot;PID&amp;quot; &#39;) do @echo %s -- %t
    )
REM get all services&#39; name and pid
for /f &amp;quot;tokens=2&amp;quot; %s in (&#39;sc queryex state^= all ^| find &amp;quot;SERVICE_NAME&amp;quot;&#39;) do @(
    for /f &amp;quot;tokens=3&amp;quot; %t in (&#39;sc queryex %s ^| find &amp;quot;BINARY_PATH_NAME&amp;quot; &#39;) do @echo %s -- %t
    ) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;sc qc&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;REM get all services&#39; name and path
for /f &amp;quot;tokens=2&amp;quot; %s in (&#39;sc queryex state^= all ^| find &amp;quot;SERVICE_NAME&amp;quot;&#39;) do @(     for /f &amp;quot;tokens=3 delims==:&amp;quot; %t in (&#39;sc qc %s ^| find &amp;quot;BINARY_PATH_NAME&amp;quot; &#39;) do @echo %s -- C:%t     )   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;sc start/stop&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;REM start and stop service
sc start  &amp;lt;servicename&amp;gt;
REM query service state
sc query &amp;lt;servicename&amp;gt;
REM stop service
sc stop  &amp;lt;servicename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ipconfig&#34;&gt;ipconfig&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;ipconfig /all&lt;/code&gt; to display full configuration information.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;ipconfig /flushdns&lt;/code&gt;    to purge the DNS Resolver cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tasklist&#34;&gt;tasklist&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;syntax&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tasklist[.exe] [/s computer] [/u domain\user [/p password]] [/fo {TABLE|LIST|CSV}] [/nh] [/fi FilterName [/fi FilterName2 [ &amp;hellip; ]]] [/m [ModuleName] | /svc | /v&lt;/li&gt;
&lt;li&gt;FilterName: Status, Imagename,&lt;/li&gt;
&lt;li&gt;Find process by pid&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;REM get the mysqld process info
tasklist /v /fo list /fi &amp;quot;imagename eq mysqld.exe&amp;quot;
REM get the mongod process info
tasklist /v /fo list /fi &amp;quot;imagename eq mongod.exe&amp;quot;
REM get list of running processes under given user  
tasklist /fi &amp;quot;USERNAME ne NT AUTHORITY\SYSTEM&amp;quot; /fi &amp;quot;STATUS eq running&amp;quot;
REM get list of non-responding processes under given user   
tasklist /fi &amp;quot;USERNAME ne NT AUTHORITY\SYSTEM&amp;quot; /fi &amp;quot;STATUS eq not responding&amp;quot; 
REM get process by PID
tasklist /fi &amp;quot;pid eq 4444&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;netstat&#34;&gt;netstat&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Type &lt;code&gt;netstat&lt;/code&gt; to get all ports and IP addresses, which are connected or listening&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type PID of process which is using some given port, such as 80, 443, 22, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;netstat -ano | find &amp;quot;:80&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Type the application which is using given port.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for /f &amp;quot;tokens=5&amp;quot; %p in ( &#39;netstat -ano ^| find &amp;quot;:80&amp;quot;&#39;) do @(     
    for /f &amp;quot;tokens=1&amp;quot; %s in ( &#39;tasklist /fi &amp;quot;pid eq %p&amp;quot; ^| find &amp;quot;%p&amp;quot;&#39;) do @(
        echo PID:%p -- APP: %s
    ) 
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;taskkill&#34;&gt;taskkill&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;syntax&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;taskkill [/S system [/U username [/P [password]]]]
         { [/FI filter] [/PID processid | /IM imagename] } [/F] [/T]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;samples&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;REM force to stop notepad application and any children processes
taskkill /F /IM notepad.exe /
REM stop process by PID and any children processes
taskkill /PID 1230 /PID 1241 /PID 1253 /T
REM force to stop applications which PID is equal or greater than 10000
REM and windows&#39; title of app is not equal to untitle*
taskkill /F /FI &amp;quot;PID ge 1000&amp;quot; /FI &amp;quot;WINDOWTITLE ne untitle*&amp;quot;

taskkill /F /FI &amp;quot;USERNAME eq NT AUTHORITY\SYSTEM&amp;quot; /IM notepad.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;schtasks&#34;&gt;schtasks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Syntax : schtasks /parameter [arguments]

&lt;ul&gt;
&lt;li&gt;parameters include : Change, Create, Delete, End, Query, Run, ShowSid&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;schtasks&lt;/code&gt; to list all scheduled tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;schtasks /Query&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;REM get help info                                                                                                                                                                           
SCHTASKS /Query /?    
REM query tasks which are scheduled on given system                                                                                                                                                                         
SCHTASKS /Query /S system /U user /P       
REM get list of tasks in details
SCHTASKS /Query /FO LIST /V     
REM get table of running tasks in details and output to csv file                                                                                                                          
SCHTASKS /Query /FO TABLE /NH /V | find &amp;quot;Running&amp;quot;&amp;gt;running_tasks.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;script&#34;&gt;script&lt;/h2&gt;

&lt;h3 id=&#34;basic-hello-world&#34;&gt;Basic hello world&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can find it on the &lt;a href=&#34;https://harryho.github.io&#34;&gt;home page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;customized-script-to-query-temp-folders-and-clean-up-log-files-within-the-folder&#34;&gt;Customized script to query temp folders and clean up log files within the folder&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We assume you have multiple temp folders in different drives and You want to delete log files inside temp folder and its subdirectries from time to time. Before you delete them, you want to list all files first. You can confirm if you want to delete them or not.&lt;/li&gt;
&lt;li&gt;Create a file named clean-logs.bat&lt;/li&gt;
&lt;li&gt;Copy the sample code and tailor anything you want.&lt;/li&gt;
&lt;li&gt;The sample shows you how to create interative command script and how to combine commands together with the condition statement and loop statement.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@echo off

@echo.&amp;quot;Assumption: You have multiple temp folders in different drives. You want to delete log files inside temp folder and its subdirectries. Before you delete them, you want to list all files first, file list should be sorted by time&amp;quot;

:again 
   echo &amp;quot;Checking all Recycle bins for each drive ...&amp;quot;
   echo.-----------------------
   for /f  %%x in (&#39;wmic logicaldisk get caption  ^| find &amp;quot;:&amp;quot;&#39;) do @(
        for /f &amp;quot;tokens=*&amp;quot; %%s in (&#39;tree /f /a %%x\temp ^| find  &amp;quot;log&amp;quot; &#39;  ) do @(
            echo.%%x\temp\%%s
        )
   )

   set /p answer=Do you want to clean up log files (Y/N)?
   if /i &amp;quot;%answer:~,1%&amp;quot; EQU &amp;quot;Y&amp;quot; ( 
       @echo.Y
       goto clean
   )
   if /i &amp;quot;%answer:~,1%&amp;quot; EQU &amp;quot;N&amp;quot; ( 
       @echo.N 
       goto end 
   )  
   echo Please type Y for Yes or N for No
   goto again

:clean
    echo.&#39;deleting logs&#39;
    for /f  %%x in (&#39;wmic logicaldisk get caption  ^| find &amp;quot;:&amp;quot;&#39;) do @(
        for /f &amp;quot;tokens=*&amp;quot; %%s in (&#39;tree /f /a %%x\temp ^| find  &amp;quot;log&amp;quot; &#39;  ) do @(
            del &amp;quot;%%x\temp\%%s&amp;quot;
        )
    )

:end
    echo.&#39;exiting program&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript and Object Oriented Programming</title>
      <link>https://harryho.github.io/blog/javascript-oop/</link>
      <pubDate>Thu, 20 Mar 2014 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/blog/javascript-oop/</guid>
      <description>

&lt;h2 id=&#34;brief-history&#34;&gt;Brief history&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Brief history of JavaScript can be found on &lt;a href=&#34;https://harryho.github.io/&#34;&gt;Home Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;assumption&#34;&gt;Assumption&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You should have basic knowledge of Javascript.&lt;/li&gt;
&lt;li&gt;You should know how to test sample code on Chrome or Firefox. It is simple, just open your browser and enter &lt;code&gt;F12&lt;/code&gt;, copy the code to console and then press &lt;code&gt;Enter&lt;/code&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data-types&#34;&gt;Data types&lt;/h2&gt;

&lt;p&gt;The JavaScript (ECMAScript) standard defines six data types. Five are primitives, including Boolean, Null, Undefined, Number, String, and Object. In JavaScript, most things are objects, from core JavaScript features like strings and arrays to the browser APIs built on top of JavaScript. You can even create your own objects to encapsulate related functions and variables into efficient packages, and act as handy data containers. The object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language, therefore we&amp;rsquo;ve provided this module to help you. Here we teach object theory and syntax in detail, then look at how to create your own objects.&lt;/p&gt;

&lt;h2 id=&#34;object-and-prototype&#34;&gt;Object and prototype&lt;/h2&gt;

&lt;h3 id=&#34;how-to-define-a-object&#34;&gt;How to define a object&lt;/h3&gt;

&lt;p&gt;There are a couple ways to create variable as object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var obj1 = {};
var obj2 = new Object();
var obj3 = Object.create(null);
console.log( obj );
console.log( obj2 );
console.log( obj3 );
/*
-- Copy above code and run it inside console from Chrome browser.
-- You will see follow result.
object {}
object {}
object {}
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Object type gives developers so much power and flexibility to customize their own data type. All JavaScript objects inherit the properties and methods from their prototype. The Object.prototype is on the top of the prototype chain. All JavaScript objects (Date, Array, RegExp, Function, &amp;hellip;.) inherit from the Object.prototype.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Object has properties and method. Object&amp;rsquo;s method are the actions that can be performed on objects, they are one of most powerful feature for developers. Let&amp;rsquo;s see how we can create object with properties and methods.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create three cars with basic object usage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var car1 = { color: &#39;red&#39;, make:&#39;Toyota&#39;, model:&#39;Sedan&#39;, getInfo: function (){
        console.log( this );
}};
var car2 = { color: &#39;black&#39;, make:&#39;BMW&#39;, model:&#39;Coupe&#39;, getInfo: function (){
        console.log( this );
}};
var car3 = { color: &#39;white&#39;, make:&#39;Subaru&#39;, model:&#39;SUV&#39;, getInfo:function (){
        console.log( this );
}};
car1.getInfo();
car2.getInfo(); 
car3.getInfo();

/*
Output:
Object {color: &amp;quot;red&amp;quot;, make: &amp;quot;Toyota&amp;quot;, model: &amp;quot;Sedan&amp;quot;} 
Object {color: &amp;quot;black&amp;quot;, make: &amp;quot;BMW&amp;quot;, model: &amp;quot;Coupe&amp;quot;} 
Object {color: &amp;quot;white&amp;quot;, make: &amp;quot;Subaru&amp;quot;, model: &amp;quot;SUV&amp;quot;}
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You will find the same method defined in every object. Can we make it better to just define the method once? The answer is Yes. Use an object constructor to create an object prototype. Any new object inherit the same propotype will have the same properties and methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Car = function(color, make, model, getInfo ) {
    this.color=&#39;&#39;;
    this.make=&#39;&#39;;
    this.model=&#39;&#39;;
    this.getInfo= function( time ){
            console.log( this );
    };
};

var car1 = new Car(&#39;red&#39;,&#39;Toyota&#39;,&#39;Sedan&#39;);
var car2 = new Car(&#39;black&#39;,&#39;BMW&#39;, &#39;Coupe&#39;);
var car3 = new Car(&#39;white&#39;,&#39;Subaru&#39;,&#39;SUV&#39;);
car1.getInfo();
car2.getInfo(); 
car3.getInfo();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You will get same result as before. If you compare two blocks of code, you may think the second way has more code than the first one. Let&amp;rsquo;s image if you need to create 20 objects and every object with 20 methods, then you totaly need to write 20 X 20 = 400 methods. Object&amp;rsquo;s prototype is powerful, but we need to be careful when we want to use it, especially the &lt;code&gt;this&lt;/code&gt; prototype. We need discuss this more in detail.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Other sample of prototype&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Car = function(color, make, model ) {
    this.color=&#39;&#39;;
    this.make=&#39;&#39;;
    this.model=&#39;&#39;;
};
Car.prototype = {        
    getInfo : function( ){
            console.log( this );
    }
};
var car1 = new Car(&#39;red&#39;,&#39;Toyota&#39;,&#39;Sedan&#39;);
var car2 = new Car(&#39;black&#39;,&#39;BMW&#39;, &#39;Coupe&#39;);
var car3 = new Car(&#39;white&#39;,&#39;Subaru&#39;,&#39;SUV&#39;);
car1.getInfo();
car2.getInfo(); 
car3.getInfo();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The last way to use prototype is kind of verbose. The second one is more concise and nice is most popular paradigm.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;class-and-inheritance&#34;&gt;Class and inheritance&lt;/h3&gt;

&lt;p&gt;JavaScript has no built-in way of creating or implementing interfaces.
It also lacks built-in methods for determining whether an object implements the same set of
methods as another object, making it difficult to use objects interchangeably. Luckily, JavaScript
is extremely flexible, making it easy to add these features.&lt;/p&gt;

&lt;p&gt;JavaScript has no built-in way of creating or implementing interfaces.
It also lacks built-in methods for determining whether an object implements the same set of
methods as another object, making it difficult to use objects interchangeably. Luckily, JavaScript
is extremely flexible, making it easy to add these features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inheritance issue in Javascript&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Pet() {
    this.name =  &amp;quot;&amp;quot;;
    this.species =  &amp;quot;&amp;quot;;
    this.offsprings = [];
    this.setName = function ( name ) { this.name = name ;};
    this.deliverBaby = function( obj ){
        this.offsprings.push( obj );
    }
    this.getInfo = function (){
        console.log( &amp;quot; species: &amp;quot;,this.species, &amp;quot; name: &amp;quot; ,this.name );
        console.log( &amp;quot; has &amp;quot;, this.offsprings.length ,&amp;quot; offsprings &amp;quot;);
    }
};

function Dog()  {
};

Dog.prototype = new Pet();
Dog.prototype.species = &amp;quot;Dog&amp;quot;;

var dog1 = Object.create(new Dog());
dog1.setName ( &amp;quot;Polly&amp;quot;);

var dog2 = new Dog();
dog2.setName ( &amp;quot;Lulu&amp;quot;);

dog1.deliverBaby( new Dog());
dog2.deliverBaby( new Dog());

dog1.getInfo();
dog2.getInfo();

/*
output :
    species:  Dog  name:  Polly 
    has  2  offsprings              &amp;lt;- It is wrong. It should be 1 only.
    species:  Dog  name:  Lulu 
    has  2  offsprings              &amp;lt;- It is wrong. It should be 1 only.
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can tell there is something wrong with the prototype and constructor at a glance. It really confused many developers with C++/Java OOP backgroud. The sample code looks fine, but it doesn&amp;rsquo;t work as other OOP programming language. It is your and Brendan Eich&amp;rsquo;s problem, because he was told to make JavaScript look like Java, even there is no built-in OO mechanism at the beginning. This just looks like an odd way of doing class-based OOP without real classes, and leaves the programmer wondering why they didn’t implement proper class-based OOP. JavaScript keeps using constructor, which obscured JavaScript’s true prototypal nature. It turns out most developers don&amp;rsquo;t know how to use it properly and efficiently, including myself at the early stage.&lt;/p&gt;

&lt;p&gt;Function is first-class citizen in JavaScript world, but it’s not really a class. We need to understand the constructor creates an empty object, then sets the prototype of empty object to the prototype property of the constructor, then set constructor function with &lt;code&gt;this&lt;/code&gt; pointing to the newly-created object, and finally returns the object. You will get more confused after you see this definition. Let&amp;rsquo;s us create a simple sample and take a close look why the constructor and prototype will cause this problem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var MyClass = function(){
    this.name = &#39;MyClass&#39;;
    this.getInfo = function ( ){
        console.log( this );
    }
}
MyClass.prototype.propObject = { id: 0, property: &#39;property&#39; }

var objectA = new MyClass();
var objectB = new MyClass();

console.log( &#39;object A:&#39;, objectA.name ,  &#39;object B:&#39;, objectB.name  );
console.log( &#39;MyClass.prototype  === objectA.constructor.prototype ? &#39;, MyClass.prototype === objectA.constructor.prototype );
console.log( &#39;MyClass.prototype  === objectB.constructor.prototype ? &#39;, MyClass.prototype  === objectB.constructor.prototype );

console.log( &amp;quot; objectA.propObject : &amp;quot;, objectA.propObject , &amp;quot; objectB.propObject : &amp;quot;,  objectB.propObject  );

objectA.propObject.id = 1; 
objectA.propObject.property = &#39;AAA&#39;; 

console.log( &amp;quot; objectA.propObject : &amp;quot;, objectA.propObject,  &amp;quot; objectB.propObject : &amp;quot;,  objectB.propObject  );
/*
output :

MyClass object B: MyClass
MyClass.prototype  === objectA.constructor.prototype ?  true
MyClass.prototype  === objectB.constructor.prototype ?  true
objectA.propObject :  Object {id: 0, property: &amp;quot;property&amp;quot;}  objectB.propObject :  Object {id: 0, property: &amp;quot;property&amp;quot;}
objectA.propObject :  Object {id: 1, property: &amp;quot;AAA&amp;quot;}  objectB.propObject :  Object {id: 1, property: &amp;quot;AAA&amp;quot;}  
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we draw a diagram of above sample, you will see what is happening behind the scene. Since the prototype property is a reference, changing the prototype object’s properties at runtime will affect all objects using the prototype.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;
+------------+             
|  MyClass   |        +---- objectA.prototype
| prototype&amp;lt;----------|
|            |        +---- objectB.prototype
+------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we figure out the root cause. You will say it is easy to fix. We just need to create new prototype for each object, and clone the properties and methods from supper class. Yes, you are right, but it is not I want to recommand to you. First, we need to see if we really inheritance, secondly, if it is better to maintain if use inheritance.&lt;/p&gt;

&lt;p&gt;If we still want to use inheritance, I will suggest not to jsut inherit the properties, instead of methods. In my opinion, there is very rare of scenario, we really need to inherit method. So we just need to find to proper way to solve the problem of properties inheritance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object-based Inheritance&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Pet(name, master) {
    this.name = name || &amp;quot;&amp;quot;;
    this.species = &amp;quot;&amp;quot;;
    this.master = master || {
        name: &#39;&#39;,
        gender: &#39;&#39;
    };
    this.offsprings = [];
    this.deliverBaby= function ( obj) {
        this.offsprings.push(obj);
    },
    this.getInfo = function () {
        console.log(&amp;quot; species: &amp;quot;, this.species, &amp;quot; name: &amp;quot;, this.name, &amp;quot; master : &amp;quot;, this.master.name, &amp;quot; &amp;quot;, this.master.gender);
        this.offsprings.forEach(function (e) {
            console.log(&amp;quot; has baby :  &amp;quot;, e.name, &amp;quot; &amp;quot;, e.species);
        });
    }
}

function Dog(name, master) {
    Pet.call(this, name, master);
    this.mother = null;
    this.species = &amp;quot;Dog&amp;quot;;
}

var dog1 = new Dog(&#39;Polly&#39;);
dog1.master = {
    name: &#39;John&#39;,
    gender: &#39;M&#39;
};

var dog2 = new Dog(&#39;Lulu&#39;, {
    name: &#39;Ada&#39;,
    gender: &#39;F&#39;
});

dog1.deliverBaby(new Dog(&#39;Polly-Baby-Dog&#39;));
dog2.deliverBaby(new Dog(&#39;Lulu-Baby-Dog&#39;));
dog2.deliverBaby(new Dog(&#39;Lulu-Baby-Dog-2&#39;));

dog1.getInfo();
dog2.getInfo();

/*
output:

Dog  name:  Polly  master :  John   M
has baby :   Polly-Baby-Dog   Dog
species:  Dog  name:  Lulu  master :  Ada   F
has baby :   Lulu-Baby-Dog   Dog
has baby :   Lulu-Baby-Dog-2   Dog
*/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After you test, did you say: &amp;ldquo;what? how this works? It looks share the same prototype with &lt;code&gt;this&lt;/code&gt;&amp;rdquo;? Actually the problem is the special object &lt;code&gt;this&lt;/code&gt; in Javascript, which is one of the most misunderstood parts of JavaScript. Today it still confuses many other JS developers. If you have experience with other JavaScript framework. You will find many samples which use &lt;code&gt;that&lt;/code&gt; , &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;vm&lt;/code&gt; to replace the built-in &lt;code&gt;this&lt;/code&gt;. e.g. &lt;code&gt;var that = {}&lt;/code&gt;, &lt;code&gt;var self = {}&lt;/code&gt;,etc. Let&amp;rsquo;s see the new version of above sample code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
function Pet(name, master) {
    var self = {};
    self.name = name || &amp;quot;&amp;quot;;
    self.species = &amp;quot;&amp;quot;;
    self.master = master || {
        name: &#39;&#39;,
        gender: &#39;&#39;
    };
    self.offsprings = [];
    return self;
}

function Dog(name, master) {
    var self = {};
    Pet.call(self, name, master);
    self.species = &amp;quot;Dog&amp;quot;;
    self.prototype = this.constructor.prototype;
    return self;
}

Dog.prototype = {    
    deliverBaby: function ( self, obj) {
        self.offsprings.push(obj);
    },
    getInfo: function (self) {
        console.log(&amp;quot; species: &amp;quot;, self.species, &amp;quot; name: &amp;quot;, self.name, &amp;quot; master : &amp;quot;, self.master.name, &amp;quot; &amp;quot;, this.master.gender);
        self.offsprings.forEach(function (e) {
            console.log(&amp;quot; has baby :  &amp;quot;, e.name, &amp;quot; &amp;quot;, e.species);
        });
    }
};

var dog1 = new Dog(&#39;Polly&#39;);
dog1.master = {
    name: &#39;John&#39;,
    gender: &#39;M&#39;
};
var dog2 = new Dog(&#39;Lulu&#39;, {
    name: &#39;Ada&#39;,
    gender: &#39;F&#39;
});

dog1.deliverBaby(dog1, new Dog(&#39;Polly-Baby-Dog&#39;));
dog2.deliverBaby(dog2, new Dog(&#39;Lulu-Baby-Dog&#39;));
dog2.deliverBaby(dog2, new Dog(&#39;Lulu-Baby-Dog-2&#39;));

dog1.getInfo();
dog2.getInfo();

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I rewrite above sample a few lines of code, then you will figour out why it is working, but maybe you still want to implement inheritance as other OOP lanuage C++, Java. Then let&amp;rsquo;s take a look the classical inheritance, which is much more close to other OOP language. In classical inheritance it&amp;rsquo;s impossible (or at least very difficult) to choose which properties you want to inherit. They use virtual base classes and interfaces to solve the diamond problem. It is much more complicated.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classical inheritance&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
function extend(subClass, superClass) {
    var F = function () {};
    F.prototype = superClass.prototype;
    subClass.prototype = new F();
    subClass.prototype.constructor = subClass;
    subClass.superclass = superClass.prototype;

    if (superClass.prototype.constructor == Object.prototype.constructor) {
        superClass.prototype.constructor = superClass;
    }
}

function Pet(name, master) {
    this.name = name || &amp;quot;&amp;quot;;
    this.species = &amp;quot;&amp;quot;;
    this.master = master || {
        name: &#39;&#39;,
        gender: &#39;&#39;
    };
    this.offsprings = [];
}

Pet.prototype.deliverBaby = function (obj) {
    this.offsprings.push(obj);
};

Pet.prototype.getInfo = function () {
    console.log(&amp;quot; species: &amp;quot;, this.species, &amp;quot; name: &amp;quot;, this.name, &amp;quot; master : &amp;quot;, (this.master?this.master.name:&#39;&#39;), &amp;quot; &amp;quot;,  (this.master?this.master.gender:&#39;&#39;));
    this.offsprings.forEach(function (e) {
        console.log(&amp;quot; has baby :  &amp;quot;, e.name, &amp;quot; &amp;quot;, e.species);
    });
}


function Dog(name, master) {
    Dog.superclass.constructor.call(this, name, master);
    this.species = &amp;quot;Dog&amp;quot;;
}

extend(Dog, Pet);

Dog.prototype.getInfo = function () {     
    console.log(&amp;quot; Override --- &amp;quot; );
    Dog.superclass.getInfo.call(this) ;
};

var dog1 = new Dog(&#39;Polly&#39;);
dog1.master = {
    name: &#39;John&#39;,
    gender: &#39;M&#39;
};

var dog2 = new Dog(&#39;Lulu&#39;, {
    name: &#39;Ada&#39;,
    gender: &#39;F&#39;
});

dog1.deliverBaby(new Dog(&#39;Polly-Baby-Dog&#39;));
dog2.deliverBaby(new Dog(&#39;Lulu-Baby-Dog&#39;));
dog2.deliverBaby(new Dog(&#39;Lulu-Baby-Dog-2&#39;));

dog1.getInfo();
dog2.getInfo();


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most programmers who come from a classical background argue that classical inheritance is more powerful than prototypal inheritance. The truth is that prototypal inheritance supports inheriting from multiple prototypes. Prototypal inheritance simply means one object inheriting from another object.&lt;/p&gt;

&lt;p&gt;Whether classical or prototypal, is used to reduce the redundancy in code. Since prototypal inheritance allows for multiple inheritance, code which requires multiple inheritance is less redundant if written using prototypal inheritance rather than in a language which has classical inheritance but no multiple inheritance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prototypal inheritance&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
function clone(obj) {
    if (obj === null || typeof obj !== &#39;object&#39;) {
        return obj;
    }

    var temp = obj.constructor(); // give temp the original obj&#39;s constructor
    for (var key in obj) {
        temp[key] = clone(obj[key]);
    } 
    return temp;
}

var Pet = {
    name: &amp;quot;&amp;quot;,
    species: &amp;quot;&amp;quot;,
    master: {
        name: &#39;&#39;,
        gender: &#39;&#39;
    },
    offsprings: [],
    deliverBaby: function (obj) {
        this.offsprings.push(obj);
    },
    getInfo: function () {
        console.log(&amp;quot; species: &amp;quot;, this.species, &amp;quot; name: &amp;quot;, name, &amp;quot; master : &amp;quot;, this.master.name, &amp;quot; &amp;quot;, this.master.gender);
        this.offsprings.forEach(function (e) {
            console.log(&amp;quot; has baby :  &amp;quot;, e.name, &amp;quot; &amp;quot;, e.species);
        });
    }
};

var Dog = clone(Pet);
Dog.species = &#39;Dog&#39;;

Dog.getInfo = function () {
    console.log(&amp;quot; Override -- species: &amp;quot;, this.species, &amp;quot; name: &amp;quot;, this.name, &amp;quot; master : &amp;quot;, this.master.name, &amp;quot; &amp;quot;, this.master.gender);
    this.offsprings.forEach(function (e) {
        console.log(&amp;quot; has baby :  &amp;quot;, e.name, &amp;quot; &amp;quot;, e.species);
    });
};

var dog1 = clone(Dog);
var dog2 = clone(Dog);

dog1.name = &#39;Polly&#39;;
dog1.master = {
    name: &#39;John&#39;,
    gender: &#39;M&#39;
};
dog2.name = &#39;Lulu&#39;;
dog2.master = {
    name: &#39;Ada&#39;,
    gender: &#39;F&#39;
};

var dog11 = clone(Dog);
dog11.name = &#39;Polly-Baby-Dog&#39;;
var dog21 = clone(Dog);
var dog22 = clone(Dog);
dog21.name = &#39;Lulu-Baby-Dog&#39;;
dog22.name = &#39;Lulu-Baby-Dog-2&#39;;

dog1.deliverBaby(dog11);
dog2.deliverBaby(dog21);
dog2.deliverBaby(dog22);

dog1.getInfo();
dog2.getInfo();

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the most important advantages of prototypal inheritance is that you can add new properties to prototypes after they are created. This allows you to add new methods to a prototype which will be automatically made available to all the objects which delegate to that prototype.
This allows you to add new methods to a prototype which will be automatically made available to all the objects which delegate to that prototype.This is not possible in classical inheritance because once a class is created you can&amp;rsquo;t modify it at runtime. This is probably the single biggest advantage of prototypal inheritance over classical inheritance, and it should have been at the top.&lt;/p&gt;

&lt;h3 id=&#34;module-and-namespace&#34;&gt;Module and namespace&lt;/h3&gt;

&lt;p&gt;There are quite a lot of benefits from module and namespace, especially when you are going to build some special common api shared within the whole application, even multiple systems across your whole entire enterprise. First thing first, we should not pollute the context, since it will potentially break existing functions or other third party frameworks which have been introduced in your applicatio, vice versa.&lt;/p&gt;

&lt;p&gt;On the other hand, it is a good way to create reusable component, and it is easily for further enhancement, or maybe maintenance. JavaScript is very easy to create a module. One of the most widely used design patterns in JavaScript is the module pattern. The module pattern makes use of one of the nicer features of JavaScript – closures – in order to give you some control of the privacy of your methods so that third party applications cannot access private data or override it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple closure&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var closureObject = (function() {
    var _privateProperty = &#39;private&#39;;
    var _privateMethod = function () {
        console.log( &#39; private method &#39;);
    };
    return {
        publicProperty: &#39;Public Property&#39;,
        publicMethod: function() {
            console.log( &#39; Call &#39;, _privateMethod() , &#39; from public method &#39;);
        },
        setPrivateProperty: function ( newValue ){
            _privateProperty= newValue;
        },
        getPrivateProperty: function( ){
            return _privateProperty;
        }
    }
}());

console.log(  closureObject.publicProperty );
console.log(  closureObject._privateProperty ); 
// console.log(  closureObject._privateMethod() ); // This will cause Uncaught TypeError
console.log(  closureObject.getPrivateProperty() );

closureObject.setPrivateProperty( &#39;public&#39;);
console.log(  closureObject.getPrivateProperty() );

/* 
output:

Public Property
undefined             // privateProperty can not be accessed directly
private               
public                // privateProperty can be updated by public method
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From above sample code, you can the JavaScript can easily implement the encapsulation as OOP language. Closure is the base the module pattern, and module is the base of namespace. Maybe you will wonder why we need module and namespace,just closure is good enough for us control the API. If we take a second thought we will realize if some application has the same object called closureObject, both will crash at run time. As a simple solution, we can make a very long, different and ridiculous name to avoid the conflict, but it is not a nice solution. Then module turns out as a better way to solve this problem.&lt;/p&gt;

&lt;p&gt;Module is not rock science. Actually it is quite easy to implement.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple module sample&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var myModule = (function(undefined) {
    var _privateProperty = &#39;private&#39;;
    var _privateMethod = function () {
        console.log( &#39; private method &#39;);
    };
    return {
        publicProperty: &#39;Public Property&#39;,
        publicMethod: function() {
            console.log( &#39; Call &#39;, _privateMethod() , &#39; from public method &#39;);
        },
        setPrivateProperty: function ( newValue ){
            _privateProperty= newValue;
        },
        getPrivateProperty: function( ){
            return _privateProperty;
        }
    }
}());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may say &amp;ldquo;What? closure is module.&amp;rdquo; Yes, you can say that. The little difference is the auguements during auto initialization. By having an function argument undefined (the name actually does not matter) which you don&amp;rsquo;t pass a parameter to, you could make sure you have a variable which really is undefined. This technique ensures that it will work as expected, in case it will be excluded to unintential amendment by other script.&lt;/p&gt;

&lt;p&gt;Once we create our module, we can simply extend the module with the same technique.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Module&amp;rsquo;s extension with override or new api&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var myModule = (function() {
    ....
}());

var extendModule = (function( m){
     m.publicMethod = function ( newArgument ) { // overload publicMethod 
          //   TODO
     };

     m.newApi = function () {  // 
         // TODO
     };

}(myModule));

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we will go further to namespace, which is based on module technique. Namespace gives you the ability to have public and private properties and methods.
The code inside doesn’t use the Object Literal notation. Allows you to use $ inside your code without worrying about clashing with other libraries
Allows your library to grow across files using the “window.rtkns = window.rtkns || {}” technique
A common pattern that you will see in many libraries, widgets, and plugins&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
(function (rtkns, $, undefined) {

    rtkns.createNS = function (namespace) {
        var nsparts = namespace.split(&amp;quot;.&amp;quot;);
        var parent = rtkns;

        if (nsparts[0] === &amp;quot;rtkns&amp;quot;) {
            nsparts = nsparts.slice(1);
        }

        for (var i = 0; i &amp;lt; nsparts.length; i++) {
            var partname = nsparts[i];

            if (typeof parent[partname] === &amp;quot;undefined&amp;quot;) {
                parent[partname] = {};
            }
            parent = parent[partname];
        }
        return parent;
    };

    var clone = function(obj) {
        if (obj === null || typeof obj !== &#39;object&#39;) {
            return obj;
        }

        var temp = obj.constructor(); // give temp the original obj&#39;s constructor
        for (var key in obj) {
            temp[key] = clone(obj[key]);
        } 
        return temp;
    };

    rtkns.clone = clone;

    rtkns.createNS(&amp;quot;rtkns&amp;quot;);


    rtkns.utils = rtkns.createNS(&amp;quot;rtkns.utils&amp;quot;);

    rtkns.model = rtkns.createNS(&amp;quot;rtkns.model&amp;quot;);


    rtkns.model.entity = {
        id: 0,
        createdBy:&#39;&#39;,
        modifiedBy:&#39;&#39;,
        created: null,
        modified: null,
    };
    var entity = rtkns.model.entity;
    
    rtkns.model.order = clone ( entity);
    var order = rtkns.model.order ;
    order.amount = 0;
    order.description = &#39;&#39;;


    rtkns.model.client = clone( entity);
    var client =  rtkns.model.client ;
    client.name = &#39;&#39;;
    client.email = &#39;&#39;;
    client.orders = [];
    client.purchase = function ( order ){
        this.orders.push( order );
    };

    rtkns.utils.toString = function (entity) {
        return entity?JSON.stringify(entity):entity;
    };


}(window.rtkns = window.rtkns || {}));

var rtkns = window.rtkns;

var client1 = rtkns.clone( rtkns.model.client );
client1.name = &#39;client 1&#39;;
client1.email = &#39;client1.email@test.com&#39;;
var client2 = rtkns.clone( rtkns.model.client );
client2.name = &#39;client 2&#39;;
client2.email = &#39;client2.email@test.com&#39;;

var order1 = rtkns.clone( rtkns.model.order );
order1.amount = 100;
order1.description = &#39;order 1&#39;;

var order2 = rtkns.clone( rtkns.model.order );
order2.amount = 600;
order2.description = &#39;order 2&#39;;

client1.purchase( order1 );
client2.purchase( order2 );

console.log(rtkns.utils.toString( client1));
console.log(rtkns.utils.toString( client2));

/*

output:
{&amp;quot;id&amp;quot;:0,&amp;quot;createdBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;modifiedBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created&amp;quot;:null,&amp;quot;modified&amp;quot;:null,&amp;quot;name&amp;quot;:&amp;quot;client 1&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;client1.email@test.com&amp;quot;,&amp;quot;orders&amp;quot;:[{&amp;quot;id&amp;quot;:0,&amp;quot;createdBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;modifiedBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created&amp;quot;:null,&amp;quot;modified&amp;quot;:null,&amp;quot;amount&amp;quot;:100,&amp;quot;description&amp;quot;:&amp;quot;order 1&amp;quot;}]}
VM95:2 {&amp;quot;id&amp;quot;:0,&amp;quot;createdBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;modifiedBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created&amp;quot;:null,&amp;quot;modified&amp;quot;:null,&amp;quot;name&amp;quot;:&amp;quot;client 2&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;client2.email@test.com&amp;quot;,&amp;quot;orders&amp;quot;:[{&amp;quot;id&amp;quot;:0,&amp;quot;createdBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;modifiedBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created&amp;quot;:null,&amp;quot;modified&amp;quot;:null,&amp;quot;amount&amp;quot;:600,&amp;quot;description&amp;quot;:&amp;quot;order 2&amp;quot;}]}
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sample above combine namespace and prototypal inheritance. Namespace allows you to add new module for enhancement, and it allows you to organize your API better.  On the other hand, through the globle namespace you can inject customized service, or you can replace it. The disadvantage of namespace, when the source code blows up, it will be a bit more complicated, especially you break different into different files. Mock test or unit test will needs a bit more work to do as well. There is no pattern that is a Silver Bullet, but rather you should assess where you are at and examine the pros and cons of each pattern to address your situation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Windows command &amp; hotkey as a hacker - Part 1</title>
      <link>https://harryho.github.io/blog/use-windows-command-hotkey-as-hacker-1/</link>
      <pubDate>Sun, 09 Mar 2014 10:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/blog/use-windows-command-hotkey-as-hacker-1/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Do you want to make your friends amazed by your computer skill and praise you as genius? Or the hacker as watched in Sci-Fi movies? You don&amp;rsquo;t need Mac, Linux or other operating systems, just Windows, you can show-off and look like hacker and master of Zeroes and Ones, even you have no any idea of it. Here are some tricks by which you can make your friends&amp;rsquo; jaw drop.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;start-windows-command-prompt-as-hacker&#34;&gt;Start Windows command prompt as hacker&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use use hotkeys to open &lt;code&gt;Run&lt;/code&gt; feature in two keystrokes: &lt;code&gt;WinKey + R&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type &lt;code&gt;cmd&lt;/code&gt; and press &lt;code&gt;Enter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/windows-run-feature.png&#34; alt=&#34;Run&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type &lt;code&gt;color A&lt;/code&gt; to change the color of text to &lt;strong&gt;Green&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change the title to &lt;strong&gt;Hacker Tool&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List the folders of current directory&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;C:\&amp;gt;User\&amp;lt;yourname&amp;gt;\color A
C:\&amp;gt;User\&amp;lt;yourname&amp;gt;\title Hacker Tool
C:\&amp;gt;User\&amp;lt;yourname&amp;gt;\cd \
C:\&amp;gt;tree 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;use-other-command-prompt&#34;&gt;Use other command prompt&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cmder.net/&#34;&gt;cmder&lt;/a&gt; is an awesome product. I suggest you just choose mini version to download and install if you are not the heavy git user. There are so many built-in features you can play around.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/console/&#34;&gt;console2&lt;/a&gt; is a very good as well. I used it for many years. I&amp;rsquo;m planning to migrate to &lt;code&gt;cmder&lt;/code&gt;, but it will take me some time to do it, because I have some customized scripts need to run in &lt;code&gt;console2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;useful-windows-hotkeys&#34;&gt;Useful Windows hotkeys&lt;/h3&gt;

&lt;p&gt;I believe the common hotkeys you should know. e.g. &lt;code&gt;Ctrl + C, Ctrl + V, Ctrl + A&lt;/code&gt;. Here the hotkeys I list below are some rarely-used but very useful hotkys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General hotkeys&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + Esc&lt;/code&gt;  &amp;ndash;  Open task manager&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WinKey + R&lt;/code&gt;  &amp;ndash;  run dialog&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Winkey + D&lt;/code&gt;  &amp;ndash;  toggle &amp;lsquo;show desktop&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Winkey + L&lt;/code&gt;  &amp;ndash;  lock workstation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Winkey + E&lt;/code&gt;  &amp;ndash;  windows explorer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + R&lt;/code&gt;  &amp;ndash;  clear page cache and refresh webpage on browser&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + (shift +) tab&lt;/code&gt;  &amp;ndash;  switch windows forwards (or backwards)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + F4&lt;/code&gt;  &amp;ndash;  close the selected application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F2&lt;/code&gt; , renames selected file. Also used with spreadsheet cells.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl and (+/-)&lt;/code&gt;  &amp;ndash;  zoom in or zoom out text on the editor tool&lt;/li&gt;
&lt;li&gt;Middle click a tab  &amp;ndash;  close tab&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hotkeys for Windows 7 or higher version&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WinKey + W&lt;/code&gt;  &amp;ndash;  search setting iterms&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WinKey + Q&lt;/code&gt;  &amp;ndash;  search every iterms&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WinKey + F&lt;/code&gt;  &amp;ndash;  search file iterms&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WinKey + T&lt;/code&gt;  &amp;ndash;  use keyboard arrow keys to navigate dock&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Winkey + X&lt;/code&gt; - bring up laptop settings control panel&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl +  N&lt;/code&gt; - new tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + N&lt;/code&gt; - new Folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** Common short command lines for &lt;code&gt;Run&lt;/code&gt; feature**&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cmd&lt;/code&gt; &amp;ndash; start a Windows command prompt&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calc&lt;/code&gt; &amp;ndash; start the calculator application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notepad&lt;/code&gt; &amp;ndash; start the notepad application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** Advanced short command lines for &lt;code&gt;Run&lt;/code&gt; feature**&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mstsc&lt;/code&gt; &amp;ndash; start the remote desktop application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regedit&lt;/code&gt; &amp;ndash; start registry editor application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resmon&lt;/code&gt;  &amp;ndash;  awesome resource monitor - bandwidth etc (win7 or higher)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perfmon&lt;/code&gt;  &amp;ndash;  a pretty decent performance monitor (vista or higher)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;services.msc&lt;/code&gt;  &amp;ndash;  windows service management&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compmgmt.msc&lt;/code&gt;  &amp;ndash;  computer management including all other management&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventvwr&lt;/code&gt;&amp;ndash;  windows event log viewer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appwiz.cpl&lt;/code&gt; &amp;ndash; windows programs and features management on control panel&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;most-common-and-useful-commands&#34;&gt;Most common and useful commands&lt;/h2&gt;

&lt;p&gt;This article won&amp;rsquo;t list all commands and all usages of each command. Here I will just choose the commands and some usages of command which are useful for most people. Some advanced command will be explained in Part-2.&lt;/p&gt;

&lt;p&gt;Before you start typing any cmd, I want to share a common mistake for most beginners, including myself. We always forget to use help command before we Google a solution, when we hit some impediment or roadblock. Actually help command is the most common built-in feature within any software or tool. Learn how to use help command or find the help information is first important when we are going to learn anything new.&lt;/p&gt;

&lt;h3 id=&#34;help&#34;&gt;help&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Start command prompt and type &lt;code&gt;help&lt;/code&gt;. You will get a list of command which you can use, and short decription of each command.&lt;/li&gt;
&lt;li&gt;Use help command to see and learn other commands
&lt;code&gt;
C:\&amp;gt;help
C:\&amp;gt;help cd 
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;start&#34;&gt;start&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Start another &lt;code&gt;cmd&lt;/code&gt; window prompt.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cd-chdir&#34;&gt;cd / chdir&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Displays the name of or changes the current directory

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;cd&lt;/code&gt; to display the name of directory&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;cd c:\windows&lt;/code&gt; to change to &lt;code&gt;c:\Windows&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;cd /d D:&lt;/code&gt; to change to d driver if you have d driver&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dir&#34;&gt;dir&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Displays a list of files and subdirectories in a directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;dir /a:h/a:d&lt;/code&gt; to display hidden subdirectories only&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;dir /p/w&lt;/code&gt; to display many items per screen within wide list format&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;dir /o:-s&lt;/code&gt; to display items sorted by size (biggest first)&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;dir /o:s&lt;/code&gt; to display items sorted by size (smallest first)&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;dir /o:dn&lt;/code&gt; to display items sorted by date/time  (oldest first) and name ( alphabetic)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tree&#34;&gt;tree&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;tree /f&lt;/code&gt; graphically displays the folder structure of a drive or path.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ren-rename&#34;&gt;ren / rename&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;ren abc cba&lt;/code&gt; to ren file name from &amp;ldquo;abc&amp;rdquo; to &amp;ldquo;cba&amp;rdquo; if there is file named abc under current directory.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;*.md *.txt&lt;/code&gt; to ren all files under current directory with &lt;code&gt;md&lt;/code&gt; extension to &lt;code&gt;txt&lt;/code&gt; extension&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;md-mkdir&#34;&gt;md / mkdir&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;md a\b\c\d &amp;amp; tree a&lt;/code&gt; to create all directories once and display result as follow&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;current-directory&amp;gt;\a
|___b
    |___c
        |___d

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;copy&#34;&gt;copy&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;touch test.txt &amp;amp; copy test.txt C:\User\&amp;lt;yourname&amp;gt;\&lt;/code&gt; to create a test.txt file and copy the test.txt to C:\User&amp;lt;yourname&amp;gt;\&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;move&#34;&gt;move&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;move a b&lt;/code&gt; to move folder &lt;code&gt;a&lt;/code&gt; into folder &lt;code&gt;b&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;rd-rmdir&#34;&gt;rd / rmdir&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;rd a&lt;/code&gt; to remove a empty directory &lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;rd /s a&lt;/code&gt; to remove a directory &lt;code&gt;a&lt;/code&gt; including all files and empty subdirectories within folder &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;del&#34;&gt;del&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;IMPORTANT&lt;/em&gt;&lt;/strong&gt; : The item deleted by &lt;code&gt;del&lt;/code&gt; can not be restored from &lt;code&gt;bin&lt;/code&gt;. Please be careful before you use this command.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;del&lt;/code&gt; to delete files or &lt;code&gt;del *.txt&lt;/code&gt; to delete all files with &lt;code&gt;txt&lt;/code&gt; extension&lt;/li&gt;
&lt;li&gt;Combine &lt;code&gt;rd&lt;/code&gt; can remove folder with not-empty subdirectories `del /s/q &lt;folder&gt; &amp;amp; rd /s/q &lt;folder&gt;&amp;lsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cls&#34;&gt;cls&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;cls&lt;/code&gt; to clean the screen&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Brief history of Linux</title>
      <link>https://harryho.github.io/blog/linux-history/</link>
      <pubDate>Thu, 10 Jan 2013 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/blog/linux-history/</guid>
      <description>

&lt;h1 id=&#34;linux&#34;&gt;Linux&lt;/h1&gt;

&lt;h3 id=&#34;breif-history&#34;&gt;Breif History&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;When we are talking about Linux, we cannot miss its ancesor&amp;ndash;Unix. Unix is one of the most popular operating systems worldwide because of its large support base and distribution. It was originally developed at AT&amp;amp;T as a multitasking system for minicomputers and mainframes in the 1970&amp;rsquo;s, but has since grown to become one of the most widely-used operating systems anywhere, despite its sometimes confusing interface and lack of central standardization.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Many hackers feel that Unix is the Right Thing&amp;ndash;the One True Operating System. Hence, the development of Linux by an expanding group of Unix hackers who want to get their hands dirty with their own system.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Linux was originally developed as a hobby project by Linus Torvalds. It was inspired by Minix, a small Unix system developed by Andy Tanenbaum. The first discussions about Linux were on the Usenet newsgroup, comp.os.minix. These discussions were concerned mostly with the development of a small, academic Unix system for Minix users who wanted more.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Linux is a complete multitasking, multiuser operating system, as are all other versions of Unix. This means that many users can log into and run programs on the same machine simultaneously.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;linux-distro&#34;&gt;Linux distro&lt;/h3&gt;

&lt;p&gt;A Linux distribution (often abbreviated as distro) is an operating system made from a software collection, which is based upon the Linux kernel and, often, a package management system. Linux users usually obtain their operating system by downloading one of the Linux distributions, which are available for a wide variety of systems ranging from embedded devices (for example, OpenWrt) and personal computers (for example, Debian, Fedora) to powerful supercomputers (for example, Rocks Cluster Distribution).&lt;/p&gt;

&lt;p&gt;You can check out the more of each Linux distro from &lt;a href=&#34;https://distrowatch.com/&#34;&gt;DistroWatch&lt;/a&gt;. The top 20 ranking Linux distro changes dramatically in last few years. Almost every year, some amazing Linux distro emerged into top 10, even top 5 list, but there are some distroes which are quite stable, and stay into top 10 to 20 over last decade.&lt;/p&gt;

&lt;p&gt;Here we just give the brief history of some stable and most popular distroes. It means the article will only cover the big players in the linux world. Some special and awesome distroes are assumed as minority, such as, Pentoo, Arch Linux, etc. so we won&amp;rsquo;t cover those distroes.&lt;/p&gt;

&lt;h1 id=&#34;debian-ubuntu&#34;&gt;Debian/Ubuntu&lt;/h1&gt;

&lt;h3 id=&#34;breif-history-1&#34;&gt;Breif History&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Ubuntu is one of a number of Linux distributions. The source code that makes up the Ubuntu distribution originates from another, much older Linux distribution known as Debian (so called because it was started by two people named Debra and Ian). Debian is still a widely respected operating system but came under criticism for infrequent updates and less than user friendly installation and maintenance (though these areas have shown improvement recently).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A South African internet mogul (who made his fortune selling his company to VeriSign for around $500 million) decided it was time for a more user friendly Linux. He took the Debian distribution and worked to make it a more human friendly distribution which he called Ubuntu. He subsequently formed a company called Canonical Ltd to promote and provide support for Ubuntu.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The word &amp;ldquo;Ubuntu&amp;rdquo; is an ancient Zulu and Xhosa word that means &amp;ldquo;humanity to others&amp;rdquo;. Ubuntu also means &amp;ldquo;I am what I am because of who we all are&amp;rdquo;.The Ubuntu operating system brings the spirit of Ubuntu to the world of computers.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;fedora-centos-redhat&#34;&gt;Fedora/CentOS/Redhat&lt;/h1&gt;

&lt;h2 id=&#34;breif-history-2&#34;&gt;Breif History&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Fedora&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Fedora has received many updates and individual releases over the years. It is a playground for new functionality. Often new technology is found here. It can be compared with other distributions like Arch Linux, except that it is slightly less aggressive in deploying the latest software components for everything. The difference between Fedora and other distributions is the corporate support by Red Hat. That means that professional developers can work on projects that are first tested in Fedora. A lot of these components may then also be picked up by other distributions.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Red Hat Enterprise Linux (RHEL)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The Enterprise product of Red Hat is named RHEL for short. The main difference with Fedora is that is focused on companies which prefer stability. The most business-critical services are deployed on this platform. Battle-tested components might finally end up in this distribution.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;CentOS&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;CentOS as known as the free enterprise version of RedHat Linux, is one of most popular VPS or dedicated linux. Maybe you are using ubuntu or mint for your development, but many companies or institutes still choose CentOS as their production server, even full stack. Grasp the basic setup CentOS for website or web app or web service is still quite important.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now CentOS is much more easy to setup for different purpose. Comparing with 10 years ago or more, even you use graphic UI to setup, you still will come across some weird glitch. CentOS has different group for you to install. Every group includes bunch of packages, and it focus on some specific purpose. I believe they meet most IT infra&amp;rsquo;s requirement. So you don&amp;rsquo;t need do much research, and work around to figure out how to build those packages together. Just use following command you can get all group list.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;suse-opensuse&#34;&gt;Suse / OpenSuse&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;SUSE Linux is a computer operating system. It is built on top of the open source Linux kernel and is distributed with system and application software from other open source projects. SUSE Linux is of German origin, basically an acronym of &amp;ldquo;Software und System-Entwicklung&amp;rdquo; (software and systems development), and was mainly developed in Europe. The first version appeared in early 1994, making SUSE one of the oldest existing commercial distributions. It is known for its YaST configuration tool.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Novell bought the SUSE brands and trademarks in 2003. Novell, one of the founding members of the Open Invention Network, decided to make the community an important part of their development process by opening widely the distribution development to outside contributors in 2005, creating the openSUSE distribution and the openSUSE Project. Novell employed more than 500 developers working on SUSE in 2004. On 27 April 2011, Novell (and SUSE) were acquired by The Attachmate Group, which made SUSE an independent business unit. Later, in October 2014, the entire Attachmate Group, including SUSE, was acquired by the British firm Micro Focus International. SUSE continues to operate as an independent business unit.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Better practice and common pitfalls in Java - Part 1</title>
      <link>https://harryho.github.io/blog/better-practice-in-java-1/</link>
      <pubDate>Sat, 10 Dec 2011 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/blog/better-practice-in-java-1/</guid>
      <description>

&lt;h2 id=&#34;prelude&#34;&gt;Prelude&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Java is one of my favorite OOP language. I want to keep the Java good practice and pitfall as a series. Pitfall will cover most misunderstanding of Java and how to avoid them. As we know, there is no medicine as mighty purpose. So some good practice will be obsolete or replaced by some advanced solution, because new problem push the IT world keep looking for better solution to solve such problems. In my opinion, it is most challenged but excited part of IT.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;refactor-constant-variables-with-enum&#34;&gt;Refactor constant variables with Enum&lt;/h3&gt;

&lt;p&gt;Enum was a great improvement in Java 1.5. From that more and more developer abandom the interface or abstract class as constant variable container.&lt;/p&gt;

&lt;p&gt;Before Java 1.5 you will following coding in many Java program.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;    // Use interface or abstract class as constant variable container
    public interface Country {
         public static final String AU = &amp;quot;Australian&amp;quot;;
         public static final String UK = &amp;quot;United Kingdom&amp;quot;; 
         public static final String US = &amp;quot;United State&amp;quot;; 
    }
    
    public class Util {
         
        public static String getLanguageCode(String country) {
    
            String languageCode = &amp;quot;en&amp;quot;;
            switch (country) {
                case Country.AU:
                    languageCode = &amp;quot;en-au&amp;quot;;
                    break;
                case Country.UK:
                    languageCode = &amp;quot;en-uk&amp;quot;;
                    break;
                case Country.US:
                    languageCode = &amp;quot;en-us&amp;quot;;
                    break;
            }
            return languageCode;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above program looks very good. Please take a close look and check it carefully. You will find the program will never return &lt;strong&gt;&lt;em&gt;en-au&lt;/em&gt;&lt;/strong&gt;, since there is a typo in the constant AU. It should be &lt;strong&gt;&lt;em&gt;Australia&lt;/em&gt;&lt;/strong&gt; instead of &lt;strong&gt;&lt;em&gt;Australian&lt;/em&gt;&lt;/strong&gt;. I believe many developers have short sight problem like me, and it happened again and again. Using string as constant flag is not a good option, but there is no other better solution before Java 1.5.&lt;/p&gt;

&lt;p&gt;After Java 1.5, you will see the change below. Enum is the best container for constants. It can help you check the program time. Meanwhile, it can simplfy your coding.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Use Enum as constant variable container
public enum  Country {
    Australia, UnitedKingdom, UnitedState
}

public class Util {
        
    public static String getLanguageCode(Country country) {

        String languageCode = &amp;quot;en&amp;quot;;
        switch (country) {
            case Australia:
                languageCode = &amp;quot;en-au&amp;quot;;
                break;
            case UnitedKingdom:
                languageCode = &amp;quot;en-uk&amp;quot;;
                break;
            case UnitedState:
                languageCode = &amp;quot;en-us&amp;quot;;
                break;
        }
        return languageCode;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you program will not be by any unintentional typo, since it will throw you compile error before you run the application. If you haven&amp;rsquo;t refactor your static constants container, it is time to improve it now.&lt;/p&gt;

&lt;p&gt;(Above were written in 2006. After Java 1.7, I found it can be improved with new feature of Java 1.7 )&lt;/p&gt;

&lt;p&gt;After Java Java 1.7, there are some new features. One of these new features is Switch statement. Now it supports String. It is a great for Java developer.&lt;/p&gt;

&lt;p&gt;With this new feature, the old Enum can be enhanced and the Util class can provide more handy methods (Overload method getLanguageCode) for development.&lt;/p&gt;

&lt;p&gt;New Enum class, which can support flexible requirement. In the early version of Enum, the toString method only will return exactly the specified constanct name. Now the Enum can be override with toString to return different constant name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// It can return customized name and simplify coding 
public enum Country {
    AU(&amp;quot;Australia&amp;quot;, &amp;quot;au&amp;quot;,&amp;quot;en-au&amp;quot;), 
    UK(&amp;quot;United Kingdom&amp;quot;, &amp;quot;en-uk&amp;quot;),
    US(&amp;quot;United State&amp;quot;, &amp;quot;us&amp;quot;,&amp;quot;en-us&amp;quot;);

    String countryName;
    String countryCode;
    String languageCode;
    
    private Country(String name, String code) {
        countryName = name;
        countryCode = code;
    }

    public String getCode() {
        return countryCode;
    }
    
    public String getLanguageCode() {
        return languageCode;
    }
    
    @Override
    public String toString() {
        return countryName;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Uitl class can convert any country name or country code to Enum Country, vice versa. Now developer can seamless convert the String from UI to the Enum, since on the UI, usually the country name will Australia or United Kingdom instead of just AU or UK. For coding, use AU or UK can simplify coding and is friendly to developer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Util {
        
    public static Country convertCountryNameOrCode(String nameOrCode ) {
        
        Country country = null;
        switch (nameOrCode) {
            case &amp;quot;au&amp;quot;:
            case &amp;quot;AU&amp;quot;:
            case &amp;quot;Australia&amp;quot;:
                country = Country.AU;
                break;
            case &amp;quot;uk&amp;quot;:
            case &amp;quot;UK&amp;quot;:  
            case &amp;quot;United Kingdom&amp;quot;:
                country = Country.UK;
                break;
            case &amp;quot;us&amp;quot;:
            case &amp;quot;US&amp;quot;:  
            case &amp;quot;United State&amp;quot;:
                country = Country.UK;
                break;
        }
        return country;
    }
    
    public static String getCountryName(  Country country ){
        String countryName = null;
        switch (country){
            case AU:
                countryName = Country.AU.toString();
                break;
            case US:
                countryName = Country.UK.toString();
                break;
            case UK:
                countryName = Country.US.toString();
                break;
            default:
                System.err.println(&amp;quot;Unknow Country&amp;quot;);
                assert false;
                break;
        }
        return countryName;
    }

    
    public static String getCountryCode(  Country country ){
        String countryCode = null;
        switch (country){
            case AU:
                countryCode = Country.AU.getCode();
                break;
            case US:
                countryCode = Country.UK.getCode();
                break;
            case UK:
                countryCode = Country.US.getCode();
                break;
            default:
                System.err.println(&amp;quot;Unknow Country&amp;quot;);
                assert false;
                break;
        }
        return countryCode;
    }
        
    public static String getLanguageCode(Country country) {
    
            String languageCode = &amp;quot;en&amp;quot;;
            switch (country) {
                case AU:
                    languageCode = Country.AU.getLanguageCode() ;
                    break;
                case UK:
                    languageCode =  Country.UK.getLanguageCode();
                    break;
                case US:
                    languageCode =  Country.US.getLanguageCode();
                    break;
            }
            return languageCode;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are planning to refactor your code, please give a second thought. It is time to dump to try these new features.&lt;/p&gt;

&lt;h3 id=&#34;good-stuff-from-not-shiny-java-7&#34;&gt;Good stuff from not shiny Java 7&lt;/h3&gt;

&lt;p&gt;When the Java 7 was released, I was kind of disappointed without lamda, jigsaw as most developers, but when I tried new Path, Files API, I found that is great improvement. The enhancement of this new IO is really useful. It save so much effort for Java developer.&lt;/p&gt;

&lt;p&gt;To be hoenst, before Java 1.7, Coding file manipulation in Java is very headache task. I say &amp;ldquo;headache&amp;rdquo; it doesn&amp;rsquo;t mean it is difficult. Just comparing with other program lanugage, you had to take much more effort to take care of the boilerplate, and all are tedious job. That is why sometimes I prefer cmd in Window or bash in Linux to complete the task instead of using Java to handle file manipulation. Now I think I can refactor old file manipulation coding and make it much more elegant.&lt;/p&gt;

&lt;h4 id=&#34;better-file-visitor-implementation&#34;&gt;Better file visitor implementation&lt;/h4&gt;

&lt;p&gt;Following is simple customizaed file visitor which has been the part of my old util.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;

public class CustomFileVisitor extends SimpleFileVisitor&amp;lt;Path&amp;gt; {
    @Override
    public FileVisitResult postVisitDirectory(Path dir , IOException arg1) throws IOException {
        System.out.println( &amp;quot;post visit dir :  &amp;quot;+  dir );
        return FileVisitResult.CONTINUE;
        }

        @Override
    public FileVisitResult preVisitDirectory(Path dir , IOException arg1) throws IOException {
        System.out.println( &amp;quot;post visit dir :  &amp;quot;+  dir );
        return FileVisitResult.CONTINUE;
        }

    @Override
    public FileVisitResult visitFile(Path file, BasicFileAttributes attr)
            throws IOException {
         if ( attr.isSymbolicLink() )
          { System.out.println( &amp;quot; symbolic link  :  &amp;quot;+  file  );
          
          }else if (  attr.isSymbolicLink() ){            
              System.out.println( &amp;quot; regular file : &amp;quot;+ file );
          }
        return FileVisitResult.CONTINUE;
    }
     
    @Override
    public FileVisitResult visitFileFailed(Path file, IOException exc)
            throws IOException {        
         System.err.println( exc.getMessage());
        return FileVisitResult.CONTINUE;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use this customized  is so easy. Just 3 lines coding you can test it by yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        CustomFileVisitor fileVisitor = new CustomFileVisitor();
        Path path = Paths.get(&amp;quot;TestDir&amp;quot;);
        Files.walkFileTree(path, fileVisitor);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;arm&#34;&gt;ARM&lt;/h4&gt;

&lt;p&gt;Automatic resource management is another attractive features of Java 7 and project coin. As name itself implies that now JVM is going to be handling all the external resource and make programmer free to bother about resource management, especially for people like me miss the &lt;code&gt;using&lt;/code&gt; statement in C#. Sometimes I wonder why Java is such stubborn not to learn some good features from C#. As we know, C# comes after Java and copies most concept at the early stage, but it really pushed Object Oriented Concept (OOC) to a new level and inspired Java world a lot with its many good feature. I really hope someday I can code in Java as simple as C#. Wise men learn by other men&amp;rsquo;s mistakes; fools by their own.&lt;/p&gt;

&lt;p&gt;In the past, java programmers use any external resources like file, printer or any devices to close after my program execution complete. Normally we close the resources which we have open in beginning of our program or we decide that if program finish normally how to manage the resource or if our program finish abnormally how to close the resource. Following are comparison of old and new style.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Snippet of old style&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;FileInputStream exchangeCurrencyReader= null;
FileOutputStream exchangeCurrencyWriter = null;
try {
    exchangeCurrencyReader = new FileInputStream(&amp;quot;AUDvsUSD.txt&amp;quot;);
    exchangeCurrencyWriter = new FileOutputStream(&amp;quot;AUDvsUSD.txt&amp;quot;);
    int var;
    while (var = exchangeCurrencyReader.read()) != -1)
        exchangeCurrencyWriter.write(var);
} 
finally {
    if (exchangeCurrencyReader!= null)
        exchangeCurrencyReader.close();
    if (exchangeCurrencyWriter!= null)
        exchangeCurrencyWriter.close();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Code in Java 7&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try ( FileInputStream exchangeCurrencyReader = new FileInputStream(&amp;quot;AUDvsUSD.txt&amp;quot;);
    FileOutputStream exchangeCurrencyWriter = new FileOutputStream(&amp;quot;AUDvsUSD.txt&amp;quot;)){
      int var;
      while((var= exchangeCurrencyReader.read()) != -1 )
            exchangeCurrencyWriter.write();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above we have declare two file stream one is input file we are reading from one file and writing to another file. After the whole process both streams will be closed automatically either the code has been executed properly or not. Both exchangeCurrencyReader.close() and exchangeCurrencyWriter.close() methods will be called automatically which is the best part of ARM. We should not miss good part from Java 7.&lt;/p&gt;

&lt;h4 id=&#34;new-file-change-monitor-service&#34;&gt;New file change monitor service&lt;/h4&gt;

&lt;p&gt;After some homework for new features of Java 7, I am tring to use file watch serviice from Java 7 to replace old file monitor program. It is great and quite simple to use. I have updated to production.&lt;/p&gt;

&lt;p&gt;Usually most Java based system somehow needs such monitor function, there will be separate process or thread to run this service, and there should be a call back handler triggered by this service. Everytime there is any file amended, the service will trigger the call back handler to complete some tasks.&lt;/p&gt;

&lt;p&gt;Following is sample of file watching service. I removed call back part which is relevant to the business.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.util.HashMap;
import java.util.Map;

public class FileWatchService {

    public static void watchFileUpdate() {
        try (WatchService service = FileSystems.getDefault().newWatchService()) {
            Map&amp;lt;WatchKey, Path&amp;gt; eventMap = new HashMap&amp;lt;&amp;gt;();
            Path dir = Paths.get(&amp;quot;TestDir&amp;quot;);

            eventMap.put(dir.register(service, StandardWatchEventKinds.ENTRY_MODIFY),dir);

            WatchKey key;
            do {
                key = service.take();
                Path eventPath = eventMap.get(key);
                for (WatchEvent&amp;lt;?&amp;gt; event : key.pollEvents()) {
                    WatchEvent.Kind&amp;lt;?&amp;gt; kind = event.kind();
                    Path path = (Path) event.context();
                    System.out.println(eventPath + &amp;quot; : &amp;quot; + kind + &amp;quot;  : &amp;quot; + path);
                }
            } while (key.reset());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public static void main (String [] args ){
       watchFileUpdate();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sample above shows one kind of events. Actually if you check the API doc, there are another two kinds of event. One is  StandardWatchEventKinds.ENTRY_CREATE , the other is  StandardWatchEventKinds.ENTRY_DELETE. These events cover almostly all business requirements.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://harryho.github.io/blog/golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harryho.github.io/blog/golang/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>