[
{
	"uri": "/os/raspberrypi-notes/",
	"title": "Raspberry Pi setup",
	"tags": ["linux", "raspberry pi"],
	"description": "",
	"content": " Prelude\n *This note is mainly to record how to setup Raspberry Pi as file server.\n Prerequisites  You have a Raspberry Pi with pre-installed raspbian SD card You are happy to get your hands dirty You have some basic computer concept. RPi is short for Raspberry Pi\n  My Raspberry Pi is a bit old I only have the RPi 1 model B with pre-installed raspbian SD card in place. It is quite outdated. If you don’t know the model of your RPi, please don’t worry it now. I will explain how to get the info later. I got this RPi as a gift 2 years ago. I left it in the garage and totally forgot it, until I cleaned up my garage a couple months ago. Actually I loved the old model with transparent plastic box more than the new one. I knew if I continued to leave it in the garage, it would be a rubbish soon, because it is not easy to find some equipment or software compatible with the old RPi. Luckily the lifespan of RPi is much longer than the mobile phone, but it still took me some effort to setup the wifi adapter.\nAfter 6-hour on and off, I got it up and run. Honestly I’m not a hardware guru, but I’m so happy not to throw this beautiful (my aesthetics is sort of quirky) box into the bin. I captured the home screen of Kodi, the media center and mobile control app.\nHome page of kodai\nScreenshot of kodi mobile app on my android phone.\nHow to start There is no wifi or bluetooth support on this model. I have to connect this tiny box to my switch via cable all the time. There is a small problem, because my switch is far away from my laptop, monitor, keyboard, etc. and I don’t have a cable long enough to connect the RPi and switch.\nFirst thing first, I need to setup ssh server, and change the configuration to allow password login, also make it auto-start after reboot. To do so I just need monitor and keyboard.\nConnect the RPi with monitor and keyboard  Reset pasword of pi  sudo passwd pi  SSH server setup sudo apt-get install openssh-server ### backup default config sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.ori sudo chmod a-w /etc/ssh/sshd_config.ori ### use any editor to update sshd_config sudo nano /etc/ssh/sshd_config ### uncomment PasswordAuthentication yes to allow remote password login ### setup ssh auto-start onboot sudo update-rc.d ssh defaults ### reboot sudo reboot ### Check the ssh is running after reboot sudo service ssh status ### You should see sth as below [ok] sshd is running ### Turn off Pi sudo poweroff  Connect RPi with the switch After all above is done, you can disconnect the monitor and keyboard, and connect the RPi with the switch (or modem). Once the power is on, you should be able to access the RPi from you PC or laptop.\nFind the ip address Access the admin home page of my switch via browser. e.g. http://192.168.0.1/index.html (The actual URL depends on your switch or modem. You can find it on the label sticked on the back or bottom.)\nIf you forget your password to login the admin page, you still can reset your swtich. If your modem is 3 in 1 model including switch, you need to make sure you have the ID and Password to access the internet before you reset it.\nAfter you login successfully, you just need to expand main menus find a menu called DHCP. e.g.\nBasic Setup |__ ... Advanced Setup |__ ... Device |__ DHCP |__ WAN |__ ...  You will see table as blew.\n   Hostname MAC Address IP Address Expires In     PC-1 2f:3f:09:ff:f5:24 192.168.1.7 x hours x mins   PC-2 c0:9f:05:ff:f9:14 192.168.1.8 x hours x mins   Laptop-1 b0:f6:05:e2:f5:99 192.168.1.9 x hours x mins   raspberrypi a5:06:b2:07:c4:03 192.168.1.10 x hours x mins    Access RPi with your laptop  From Linux or Mac  ssh username@192.168.1.10 ### type yes ### type the password   For widnows  You need to download a ssh tool. If you installed git before, you would have it on your computer. Otherwise, you need to install a SSH too. I recommend you to install Putty. It is free and quite handy.\nAfter you install and launch Putty, you just need to type in the IP address 192.168.1.10 to the field Host Name (or IP Address), then click button Open.\n### type in pi as login user login as: pi ### type in password pi@192.168.1.10's password:  Access RPi via VNC Setup VNC server on RPi sudo apt-get update sudo apt-get install tightvncserver   Launch VNC server and setup pasword  /usr/bin/tightvncserver ### Setup password for remote access. ### View only password is not necessary ### setup VNC server to auto start sudo update_rc.d tightvncserver defaults sudo reboot  Setup VNC client on your PC Linux: Use xRDP I believe you can figure it out yourself, if you used Linux as desktop.\nWindows: Install RealVNC Viewer as VNC client\n Laucn the VNC Viewer and create a new connection   Type in the VNC password and you can login RPi with GUI  After all above is done, you have your RPi ready. You can choose what you want to build on it. Considering its CPU and RAM, it is not sufficient to be used as daily desktop PC, but it is still enough to work as a server. e.g. File Server, Web Server, Email Server, FTP server or Media Center.\nNow I want to make a file server and media center on it.\nSetup File Server via Samba  Attach external storage to your RPi. The capacity of preinstalled SD card has only 8G space, so I attached my portal hard drives to RPi. You can attach the PC hard drive, USD or another SD card via adapter. It is really up to what you have in place.   I want to make one as public share folder without authentication, and the other needs password to access.\n  If your hard drive or USB is ntfs, the RPi might not recognize your device. You can simply install a package to make it work.  sudo apt-get install ntfs-3g   Get drive info after attach two hard drives  sudo lsblk ### You will see the tree structure of drives NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 1.8T 0 disk └─sda1 8:1 0 1.8T 0 part /media/mydrive1 └─sda2 8:2 0 870G 0 part /media/mydrive2 mmcblk0 179:0 0 7.4G 0 disk ├─mmcblk0p1 179:1 0 56M 0 part /boot └─mmcblk0p2 179:2 0 7.4G 0 part /   Remount the drives with proper name  sudo su ### switch to root cd /media umount mydrive1 umount mydrive2 mkdir public private mount -o rw /sda/sda1 public mount -o rw /sda/sda2 private   Change fstab to support read and write permission  sudo nano /etc/fstab   Add following lines to the end of file. The format type of my drives are ntfs. If you are not sure what file system type is, you can run this command to check sudo lsblk -o name,fstype  /dev/sda1 /media/public ntfs nofail,noatime 0 0 /dev/sda2 /media/private ntfs nofail,noatime 0 0   After you complete above changes, you will see the difference by typing the command sudo lsblk  NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 1.8T 0 disk └─sda1 8:1 0 1.8T 0 part /media/public └─sda2 8:2 0 870G 0 part /media/private mmcblk0 179:0 0 7.4G 0 disk ├─mmcblk0p1 179:1 0 56M 0 part /boot └─mmcblk0p2 179:2 0 7.4G 0 part /   Install Samba  sudo apt-get update sudo apt-get upgrade sudo apt-get install samba samba-common-bin   Setup Samba configuration  Backup original config and update the config sudo su cd /etc/samba cp smb.conf smb.conf.ori nano smb.conf  Change the line below: * `wins support = no` to `wins support = yes`  Add follow lines to end of the file [public] comment = Share Folder path = /media/public create mask = 0665 directory mask = 0775 read only = no guest ok = yes [private] comment = Private Folder path = /media/private valid users = root,smbu force user = smbu create mask = 0777 directory mask = 0777 writable = yes browsable = yes read only = no guest ok = yes  Add new user smbu for remote access. In case you sudo useradd smbu sudo passwd smbu sudo usermod -a -G root smbu sudo smbpasswd smbu ## setup pasword for remote access  Access the network folder Linx I have no any problem to access the both netowrk drives via Linux.\nWindows It took me some time to make it work for me. There are some bullet points, which may help you for trouble shooting.\n Please use WORKGROUP instead of domain. Please keep name of workgroup as WORKGROUP Turn on the network discovery\nControl Panel \u0026gt; All Control Panel Items\u0026gt; Network and Sharing Cente \u0026gt; Advanced sharing settings Reboot the PC or laptop  Get accurate version of RPi model  Get the revision code  cat /etc/cpuinfo   Check the table below to find your model     MODEL AND PI REVISION MEMORY HARDWARE REVISION CODE FROM CPUINFO     Model B Revision 1.0 256MB 0002   Model B Revision 1.0 + ECN0001 (no fuses, D14 removed) 256MB 0003   Model B Revision 2.0 Mounting holes 256MB 0004 0005 0006   Model A Mounting holes 256MB 0007,0008,0009   Model B Revision 2.0 Mounting holes 512MB 000d 000e 000f   Model B+ 512MB 0010   Compute Module 512MB 0011   Model A+ 256MB 0012   Pi 2 Model B 1GB a01041 (Sony, UK) a21041 (Embest, China)   PiZero 512MB 900092(no camera connector) 900093(camera connector)   Pi 3 Model B 1GB a02082 (Sony, UK) a22082 (Embest, China)   PiZero W 512MB 9000c1    Setup Wifi Adapter Wifi adapter is not necessary for media centre, but it would save some effort to move your RPi around in your place, especially you want to connect your RPi with different devices from time to time.\nI bought a D-Link adapter, which is dwa-131 with usb 2.0. This is the oldest one I can find in the store. If you are going to buy wifi adapter for old Unix-like system, please don’t buy the latest model. You will find you are trapped into incompatible issue between wifi drive and Linux kernel. You may have to upgrade the kernel or rebuild the drive.\nAs you know, there is always some hiccup to find the correct wifi drive to support your portable wifi adapter. It took me a while to find the proper way to install the wifi adapter drive. If you have the RPi 2\u0026frasl;3, it would be much more easier. My RPi 1 model B comes with kernel 4.1.18*. I cannot find the source code of wifi drive which supports this old kernel today, and I don’t want to upgrade and rebuild the kernel.\nFinally, I found a post on RPi\u0026rsquo;s forum which solved my problem. Link of MrEngman\u0026rsquo;s post. He updated on April aobut the dropbox issue and alternative solution.\nDownload and install the new version of the script with commands\nsudo wget http://www.fars-robotics.net/install-wifi -O /usr/bin/install-wifi sudo chmod +x /usr/bin/install-wifi ### Shows details on using it. sudo install-wifi -h ### To install the driver on your current kernel you should just need to run command sudo install-wifi ### Check the wifi interface after installation ifconfig -a  Setup Wifi password. You can simply do it via GUI application or via command lines if you like. Please check out the official document as below.\nhttps://www.raspberrypi.org/documentation/configuration/wireless/\nInstall Kodi as media centre If you have NOOBS in the place, then you have everything you need. Because I don\u0026rsquo;t have it, I follow the official instruction to install kodi. It is a simple way to convert your RPi into a media centre without scratching your head too much.\n### Install kodi sudo apt-get update sudo apt-get install kodi ### Config kodi sudo nano /etc/default/kodi ENABLED=1  Reboot the RPi, before you reboot it please make sure your TV’s HDMI has plugged into RPi. After a couple minutes, you will see the home page as I posted above. Don’t forget to install remote control app on your mobile. I pretty sure you find some remote control app for Kodi on your phone. Finally, you can enjoy your home media center.\n"
},
{
	"uri": "/os/lubuntu16-desktop/",
	"title": "Lubuntu 16 desktop",
	"tags": [],
	"description": "",
	"content": " Prelude\n There is no big difference against setup between Lubuntu and Ubuntu. I just want to keep a latest version of setup for myself as reference\n Prerequisites  You have Lubuntu 16 in place Internet is available  UFW setup sudo ufw enable sudo ufw allow 80/tcp sudo ufw allow ssh sudo ufw allow 443/tcp sudo ufw allow 8000/tcp  SSH server setup !!! For production environment, SSH should be secured by the CA\nsudo apt-get install openssh-server ## backup default config sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.factory-defaults sudo chmod a-w /etc/ssh/sshd_config.factory-defaults ## use any editor to update sshd_config sudo nano /etc/ssh/sshd_config ## uncomment PasswordAuthentication yes to allow remote password login ## Password authentication is only for test environment ## setup ssh auto-start onboot sudo update-rc.d ssh defaults  !!! Install the software-properties-common Package sudo apt-get install software-properties-common python-software-properties  Time Zone setup sudo dpkg-reconfigure tzdata  Install tmux sudo apt-get install tmux   Most useful tmux commands   Ctrl+b \u0026ldquo; — split pane horizontally.\nCtrl+b % — split pane vertically.\nCtrl+b arrow key — switch pane.\nHold Ctrl+b, don’t release it and hold one of the arrow keys — resize pane.\nCtrl+b c — \u0026copy;reate a new window.\nCtrl+b , — rename reate a new window.\nCtrl+b n — move to the (n)ext window.\nCtrl+b p — move to the (p)revious window.\n Install git sudo add-apt-repository ppa:git-core/ppa sudo apt-get update sudo apt-get install git  install docker CE (Ubuntu 16 LTS) ## Update the apt package index sudo apt-get update ## Install packages to allow apt to use a repository over HTTPS sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common ## Add Docker’s official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - ## Verify the last 8 characters of the fingerprint. sudo apt-key fingerprint xxxxxxxx ## set up the stable repository sudo add-apt-repository \\ \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\u0026quot; ## apt update sudo apt-get update ## install docker CE sudo apt-get install docker-ce  Install JDK 9  Downlaod the JDK from Oracle website.  sudo add-apt-repository ppa:webupd8team/java sudo apt-get update sudo apt-get install oracle-java9-installer java -version   Setup environment  sudo apt-get install oracle-java9-set-default sudo apt autoremove ## Following setup is no longer required ## sudo su ## cat \u0026gt;\u0026gt; /etc/environment \u0026lt;\u0026lt;EOL ## JAVA_HOME=/usr/lib/jvm/java-9-oracle ## JRE_HOME=/usr/lib/jvm/java-9-oracle/jre ## EOL   Test JDK with a simple HelloWorld program  import java.util.Calendar; class HelloWorld { public static void main(String[] args) { Calendar cal = Calendar.getInstance(); int year = cal.get(Calendar.YEAR); int month = cal.get(Calendar.MONTH) + 1; int day = cal.get(Calendar.DATE); int hour = cal.get(Calendar.HOUR_OF_DAY); int minute = cal.get(Calendar.MINUTE); String username = System.getProperty(\u0026quot;user.name\u0026quot;); System.out.println(username+ \u0026quot;: Hello World! \u0026quot;); System.out.println(year + \u0026quot;/\u0026quot; + month + \u0026quot;/\u0026quot; + day + \u0026quot; \u0026quot; + hour + \u0026quot;:\u0026quot; + minute); } }   Compile and run the program  javac HelloWorld.java java HelloWorld.java  Install nodejs  Install Nodejs 8.x  curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash - sudo apt-get install -y nodejs   Install latest npm, yarn and ts  sudo npm install -g npm sudo npm install -g typescript sudo mpm install -g yarn  Install PHP  Add new repo  sudo apt-get install -y python-software-properties sudo add-apt-repository -y ppa:ondrej/php sudo apt-get update -y apt-cache pkgnames | grep php7.2   Option 1: Install LAMP stack  sudo apt-get install -y apache2 sudo apt-get install -y php7.2 libapache2-mod-php7.2 php7.2-cli php7.2-common \\ php7.2-mbstring php7.2-gd php7.2-intl php7.2-xml php7.2-mysql php7.1-mcrypt php7.2-zip   Option 2: Install LEMP stack  sudo apt-get install -y nginx sudo apt-get install -y php7.2 php7.2-fpm php7.2-cli php7.2-common php7.2-mbstring \\ php7.2-gd php7.2-intl php7.2-xml php7.2-mysql php7.1-mcrypt php7.2-zip   Disable Apache and Nginx if you install both  sudo systemctl disable apache2.service sudo systemctl disable nginx.service  Install Python2, Python3  Ubuntu has python2 installed by default  sudo apt-get python-pip sudo apt-get install python3-pip sudo apt-get install python3-dev python-dev ## Install virtualenv sudo pip install virtualenv sudo pip3 install virtualenv   Install new python 3.6  sudo add-apt-repository ppa:deadsnakes/ppa sudo apt-get update sudo apt-get install python3.6  Install Go  Install Go  wget https://dl.google.com/go/go1.10.1.linux-amd64.tar.gz ## check hash shasum -a 256 go*linux-amd64.tar.gz ## install tar ball sudo tar -xvzf go*linux-amd64.tar.gz sudo mv go /usr/local   Setup GOROOT \u0026amp; GOPATH  export GOROOT=\u0026quot;/usr/local/go\u0026quot; export GOPATH=\u0026quot;$HOME/ws/go\u0026quot; export PATH=\u0026quot;$GOROOT/bin:$GOPATH/bin:$PATH\u0026quot;   Create a simple hello.go file to test  touch ~/ws/go/src/hello/hello.go\npackage main import ( \u0026quot;fmt\u0026quot; \u0026quot;log\u0026quot; \u0026quot;os/user\u0026quot; ) func main(){ user, err := user.Current() if err != nil { log.Fatal(err) } fmt.Printf(user.Name + \u0026quot; said : Hello World! \\n\u0026quot; ) }   Run the program  go run $GOPATH/src/hello/hello.go go install hello $GOPATH/bin/hello   Install hugo  wget https://github.com/gohugoio/hugo/releases/download/v0.38.2/hugo_0.38.2_Linux-64bit.deb sudo dpkg -i hugo*Linux-64bit.deb  Install clang \u0026amp; cmake sudo apt-get install clang sudo apt-get install cmake  Install Rust $ curl -f -L https://static.rust-lang.org/rustup.sh -O $ sh rustup.sh  Install vim 8  Add ppa repo  sudo add-apt-repository ppa:jonathonf/vim sudo apt update sudo apt install vim   Install awesome vimrc  git clone --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime sh ~/.vim_runtime/install_awesome_vimrc.sh  Install MySql  Install mysql  wget https://dev.mysql.com/get/mysql-apt-config_0.8.9-1_all.deb sudo dpkg -i mysql-apt-config_0.8.9-1_all.deb sudo apt-get install mysql-server systemctl status mysql mysqladmin -u root -p version mysql -u root -p mysql   create a sample table products  CREATE TABLE products ( id INT AUTO_INCREMENT NOT NULL, title VARCHAR(255), price DECIMAL(10, 2) NOT NULL, created_at datetime, deleted_at datetime, tags VARCHAR(255) ,PRIMARY KEY (id) ); load data local infile '/home/\u0026lt;your_name\u0026gt;/db/products.csv' into table products \\ fields terminated by ',' enclosed by '\u0026quot;' lines terminated by '\\n' \\ (id, title, price, created_at, deleted_at, tags);  Install PostgresQL  psql is case sensitive  echo 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main' \u0026gt;\u0026gt; /etc/apt/sources.list.d/pgdg.list wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - sudo apt-get update sudo apt-get install postgresql-10 sudo su - postgres psql -U postgres ## Create a dump databbase curl -L -O http://cl.ly/173L141n3402/download/example.dump createdb pgguide pg_restore --no-owner --dbname pgguide example.dump psql --dbname pgguide psql ## Rename database -- use double quote ALTER database \u0026quot;pgguide\u0026quot; rename to \u0026quot;sample\u0026quot;   export the database to sql file  sudo su postgres pg_dump sample \u0026gt;\u0026gt; sample.sql   export table to csv file  COPY products to '/home/\u0026lt;your_name\u0026gt;/db/products.csv' delimiter ',' csv;   export data to json file  select json_agg(t) from (select * from products) t \\t on \\pset format unaligned \\g products.json  Install mongodb sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 \\ --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5 echo \u0026quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse\u0026quot; \\ | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list sudo apt-get update sudo apt-get install -y mongodb-org sudo service mongod start sudo service mongod stop sudo service mongod status   Create a database sample and insert one record into document products  use sample db.products.insertOne({id: 1, title: \u0026quot;Dictionary\u0026quot;, price: 9.99, created_at: \u0026quot;2011-01-02 07:00:00+11\u0026quot;, tags: \u0026quot;{Book}\u0026quot;}); db.products.find();   Import json into database  mongoimport --db sample --collection products --drop --jsonArray --file ~/db/products.json  "
},
{
	"uri": "/os/grub-trouble-shooting/",
	"title": "Grub Trouble Shooting",
	"tags": ["linux"],
	"description": "",
	"content": " Update Grub Menu for dual OS boot Change BIOS * Start your PC by pressing a pressing a special function key (usually F12, F10 or F2 depending on the vendor specifications). * Some PC\u0026rsquo;s BIOS has BOOT tab option, open the BOOT tab, you will find the OS Boot Manager. It is the simplest way to fix the issue. If your PC\u0026rsquo;s BIOS has no such setting feature, you need to check the next section.\nChange the Windows Boot Manager * Login windows with common prompt * Restart windows, meanwhile press shift key * In the options page, choose change to other options * Troubleshooting * Command Prompt * Login in Windows with Common prompt * Use BCDEdit to change windows boot manager. Change to boot ubuntu at first\nREM backup bcdedit /enum \u0026gt; X:\\Users\\public\\documents\\bcdedit.txt REM change the bootmgr bcdedit /set {bootmgr} path \\EFI\\ubuntu\\grubx64.efi   After you reboot system, you will see the Grub 2 menu as follow.  GNU GRUB version 2.0 ---------------------------------------------------------------------------------- | Ubuntu | Advanced options for Unbuntu | Windows Boot Manager ( on /dev/sda2 ) | Fedora 20 | Advanced options for Fedora 20 | OpenSuse | Advanced options for OpenSuse | ....  Boot from Grub command promp  Use  to navigate to grub command promp from Grub menu\n List all available dirves by typing ls. After that, you willl see a couple drives. If you have multiple hard drive, USB or SD Card pluged in.\n  (hd0) (hd0,gpt4) (hd0, gpt3) (hd0,gpt2) (hd0, gpt1) (hd1) (hd1,msdos2)(hd1, msdos2)(hd2) ## Get more detail of drives ls -l   From the above detail information, you might find the hard drive of your PC. Continue to use ls to locate the actual boot file to confirm the drive contains the boot file.  ## Assume the (hd0,gpt2) contains the linux kernal boot file. ls -a (hd0,gpt2)/   Set root drive  set root=(hd0,gpt2) linux (hd0,gpt2)/boot/vmlinuz-linux-4.4.x-xxx-generic initrd (hd0,gpt2)/boot/initrd.img-linux-4.4.x-xxx-generic normal  "
},
{
	"uri": "/projects/python-flat-api/",
	"title": "FlatApi - Restful API for python dev",
	"tags": ["python"],
	"description": "FlatApi is a zero coding and zero configuration restful API server inspired by Json-Server and Eve",
	"content": " Summary FlatApi is a zero coding and zero configuration restful API server inspired by Json-Server_ and Eve_. It is designed to be used as fake restful api for development, especially for people want to use Python stack. Setup process is less than 10 seconds.\nFlatApi  Zero coding and configuration to setup Restful API FlatApi is designed to use without coding and configuration by default. You just need one config to setup all endpoints you need, then you can use it immediately.\n Flask based web server FlatApi is built on the top of _Flask\n Json flat file database FlatApi uses FlatApi_ to manage the Json flat file database. FlatApi is a document oriented database.\n Caching memory storage availble FlatApi supports caching momery storage after version 4.0.0.\n  Install Package $ pip uninstall flatapi $ pip install --no-cache-dir flatapi  Quick Start  Launch FlatApi without configuration  ## Start the FlatApi - Sample 1 $ python3 /\u0026lt;path_to_package\u0026gt;/flatapi -S MEMORY -G NO ## Start the FlatApi - Sample 2 $ python3 /\u0026lt;path_to_package\u0026gt;/flatapi --storage MEMORY -cfgfile NO ## Start the FlatApi with prefix - Sample 3 $ python3 /\u0026lt;path_to_package\u0026gt;/flatapi --storage memory -cfgfile no -X api \\(^_^)/ Hi Loading is done. There is no config file found. Flat Api uses internal configuration. Resource : /\u0026lt;string:doc\u0026gt; -- The doc is the collection name you want to post or put the object. /\u0026lt;string:doc\u0026gt;/\u0026lt;int:id\u0026gt; --The id is the unique id for query or delete. Database: Memory * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)   Test api via postman\nIt would be a much more handy and easy way to play around with the API immediately.\n  GET /posts --\u0026gt; Get all posts POST /posts --\u0026gt; Add new post PUT /posts/1 --\u0026gt; Update existing post which id is 1 DELETE /posts/1 --\u0026gt; Delete a post which id is 1 DELETE /posts --\u0026gt; Delete all posts   Test api via curl  ## Add a new post $ curl -d \u0026quot;{\\\u0026quot;text\\\u0026quot;:\\\u0026quot;post 1\\\u0026quot;,\\\u0026quot;author\\\u0026quot;:\\\u0026quot;harry\\\u0026quot;}\u0026quot; -H \u0026quot;Content-Type: application/json\u0026quot; -X POST http://localhost:5000/posts {\u0026quot;author\u0026quot;: \u0026quot;harry\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;post 1\u0026quot;, \u0026quot;id\u0026quot;: 1} ## Get post by Id $ curl -X GET http://localhost:5000/posts/1 {\u0026quot;author\u0026quot;: \u0026quot;harry\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;post 1\u0026quot;, \u0026quot;id\u0026quot;: 1} ## Get all posts $ curl -X GET http://localhost:5000/posts [{\u0026quot;author\u0026quot;: \u0026quot;harry\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;post 1\u0026quot;, \u0026quot;id\u0026quot;: 1}] ## Update the post $ curl -d \u0026quot;{\\\u0026quot;text\\\u0026quot;:\\\u0026quot;post updated\\\u0026quot;,\\\u0026quot;author\\\u0026quot;:\\\u0026quot;harry\\\u0026quot;}\u0026quot; -H \u0026quot;Content-Type: application/json\u0026quot; -X PUT http://localhost:5000/posts/1 [{\u0026quot;author\u0026quot;: \u0026quot;harry\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;post updated\u0026quot;, \u0026quot;id\u0026quot;: 1}] ## Delete $ curl -X DELETE http://localhost:5000/posts  Browse Repository "
},
{
	"uri": "/blogs/vue-ng-react/",
	"title": "Angular vs React vs Vue",
	"tags": [],
	"description": "Angular, React, Vue as most popular JavaScript frameworks at present, we just discuss Angular 1.x, Angular 2 / 4, React 15+ (Redux), and Vue 2+ here ...",
	"content": "  Angular, React, Vue as most popular JavaScript frameworks at present, we just discuss Angular 1.x, Angular 2 / 4, React 15+ (Redux), and Vue 2+ here. There is no Angular 3, if you have not noticed before.\n Client side is a battle field In past 6–8 years, the Restful API has been accepted as one of standard web interfaces for most web applications, solution architect can simply add REST API on the top of existing web layer or business layer to provide REST API and support multiple client devices. So the developers can continue to develop or maintain system with their favorite programming language, framework or technical stacks.\nOn the contrary, it is a completely different story on the client-side, there are tons of variant JavaScript frameworks emerged in the last 10 years. It is good to have more options, but it is a nightmare for web developers who are working in such battle field, because they need to try a lot of different stuff to make a decision, especially when the project schedule is tight, it makes tech lead or architect quite stressed. Something becomes much worse is when the development team try to adopt new framework for the new project, it is not easy to work out which framework we should choose.\nDon’t forget there is another big risk to adopt new programming language(ES 6 or Typescript) with the new framework, as well as new development, build and test tool, if the team has no enough skills or experience. As solution architect, you need to think it through for development team, and also consider if the team can really pick it up quickly. That is why we have to compare those frameworks here before we make a decision.\nCommon pitfalls to avaoid Performance is not a priority We can find lots of comparison between those frameworks, and so many of them are related to performance, programming language, design pattern, etc. Actually many web applications in the world are just small to median size web application, we don’t need to build the web application as Google, Facebook or Twitter. In my opinion, the performance of framework is the not critical benchmark, at lease it is not first priority which we need to consider if it is right for the team. Except performance, we have more concern on tech stacks, community and ecosystem involved with the framework, which have more impact on team’s productivity and system’s maintainability.\nCool stuff is not always the best We have seen so many cool stuff which are finally abandoned in the past, the Silverlight is one of such examples. We shouldn’t choose new framework because it looks cool or it is the latest one. We choose the new one because it really can solve our problem, improve our productivity and quality in the long run. Don’t forget there is always some cost to adopt new things. We need to balance the cost and outcome of the technical investment, and we need to work it out if it is right time to do it.\nProgramming language is still the barrier If we need to use new programming language, we have to evaluate with the existing development team. Even ES6 or TypeScript (TS) claims it is compatible to Vanilla JS, but when you start to look into new framework or sample project, which are coded with ES6 or TS, it still makes you so confused if you are not familiar with such syntax. It will significantly impact the efficiency of learning new framework. So there is always a learning curve, which we cannot ignore, to code something in a new programming language.\nSomeone complaints all those JS frameworks makes the build process much more complicated than the old web frameworks, because of the new programming language. Does it really matter? The short answer is Yes, but we are not going discuss the advantage in details here. If your team comes from .Net Web Form or Java MVC background, it would be a steep curve for the team to pick up ES6 or TypeScript and Component-based framework, not to mentioned new build and test tools.\nNo wonder a few .Net teams were struggling with Node stack integration on Visual Studio, especially when the team members have no Node.js experience. So we need the whole team to discuss the difficulties before we adopt new technology and framework. It is helpful to make sure the team has the same view, and it is also important to plan our training and decide how to transform development team step by step.\nThe difference of those framework  Let\u0026rsquo;s look into the frameworks and list the difference of these frameworks.\n  Basic tech stacks     Tech Stacks Angular 1.x Angular 2 / 4 React 1.5 (Redux) Vue 2     Vanilla JS Yes Supported Supported Supported   ES 6 1.5+ Supported Yes Yes   TypeScript  Yes  Supported   MVC 1.2-1.4      Component-Based 1.5+ Yes Yes Yes   Shadow DOM  Yes     Virtual DOM   Yes Yes   Immutable state   Yes Yes     Yes: Programming language which the framework uses. Supported: Programming language which the framework supports.  Where to start For the team which comes with Web Form, with Vanilla JS background, we can start with Angular 1.x (Up to 1.4) on some small projects, or we can build something training project, because the MVC pattern is very similar to their previous coding experience.\nOne more thing, I have to mention is the Angular 1.x application can be built without any Node.js tools, such as Gulp, Grunt, Webpack, etc. It makes the team feel comfortable to adopt it without prior experiences. Also, it gives the team some buffer to organize the training to pick up Node.js tools for the future.\nFor the team which has experience of Angular 1.2 ~ 1.4, they can choose to stay on later version of Angular 1.x, e.g. Angular 1.5+, and they can start to convert coding pattern from MVC to Component-based. After that, if the team is planning to move to Angular 2 / 4, it is better to do some TypeScript training. In my view, so far the ecosystem for Angular 2 / 4 is still under development. It is a bit risky to use Angular 2 / 4 to build the real-world production. There are quite many gotchas which you have to figure out on your own.\nFor the team which has TypeScript or ES6 experience, they can choose what they prefer. They can spend more time on UI integration. There are a few customized UI package for bespoke framework. That is what we are going to discuss in the next.\nResponsive UI library support  To build a real-world application, we need to integrate some popular responsive UI libraries instead of building all styles on our own. Let’s take a look the support of Bootstrap or Material-Design for different frameworks.\n    UI library Angular 1.x Angular 2 / 4 React 1.5 (Redux) Vue 2     Bootstrap 3 ui-bootstrap (Very Good)  react-bootstrap(Very Good) VueStrap* (Very Good)   Bootstrap 4  ui-bootstrap (Alpha) In progress BootstrapVue (Good)   Material Design Materialize (Good) Angular Material(Basic) Material-UI (Good) Vuetify (Very Good)     VueStrap: Please use the Willen\u0026rsquo;s fork for Vue 2. Libraries in the table above has been tested or used in some projects.  From what we can see now, the Bootstrap 4 is similar to Material-Desgin. So it is good news for developer. They just need to pick their favor, and they will always get analogical effect.\nActually there are tons of UI libraries / CSS framework available on Github, so many are platform neutral framework, i.e. It can be integreated with Angular, React or Vue. Be honest, integration is always not easy, it will take you or your team some extra effort. Keep it in mind, to integrate platform neutral framework you need to take care of dependencies and build, test tools on your own, such as webpack or yarn.\nStable API Against to Angular 1.x, the Angular 2 is completely a new animal. Angular 4 comes with some breaking changes, which breaks a few Angular 2 dependencies (third parties). Since the API of Angular 4 is still under active development, we cannot use it for production. According to Angular team’s announcement, they want to fix all Angular-2’s bugs and issues in Angular 4 and keep all built-in libraries sync to Angular 4. It will take a long while to get things ready. If your project uses Angular 1.2–1.4, I’d like to suggest you to keep it, until Angular 4 is finalized.\nReact-Redux is much more popular than React-Flux recently, but it doesn’t means it is better than React-Flux pattern. In my opinion, React-Flux is much more straight and close to original React design. If you ready use React-Flux, you have better to stick with it.\nVue 2 comes with some breaking changes. There is migration guide for Vue 1.x to Vue 2. It doesn’t seem very different. Vue 2 is ready for production.\nHow to compare In order to compare those frameworks properly, I use those frameworks to create a small real-world web application, which has built-in authentication support for the back-end API service, and integrated with some responsive UI framework, e.g. Bootstrap or Material-Design.\nYou will find there is no project built on the Angular 1.x, because my team and me have done a lot real-world application upon Angular 1.x. We know Angular 1.x, inlcuding its ecosystem is quite reliable, which you replicate any web application with this framework.\nOn the other hand, Angular 1.x is built with Vanilla JS, i.e. you don’t need transpiler to build Angular 1.x app, so it is a bit unfair to compare with the framework which is coded with ES 6 or TypeScript, because the build tool and setup for Angular 1.x is easier than others. I mention the Angular 1.x here to remind them, actually there is other option for the team comes from traditional MVC stacks. It would be proper way to transform the team smoothly.\nFollowing are the projects and related screenshots Angular 4 CRM\nReact CRM\nVue 2 CRM\nComparison of different framework Let’s go back to projects above and take a look. Basically they are implemented almost the same features as real-world simple CRM application.\nFeatures  Authentication \u0026amp; Token support for Restful API Customer CRUD functions Order CRUD functions Dashboard including two charts (Bar/Line/Doughnut) Integrate with Material Design (Angular project includes bootstrap)  Size of source code     Angular 4 CRM React Redux CRM Vue 2 CRM     Dependencies 22 13 9   Code Size 135KB 113KB 49KB   Working Hours 72 hrs 80 hrs 48hrs     Dependencies: Any dependencies for test, distribute are excluded Code Size: It includes some customized CSS file, but image files are excluded Working Hours: The effort for learning curve has been eliminated, but R\u0026amp;D effort cannot be excluded.  Working hours is a reflection of productivity Firstly, I have to explain why React project took more effort than the other two projects. Comparing with React, the Angular 4 and Vue 2 are a bit new, i.e. there are more available packages or libraries for React on-line. As I mentioned before, it is not a good news. We need to try more different to figure out the pros and cons of different solutions. Unfortunately, we cannot exclude such R\u0026amp;D effort when we build these projects.\nAccording to above the dependencies, code size, we can see the project based on Vue.js is much simpler than other two projects.In my view, Vue 2 is my favor for next new project. It combines advantages of Angular and React. It also addresses some problems which we found in Angular and React.\nVue.js uses Virtual DOM, which avoids many dirty checking in Angular 1.x, and the complicated coding pattern (Observable \u0026amp; ReactiveJs, IMO) in Angular 2 / 4.\nVue.js makes the handling of immutable and mutable variables much easier than React. Its template is very handy and straight. It is the same as regular HTML, it is very easy to convert the mock-up HTML into Vue template, especially when you need to customize you styles. Vue’s template and directive is similar to Angular.\nVue.js is not just cool, it is elegant and simple. I am pretty sure if you have Angular or React background, you will pick it up in a couple hours or days. Once you start to use it, you won’t want to go back. Its official routing system is quite stable and easy to use. Compare with Angular-Router or React-Router, it is much more reliable.\nGenerally, Material-Design libraries for React is not handy as other customized version for Angular or Vue. The special coding style of JSX needs to convert all CSS and HTML into JSX format. To be honest, I am not so convinced by React’s JSX, because it is not straight as final HTML or CSS. Compare to other framework, it is a bit verbose and inconvenient. We cannot simply copy the style code from the browser’s dev tool when we debug it on the browser. i.e. You need to put more effort to make your page pretty.\nAngular’s Material-Design library has very limit components. To build a real-world application you need to add another UI library to supplement the former missing components. Last but not least, the Vuetify is the best Material-Design so far we have found and tested.\nAngular 4 CRM — https://github.com/harryho/ng4crm\nReact Redux CRM — https://github.com/harryho/react-crm\nVue 2 CRM — https://github.com/harryho/vue2crm\nSummary Before we make any conclusion, we have to be aware the world keeps changing. Perhaps when I was writing this article, some problem of framework have been solved, or some small problem became worse and worse. We have to review the decision we made from time to time and correct them ASAP if we find the cost is overweight the outcome.\n Team with Web Form and Vanilla Js background should starts with Angular 1.4 and take some time to be familiar with Node.js tools\n Team with Vanilla Js background should start to learn ES 6 or TypeScript, since sooner or later all the browsers, including mobile devices, will support ES 6 or TypeScript.\n Teamwith ES6 /TypeScript background can choose any framework you prefer, the integration with other UI library will take you some time to make a judgement.\n Teamwith React-Flux can continue or switch to React-Redux. It maybe reduces some boiler code, but I don’t think it is a big deal.\n For the newcomer of React, I will recommand React-Redux, because it has better community support.\n In my opinion, if you continue to invest anything on Angular 2, it is a bit waste, because Angular team hopes you to move to Angular 4 as soon as possible once Angular 4 is ready for production, and they are planning to fix Angular 2’s issues in Angular 4.\n Angular 4 and its ecosystem are under active development, but please be careful if you want to use them in your production.\n Vue.js framework is a very nice one. Give a go on your next project.\n  Update Angular Material Design App — https://github.com/harryho/ng-md-app\nReact Redux CRM — https://github.com/harryho/react-crm\nVue 2 CRM — https://github.com/harryho/vue2crm\nAngular 4 CRM — https://github.com/harryho/ng4crm (It is no longer maintained to support latest Angular)\n"
},
{
	"uri": "/os/ubuntu-server-16/",
	"title": "Ubuntu 16 server note",
	"tags": ["linux", "ubuntu"],
	"description": "",
	"content": " Prelude\n This article is mainly to help experienced user install and setup Ubuntu 16 LTS Server. If you are looking for the information for Ubuntu 14, please go to the page Ubuntu 14 server setup\n Prerequisites  You are familiar with Ubuntu, at least you have some experience working on Linux system. You are familiar with basic bash/shell command  Wireless Setup  If you install ubuntu server on a laptop, you might end up to setup the wifi first. Usually you won\u0026rsquo;t bring the cable with your laptop wherever you go, also you might just have no cable or run out all cables. Now let\u0026rsquo;s dive into how to setup the wifi on sever.\n  Find out network control installed on your laptop. The column link lists the name of interfaces. The interface name on your laptop will be possible slightly a bit different. It depends on laptop maker. Basically the interface with the type wlan is your wifi interface.  networkctl   You will see network interfaces on your laptop. enp1s0 is the ethernet interface., and wlp3s0 is your wifi interface\nIDX LINK TYPE OPERATIONAL SETUP 1 lo loopback n/a unmanaged 2 enp1s0 ether n/a unmanaged 3 wlp3s0 wlan n/a unmanaged  Disable IP V6 if you don\u0026rsquo;t use it. (Highly recommanded for personal laptop user)\n Add following setting to file /etc/sysctl.conf  net.ipv6.conf.all.disable_ipv6 = 1 net.ipv6.conf.default.disable_ipv6 = 1 net.ipv6.conf.lo.disable_ipv6 = 1   Reconfigure by running the following command  sudo sysctl -p ## Check the ipv6 status. If you see 1 after running command below, it means ipv6 ## has been disabled cat /proc/sys/net/ipv6/conf/all/disable_ipv6  Find out the status wpa_supplicant\nsudo systemctl status wpa_supplicant ## If you find \u0026quot;disabled\u0026quot; in the output, you can simply enable it as below sudo systemctl enable wpa_supplicant  Find out your wifi ESSID\nsudo iwlist wlp3s0 scan | grep ESSID ## If you get error message like \u0026quot;network is down\u0026quot;, use ifconfig to bring it up and ## re-run previous commmand sudo ifconfig wlp3s0 up  Setup the wpa passphrase for your wifi\n  ## Use following command to add pass phrase to your wpa_supplicant ## ## wpa_passphrase \u0026lt;your-ESSID\u0026gt; \u0026lt;your-passphrase\u0026gt; | sudo tee /etc/wpa_supplicant.conf ## If your ESSID is mywifi and password of wifi is mypasswork, then you will end up the ## command below wpa_passphrase mywifi mypasswork | sudo tee /etc/wpa_supplicant.conf   Config your wpa supplicant for your wifi interface and run the comand as background process  sudo wpa_supplicant -c /etc/wpa_supplicant.conf -i wlp3s0 \u0026gt; /dev/null 2\u0026gt;1\u0026amp; \u0026amp;   Add SSID scan into config /etc/wpa_supplicant.conf\nnetwork={ ssid=\u0026quot;mywifi\u0026quot; #psk=\u0026quot;mypassword\u0026quot; psk=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx scan_ssid=1 }  Get IP address from external DHCP\n  sudo dhclient wlp3s0 ## Check the ip address ifconfig wlp3s0  Wifi Trouble Shooting  There is no ip address assigned to your wifi interface\n Check out the wpa_supplicant status sudo systemctl status wpa_supplicant\n If you find some error like \u0026lsquo;Failed to construct signal\u0026rsquo;, it means some network service has been disabled\n  sudo systemctl list-unit-files --state disabled | grep network\n Enable systemd-networkd.service, networking.service if they are disabled  The error message comes after the dhclient\n Enable the squid.service  Auto connect to wifi on Starup\n  sudo cp /lib/systemd/system/wpa_supplicant.service /etc/systemd/system/wpa_supplicant.service sudo vi /etc/systemd/system/wpa_supplicant.service   Replace the following line ExecStart=/sbin/wpa_supplicant -u -s -O /run/wpa_supplicant with ExecStart=/sbin/wpa_supplicant -u -s -c /etc/wpa_supplicant.conf -i wlp3s0\n Add wifi interface into auto startup file /etc/network/interfaces\n  auto lo iface lo net loopback auto wlp3s0 iface wlp3s0 net dchp  UFW setup sudo ufw enable sudo ufw allow 80/tcp sudo ufw allow ssh sudo ufw allow 443/tcp sudo ufw allow 8000/tcp  SSH server setup !!! For production environment, SSH should be secured by the CA\nsudo apt-get install openssh-server ## backup default config sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.factory-defaults sudo chmod a-w /etc/ssh/sshd_config.factory-defaults ## use any editor to update sshd_config sudo nano /etc/ssh/sshd_config ## uncomment PasswordAuthentication yes to allow remote password login ## Password authentication is only for test environment ## setup ssh auto-start onboot sudo update-rc.d ssh defaults  !!! Install the software-properties-common Package sudo apt-get install software-properties-common python-software-properties  Time Zone setup sudo dpkg-reconfigure tzdata  Install tmux sudo apt-get install tmux   Most useful tmux commands   Ctrl+b \u0026ldquo; — split pane horizontally.\nCtrl+b % — split pane vertically.\nCtrl+b arrow key — switch pane.\nHold Ctrl+b, don’t release it and hold one of the arrow keys — resize pane.\nCtrl+b c — \u0026copy;reate a new window.\nCtrl+b , — rename reate a new window.\nCtrl+b n — move to the (n)ext window.\nCtrl+b p — move to the (p)revious window.\n Install git sudo add-apt-repository ppa:git-core/ppa sudo apt-get update sudo apt-get install git  install docker CE (Ubuntu 16 LTS) ## Update the apt package index sudo apt-get update ## Install packages to allow apt to use a repository over HTTPS sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common ## Add Docker’s official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - ## Verify the last 8 characters of the fingerprint. sudo apt-key fingerprint xxxxxxxx ## set up the stable repository sudo add-apt-repository \\ \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\u0026quot; ## apt update sudo apt-get update ## install docker CE sudo apt-get install docker-ce  Install JDK 8  Downlaod the JDK from Oracle website.  sudo add-apt-repository ppa:webupd8team/java sudo apt-get update sudo apt-get install oracle-java8-installer java -version   Setup environment  sudo apt-get install oracle-java8-set-default sudo su cat \u0026gt;\u0026gt; /etc/environment \u0026lt;\u0026lt;EOL JAVA_HOME=/usr/lib/jvm/java-8-oracle JRE_HOME=/usr/lib/jvm/java-8-oracle/jre EOL   Test JDK with a simple HelloWorld program  import java.util.Calendar; class HelloWorld { public static void main(String[] args) { Calendar cal = Calendar.getInstance(); int year = cal.get(Calendar.YEAR); int month = cal.get(Calendar.MONTH) + 1; int day = cal.get(Calendar.DATE); int hour = cal.get(Calendar.HOUR_OF_DAY); int minute = cal.get(Calendar.MINUTE); String username = System.getProperty(\u0026quot;user.name\u0026quot;); System.out.println(username+ \u0026quot;: Hello World! \u0026quot;); System.out.println(year + \u0026quot;/\u0026quot; + month + \u0026quot;/\u0026quot; + day + \u0026quot; \u0026quot; + hour + \u0026quot;:\u0026quot; + minute); } }   Compile and run the program  javac HelloWorld.java java HelloWorld.java  Install nodejs  Install Nodejs 8.x  curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash - sudo apt-get install -y nodejs   Install latest npm, yarn and ts  sudo npm install -g npm sudo npm install -g typescript sudo mpm install -g yarn  Install PHP  Add new repo  sudo apt-get install -y python-software-properties sudo add-apt-repository -y ppa:ondrej/php sudo apt-get update -y apt-cache pkgnames | grep php7.2   Option 1: Install LAMP stack  sudo apt-get install -y apache2 sudo apt-get install -y php7.2 libapache2-mod-php7.2 php7.2-cli php7.2-common \\ php7.2-mbstring php7.2-gd php7.2-intl php7.2-xml php7.2-mysql php7.1-mcrypt php7.2-zip   Option 2: Install LEMP stack  sudo apt-get install -y nginx sudo apt-get install -y php7.2 php7.2-fpm php7.2-cli php7.2-common php7.2-mbstring \\ php7.2-gd php7.2-intl php7.2-xml php7.2-mysql php7.1-mcrypt php7.2-zip   Disable Apache and Nginx if you install both  sudo systemctl disable apache2.service sudo systemctl disable nginx.service  Install Python2, Python3  Ubuntu has python2 installed by default  sudo apt-get python-pip sudo apt-get install python3-pip sudo apt-get install python3-dev python-dev ## Install virtualenv sudo pip install virtualenv sudo pip3 install virtualenv  Install Go  Install Go  wget https://storage.googleapis.com/golang/go1.4.linux-amd64.tar.gz ## check hash shasum -a 256 go*linux-amd64.tar.gz ## install tar ball sudo tar -C /usr/local -xvzf go1.9.2.linux-amd64.tar.gz   Setup GOROOT by overwriting the file /etc/environment with following content  PATH=\u0026quot;/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\u0026quot; JAVA_HOME=\u0026quot;/usr/lib/jvm/java-8-oracle\u0026quot; JRE_HOME=\u0026quot;/usr/lib/jvm/java-8-oracle/jre\u0026quot; GOROOT=\u0026quot;/usr/local/go\u0026quot;   Setup GOPATH by adding following lines to the end of .profile  export GOPATH=\u0026quot;$HOME/ws/go\u0026quot; export GOBIN=\u0026quot;$GOPATH/bin\u0026quot; export PATH=\u0026quot;$GOPATH/bin:$PATH\u0026quot;   Create a simple hello.go file to test  package main import ( \u0026quot;fmt\u0026quot; \u0026quot;log\u0026quot; \u0026quot;os/user\u0026quot; ) func main(){ user, err := user.Current() if err != nil { log.Fatal(err) } fmt.Printf(user.Name + \u0026quot; said : Hello World! \\n\u0026quot; ) }   Run the program  go run $GOPATH/src/hello.go go install $GOPATH/src/hello.go $GOBIN/hello  Install clang \u0026amp; cmake sudo apt-get install clang sudo apt-get install cmake  Install Rust $ curl -f -L https://static.rust-lang.org/rustup.sh -O $ sh rustup.sh  "
},
{
	"uri": "/blogs/create-a-blog-on-github-pages/",
	"title": "Create a blog site on GitHub Pages",
	"tags": ["hugo"],
	"description": "After I setup a blog site with Hugo on my ubuntu machine, I decided to use it to create a blog to GitHub pages on my windows machine ...",
	"content": " After I setup a blog site with Hugo on my ubuntu machine, I decided to use it to create a blog to GitHub pages on my windows machine, since I use Windows machine as workstation. If you use Unix-style system, I pretty sure you can follow the Hugo Quick Start and Hosting on GitHub Pages to create a blog to GitHub pages within 5 mins, but when I try to do the same on Windows machine, it took me over 30 mins. I hope this blog can help someone want to do sth similar within Windows environment.\nAssumptions  You already have Hugo on your computer. If not, please follow the instruction to install hugo on Windows. You will have two repositories blog-hugo and \u0026lt;username\u0026gt;.github.io repositories to hold your hugo content and blog site respectively. The blog-hugo repository will host actual Hugo’s blog content. \u0026lt;username\u0026gt;.github.io repository repository will host the static website. Your Hugo blog folder will be \u0026ldquo;C:\\git\\blog-hugo\u0026rdquo; in this example. Your blog site will finally sit in C driver and map to repositories as follow\nC:\\\u0026gt; |--git |--blog-hugo (https://github.com/\u0026lt;yourname\u0026gt;/blog-hugo.git |--archetypes |--content |--data |--layouts |--public (https://github.com/\u0026lt;yourname\u0026gt;/\u0026lt;yourname\u0026gt;.github.io.git) |--themes |--   Create a blog site on GitHub pages  Create on GitHub blog-hugo and .github.io repositories repository via GitHub website Clone blog-hugo via Windows command prompt\nc:\\\u0026gt; c:\\\u0026gt;cd git c:\\git\u0026gt;git clone \u0026lt;\u0026lt;your-project\u0026gt;-hugo-url\u0026gt; \u0026amp;\u0026amp; cd \u0026lt;your-project\u0026gt;-hugo  Create hugo site and setup the theme you like\nC:\\git\u0026gt;hugo new site blog-hugo C:\\git\u0026gt;hugo server -t \u0026lt;yourtheme\u0026gt; -D  Clean up the public folder\n Set submodule inside the blog-hugo and map to folder public\nC:\\\u0026gt;cd git C:\\git\u0026gt;rm -rf public C:\\git\u0026gt;git submodule add -b master https://github.com/\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git public  Deploy the blog site to GitHub page with the script deploy.bat.\n deploy.bat \u0026quot;Your optional commit message\u0026quot; will commit the changes to \u0026lt;username\u0026gt;.github.io. You can use and tailor the script below as your deploy.bat\n@echo OFF echo Deploying updates to GitHub... REM Build the project. hugo -t \u0026lt;yourtheme\u0026gt; -D REM Go To Public folder cd public REM Add changes to git. git add -A REM Commit changes. set msg=\u0026quot;rebuilding site %date%\u0026quot; if NOT \u0026quot;%1\u0026quot;==\u0026quot;\u0026quot; set msg=%1 git commit -m '%msg%' REM Push source and build repos. git push origin master REM Come Back cd ..  You might want to commit the changes to blog-hugo repository. Please don\u0026rsquo;t forget to add public into the .gitignore.\n  "
},
{
	"uri": "/os/centos-server-7/",
	"title": "CentOS 7 Server note",
	"tags": ["linux", "centos"],
	"description": "",
	"content": " Prelude\n This article is mainly to help experienced user install and setup CentOS 7 Server.\n Prerequisites  You are familiar with CentOS, at least you have some experience working on Linux system. You are familiar with basic bash/shell command  Things to do after installing CentOS server  How to setup your server  Firewall setup sudo firewall-cmd --permanent --add-port=22/tcp sudo firewall-cmd --permanent --add-port=21/tcp sudo firewall-cmd --permanent --add-port=80/tcp sudo firewall-cmd --permanent --add-port=443/tcp sudo firewall-cmd --permanent --add-port=8080/tcp sudo firewall-cmd --reload  SSH server setup !!! For production environment, SSH should be secured by the CA\n Install SSH if it is not done yet  ## yum install openssh openssh-server openssh-clients openssl-libs   Configure SSH  ## backup default config sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.ori sudo chmod a-w /etc/ssh/sshd_config.ori ## use any editor to update sshd_config sudo vi /etc/ssh/sshd_config ## uncomment PasswordAuthentication yes to allow remote password login ## Password authentication is only for test environment ## setup ssh auto-start onboot sudo systemctl restart sshd  Update Time Zone if it is incorrect ls -l /etc/localtime ## check the time zone sudo timedatectl list | grep New_York ## find the time zone by the city sudo timedatectl set-timezone America/New_York  Install Git  Option 1: You can use yum to install git, but it is quite out-of-date. The version of git is 1.8.x  sudo yum install git git --version   Option 2: Download the latest stable release of Git and compile the software from source. (Recommended)  Install build tools sudo yum groupinstall \u0026quot;Development Tools\u0026quot; sudo yum install gettext-devel openssl-devel perl-CPAN perl-devel \\ zlib-devel libcurl-devel expat-devel sudo yum install yum-utils  Download the latest release wget https://github.com/git/git/archive/v2.x.x.tar.gz -O git.tar.gz tar -zxf git.tar.gz cd git-* make configure ./configure --prefix=/usr/local sudo make install git --version  Setup a better Vim sudo yum isntall vim-enhanced  Install Tmux sudo yum install tmux   Most useful tmux commands   Ctrl+b \u0026ldquo; — split pane horizontally.\nCtrl+b % — split pane vertically.\nCtrl+b arrow key — switch pane.\nHold Ctrl+b, don’t release it and hold one of the arrow keys — resize pane.\nCtrl+b c — \u0026copy;reate a new window.\nCtrl+b , — rename reate a new window.\nCtrl+b n — move to the (n)ext window.\nCtrl+b p — move to the (p)revious window.\n Install python 3 You will only find Python 2 on CentOS by default. In order to install the latest python3, we need to install IUS to which stands for Inline with Upstream Stable.\nsudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm sudo yum -y install python36u ### Install development package sudo yum -y insall python-devel python36u-devel  Install nodejs  Nodejs 6.x  sudo yum -y install nodejs   Nodejs 8.x  curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -   Upgrade NPM  sudo npm install -g npm sudo npm install -g typescript sudo mpm install -g yarn  install docker CE (CentOS 7) ## add repo sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo ## check docker.list yum list docker-ce --showduplicates | sort -r ## install docker engine sudo yum install docker-ce docker -v  Install JDK 8  Downlaod the JDK from Oracle website.  ## At the confirmation prompt, enter y ## then RETURN to continue with the installation. sudo yum install java-1.8.0-openjdk-devel java -version   Test JDK with a simple HelloWorld program  import java.util.Calendar; class HelloWorld { public static void main(String[] args) { Calendar cal = Calendar.getInstance(); int year = cal.get(Calendar.YEAR); int month = cal.get(Calendar.MONTH) + 1; int day = cal.get(Calendar.DATE); int hour = cal.get(Calendar.HOUR_OF_DAY); int minute = cal.get(Calendar.MINUTE); String username = System.getProperty(\u0026quot;user.name\u0026quot;); System.out.println(username+ \u0026quot;: Hello World! \u0026quot;); System.out.println(year + \u0026quot;/\u0026quot; + month + \u0026quot;/\u0026quot; + day + \u0026quot; \u0026quot; + hour + \u0026quot;:\u0026quot; + minute); } }   Compile and run the program  javac HelloWorld.java java HelloWorld.java  Install Go  Install Go  cd /tmp curl -LO https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-amd64.tar.gz ## check hash shasum -a 256 go*linux-amd64.tar.gz ## install tar ball sudo tar -C /usr/local -xvzf go1.9.2.linux-amd64.tar.gz   Setup GOROOT  cd /etc/profile.d ## Create a path.sh script sudo vi path.sh   Copy following code into path.sh  export PATH=$PATH:/usr/local/go/bin   Setup local GOBIN, GOPATH  export GOBIN=\u0026quot;$HOME/projects/go/bin\u0026quot; export GOPATH=\u0026quot;$HOME/projects/go/src\u0026quot; export PATH   Create a simple hello.go file to test  package main import ( \u0026quot;fmt\u0026quot; \u0026quot;log\u0026quot; \u0026quot;os/user\u0026quot; ) func main(){ user, err := user.Current() if err != nil { log.Fatal(err) } fmt.Printf(user.Name + \u0026quot; said : Hello World! \\n\u0026quot; ) }   Run the program  go run $GOPATH/hello.go go install $GOPATH/hello.go $GOBIN/hello  Install Cmake sudo yum install epel-release sudo yum install cmake3 sudo ln -s /usr/bin/cmake3 /usr/bin/cmake  Install Rust curl -f -L https://static.rust-lang.org/rustup.sh -O sh rustup.sh rustc --version  Install PHP 7  install and enable EPEL and Remi repository  sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm sudo yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm   install yum-utils  sudo yum install yum-utils   Enable PHP 7 repo  sudo yum-config-manager --enable remi-php72   Install PHP  sudo yum install php php-mcrypt php-cli php-gd php-curl php-mysql \\ php-ldap php-zip php-fileinfo  Install clang sudo yum install llvm sudo yum install clang  "
},
{
	"uri": "/projects/reetek-angular4-crm/",
	"title": "Angular 4 Crm Project",
	"tags": ["javascript"],
	"description": "Ng4Crm is reusable CRM project for real-world business based on Angular 4",
	"content": " Summary Ng4Crm is reusable CRM project for real-world business based on Angular 4, Angular-Material \u0026amp; Bootstrap 3.\nThis project starts from a popular starter project AngularClass/AngularStarter. The goal of this project is to create reusable project for real-world business. To achieve this target, we need a solution which should include authentication process, restful API feature with token support and simple but elegant UI design.\nFeatures  This project is built on the top of AngularClass/Angular-Starter. The UI part of this project combine Angular-Material and Bootstrap 3. Because the controls from Angular-Material is very limited, there are a few extra components require Bootstrap 3 for help. This project includes ng-charts, pagination, progress-bar, confirmation dialog, etc. features. It uses Json-Server as fake Restful API. (You can simple replace it with your own API)  Structure of Ng4Crm path\\to\\ng4crm +---config \u0026lt;-// configuration of dev or prod environment +---db \u0026lt;-// json files for json-server | +---db.json \u0026lt;-// dummy db | \\---routes.json \u0026lt;-// configure fake restful api +---screenshots +---src \u0026lt;-// vue components | +---app | | +---_gurad \u0026lt;-// auth guard for authentication | | +---_models \u0026lt;-// common models for whole app | | +---_services \u0026lt;-// common services for whole app | | +---about \u0026lt;-// about component | | +---customer \u0026lt;-// customer component | | +---dashboard \u0026lt;-// dashboard component | | +---notfoundpage \u0026lt;-// notfoundpage component | | +---login \u0026lt;-// login component | | +---order \u0026lt;-// customer component | | +---root \u0026lt;-// root component | | +---shared \u0026lt;-// common component for whole app | | +---app.component.ts | | +---app.module.ts | | +---app.routes.ts | | +---app.services.ts | | +---environment.ts | | \\---... | +---assets \u0026lt;-// images and css from third parties | +---styles \u0026lt;-// customized css files | +---main.browser.aot.ts | +---main.browser.ts | +---polyfills.browser.ts | \\---... \\...  Screenshots   Browse Repository Alternatives\nThere are two similar projects respectively built on the Vue.js and React. If you have interests in those technical stacks. You can find and clone those projects below.\n Vue2 Crm. React Redux Crm.  "
},
{
	"uri": "/frameworks/cntk-notes-1/",
	"title": "CNTK Note - 1",
	"tags": ["AI"],
	"description": "AI Framework from Microsoft",
	"content": " Prerequisites  You are using Windows 7 or higher version You are using Anaconda to setup the environment  Create CNTK virtual environment use follow command to remove existing virtual environment  conda remove -n cntk --all conda create -n cntk  Activate virtual environment and install CNTK activate cntk pip install https://cntk.ai/PythonWheel/CPU-Only/cntk-2.0rc3-cp36-cp36m-win_amd64.whl  Test CNTK python \u0026gt;\u0026gt;\u0026gt; import cntk \u0026gt;\u0026gt;\u0026gt; cntk.__version__ '2.0rc3'  "
},
{
	"uri": "/projects/laravel-mvc-starter/",
	"title": "Laravel MVC Starter",
	"tags": ["php"],
	"description": "This starter is the starting point of laravel 5 MVC project. ",
	"content": " Summary This starter is the starting point of laravel 5 MVC project. This application is meant to be used as a starting place for those looking to get their feet wet with laravel.\nOverview of project BDD ( Business domain design) +-------+ 0...* 0...* +--------+ 1 0...* +---------+ | tag | --------------- | post | ----- ----- | comment | +-------+ +--------+ +---------+ | 1...* | | 0...* +--------+ | like | +--------+  Structure of starter \\path\\to\\lara-mvc-starter +---app \u0026lt;-// Customized PHP application code | +---Console | +---Exceptions | +---Http | | +---Controllers | | | \\---Auth | | \\---Middleware | \\---Providers +---bootstrap \u0026lt;-// bootstrap the framework and configure autoloading | \\---cache +---config \u0026lt;-// application configuration +---database \u0026lt;-// database migration files | +---factories | +---migrations | \\---seeds +---public \u0026lt;-// Distributed website folder including Style sheet +---resources \u0026lt;-// View files, Javascripts, localization setting | +---assets | +---lang | \\---views | +---admin | +---blog | +---errors | +---layouts | +---other | +---partials | \\---vendor | \\---pagination +---routes \u0026lt;-// Route definitions and setting +---storage \u0026lt;-//Blade templates, file based sessions, file caches | +---app | | \\---public | +---framework | | +---cache | | +---sessions | | \\---views | \\---logs +---tests \\---vendor \u0026lt;-// Laravel framework  Screenshots   Browse Repository "
},
{
	"uri": "/projects/reetek-react-crm/",
	"title": "React Redux Crm Project",
	"tags": ["javascript"],
	"description": "React-Crm is reusable CRM starter project for real-world business based on React 15.4",
	"content": " Summary React-Crm is reusable CRM starter project for real-world business based on React 15.4, React-Redux \u0026amp; Material-UI.\nThe goal of this starter project is to create reusable project for real-world business. To achieve this target, we need a solution which should include authentication process, restful API feature with token support and simple but elegant UI design.\nFeatures  This project is built on the top of React/Redux. The UI part of this project uses Material-UI. This project uses Redux-Thunk to support backend API. It uses Json-Server as fake Restful API. (You can simple replace it with your own API)  Structure of React-Crm path\\to\\ng4crm +---config \u0026lt;-// configuration of dev or prod environment +---db \u0026lt;-// json files for json-server | +---db.json \u0026lt;-// dummy db | \\---routes.json \u0026lt;-// configure fake restful api +---screenshots +---src \u0026lt;-// vue components | +---app | | +---_gurad \u0026lt;-// auth guard for authentication | | +---_models \u0026lt;-// common models for whole app | | +---_services \u0026lt;-// common services for whole app | | +---about \u0026lt;-// about component | | +---customer \u0026lt;-// customer component | | +---dashboard \u0026lt;-// dashboard component | | +---notfoundpage \u0026lt;-// notfoundpage component | | +---login \u0026lt;-// login component | | +---order \u0026lt;-// customer component | | +---root \u0026lt;-// root component | | +---shared \u0026lt;-// common component for whole app | | +---app.component.ts | | +---app.module.ts | | +---app.routes.ts | | +---app.services.ts | | +---environment.ts | | \\---... | +---assets \u0026lt;-// images and css from third parties | +---styles \u0026lt;-// customized css files | +---main.browser.aot.ts | +---main.browser.ts | +---polyfills.browser.ts | \\---... \\...  Screenshots   Browse Repository Alternatives\nThere are two similar projects respectively built on the Vue.js and Angular. If you have interests in those technical stacks. You can find and clone those projects below.\n Vue2 Crm. Angular4 Crm.  "
},
{
	"uri": "/frameworks/tensorflow-notes-1/",
	"title": "Tensorflow Note - 1",
	"tags": ["AI"],
	"description": "Tensorflow Note - 1",
	"content": " Prerequisites  You are using Ubuntu 16 Your machine has Nvidia GPU card installed If you are using Ubuntu 14, the installation of CUDA and cuDNN will be a bit different. Please check Google\u0026rsquo;s instructions.  Install python3 and pip3  Please find instructions here  Install virtualenv via pip3 pip3 install virtualenv  Create two tensorflow virtualenvs. mkdir ~/.envs virtualenv --system-site-packages ~/.envs/tf ## CPU only virtualenv --system-site-packages ~/.envs/tfgpu ## GPU enabled  Install tensorflow for different virtualenvs source ~/.envs/tf/bin/activate source ~/.envs/tfgpu/bin/activate pip3 install tensorflow ## CPU only pip3 install tensorflow-gpu ## GPU enabled  Install CUDA and cuDNN for tensorflow-gpu Use following command to check you GPU information lspic -nn | grep '\\[03' ] lshw -numeric -C display ## GPU info sample ## NVIDIA Corporation GM107M [GeForce GTX 850M]  Download and install Nvidia driver based on above GPU info http://www.geforce.com/drivers chmod +x NVIDIA-Linux-xxxx.run sudo ./NVIDIA-Linux-xxxx.run  Download and install CUDA from NVIDIA https://developer.nvidia.com/cuda-downloads sudo dpkg -i cuda-repo-xxxxx.deb sudo apt-get udpate sudo apt-get install cuda  Setup CUDA_HOME ## CUDA export CUDA_HOME=/usr/local/cuda-8.0 export LD_LIBRARY_PATH=${CUDA_HOME}/lib64  Download and install cuDNN for CUDA https://developer.nvidia.com/cudnn ## extra the cuDNN tar ball tar -xvf cudnn-8.0 cd cuda sudo cp lib64/* /usr/local/cuda-8.0/lib64 sudo cp include/* /usr/local/cuda-8.0/include  Use sample code to test Tensorflow Save code below to file test.py import numpy as np import tensorflow as tf ## Model parameters W = tf.Variable([.3], tf.float32) b = tf.Variable([-.3], tf.float32) ## Model input and output x = tf.placeholder(tf.float32) linear_model = W * x + b y = tf.placeholder(tf.float32) ## loss loss = tf.reduce_sum(tf.square(linear_model - y)) ## sum of the squares ## optimizer optimizer = tf.train.GradientDescentOptimizer(0.01) train = optimizer.minimize(loss) ## training data x_train = [1,2,3,4] y_train = [0,-1,-2,-3] ## training loop init = tf.global_variables_initializer() sess = tf.Session() sess.run(init) ## reset values to wrong for i in range(1000): sess.run(train, {x:x_train, y:y_train}) ## evaluate training accuracy curr_W, curr_b, curr_loss = sess.run([W, b, loss], {x:x_train, y:y_train}) print(\u0026quot;W: %s b: %s loss: %s\u0026quot;%(curr_W, curr_b, curr_loss))  Test with tensorflow-gpu (GPU enabled) source ~/.envs/tfgpu/bin/activate python3 test.py ## You will probably see the result as follow ## .... ## name: GeForce GTX 850M ## major: 5 minor: 0 memoryClockRate (GHz) 0.9015 ## pciBusID 0000:0a:00.0 ## Total memory: 3.95GiB ## Free memory: 3.58GiB ## 2017-04-25 10:25:59.640621: I tensorflow/core/common_runtime/gpu/gpu_device.cc:908] DMA: 0 ## 2017-04-25 10:25:59.640626: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 0: Y ## 2017-04-25 10:25:59.640640: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] ### Creating TensorFlow device (/gpu:0) -\u0026gt; (device: 0, name: GeForce GTX 850M, pci ## bus id: 0000:0a:00.0) ## W: [-0.9999969] b: [ 0.99999082] loss: 5.69997e-11  "
},
{
	"uri": "/frameworks/tensorflow-notes-2/",
	"title": "Tensorflow Note - 2",
	"tags": ["AI"],
	"description": "Tensorflow Note - 2",
	"content": " Prerequisites  You are using Windows 7 or higher version You are using Anaconda to setup the environment  Install Anaconda  Please download Anaconda from the official site   Create tensorflow virtualenv with python 3.5  Anaconda uses python 3.6 by default. Tensorflow only supports python 3.5.\ncd /path/to/envs conda create -n tensorflow\n  Install tensorflow activate tensorflow ## For CPU pip install --ignore-installed --upgrade \\ https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.1.0-cp35-cp35m-win_amd64.whl ## Or for GPU pip install --ignore-installed --upgrade \\ https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-1.1.0-cp35-cp35m-win_amd64.whl  Use sample code to test Tensorflow Save code below to file test.py import numpy as np import tensorflow as tf ## Model parameters W = tf.Variable([.3], tf.float32) b = tf.Variable([-.3], tf.float32) ## Model input and output x = tf.placeholder(tf.float32) linear_model = W * x + b y = tf.placeholder(tf.float32) ## loss loss = tf.reduce_sum(tf.square(linear_model - y)) ## sum of the squares ## optimizer optimizer = tf.train.GradientDescentOptimizer(0.01) train = optimizer.minimize(loss) ## training data x_train = [1,2,3,4] y_train = [0,-1,-2,-3] ## training loop init = tf.global_variables_initializer() sess = tf.Session() sess.run(init) ## reset values to wrong for i in range(1000): sess.run(train, {x:x_train, y:y_train}) ## evaluate training accuracy curr_W, curr_b, curr_loss = sess.run([W, b, loss], {x:x_train, y:y_train}) print(\u0026quot;W: %s b: %s loss: %s\u0026quot;%(curr_W, curr_b, curr_loss))  Test with tensorflow-gpu (GPU enabled) activate tensorflow cd /ws/python/tf python3 test.py ## You will probably see the result as follow ## .... ## name: GeForce GTX 850M ## major: 5 minor: 0 memoryClockRate (GHz) 0.9015 ## pciBusID 0000:0a:00.0 ## Total memory: 3.95GiB ## Free memory: 3.58GiB ## 2017-04-25 10:25:59.640621: I tensorflow/core/common_runtime/gpu/gpu_device.cc:908] DMA: 0 ## 2017-04-25 10:25:59.640626: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 0: Y ## 2017-04-25 10:25:59.640640: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] ## Creating TensorFlow device (/gpu:0) -\u0026gt; (device: 0, name: GeForce GTX 850M, pci ## bus id: 0000:0a:00.0) ## W: [-0.9999969] b: [ 0.99999082] loss: 5.69997e-11  "
},
{
	"uri": "/projects/reetek-vue2-admin/",
	"title": "Vue 2 Admin Project",
	"tags": ["javascript"],
	"description": "Vue2Admin is a fully responsive admin template that is inspired by AdminLTE",
	"content": " Summary Vue2Admin is a fully responsive admin template that is inspired by AdminLTE.\nFeatures  This template is built-in with Vue 2 at the start. It include Vue Resource, Vuex as well. The plugins for this project are loaded with script loader.  Structure of Reetek Vue2Admin path\\to\\vue2admin +---build \u0026lt;-// webpack files +---config \u0026lt;-// configuration of dev or prod environment +---screenshots +---src \u0026lt;-// vue components | +---components | | +---charts | | +---dashboard | | +---forms | | +---mailbox | | +---misc | | +---pages | | +---tables | | +---ui | | \\---widget | \\---filters +---static \u0026lt;-// css, dump data, fonts, image files and plugins | +---css | +---data | +---fonts | +---img | | +---credit | | \\---stock | \\---js | \\---plugins \u0026lt;-// plugins for admin dashboard | +---AdminLTE | +---bootstrap | +---bootstrap-slider | +---bootstrap-wysihtml5 | +---chartjs | +---ckeditor | + ... \\---test +---e2e \\---unit  Screenshots   Browse Repository "
},
{
	"uri": "/projects/reetek-vue2-crm/",
	"title": "Vue 2 Crm Project",
	"tags": ["javascript"],
	"description": "Vue2Crm is a reusable Vue.js CRM starter project for real-world business based on Vue 2 PWA template",
	"content": " Summary Vue2Crm is a reusable Vue.js CRM starter project for real-world business based on Vue 2 PWA template with Vuetify.\nThe goal of this project is to create a reusable project for real-world business. To achieve this target, we need a solution which includes authentication process, restful API feature and simple but elegant UI design.\nFeatures  This starter project is built-in with Vue 2 PWA from scratch. The whole UI is built on the Vuetify It includes Vuex, Axios as well. It uses Json-Server as fake Restful API. (You can simple replace it with your own API)  Structure of Vue2Crm path\\to\\vue2crm +---build \u0026lt;-// webpack files +---config \u0026lt;-// configuration of dev or prod environment +---db \u0026lt;-// json files for json-server | +---db.json \u0026lt;-// dummy db | \\---routes.json \u0026lt;-// configure fake restful api +---screenshots +---src \u0026lt;-// vue components | +---components | | +---404.vue | | +---About.vue | | +---Customers.vue | | +---Customer.vue | | +---Orders.vue | | +---Order.vue | | +---Login.vue | | \\---... | +---router \u0026lt;-// vue-router | +---utils | | +---auth.js \u0026lt;-// auth service | | +---backend-api.js \u0026lt;-// Axios instance | | +---store.js \u0026lt;-// Vuex | \\---stylus \u0026lt;-// Customize stylus +---static \u0026lt;-// css, fonts, image files | +---img | \\---manifest.json \u0026lt;-// PWA manifest file \\---test +---e2e \\---unit  Screenshots   Browse Repository Alternatives There are two similar projects respectively built on the Angular and React. If you have interests in those technical stacks. You can find those projects below.\n Angular4 Crm. React Redux Crm.  "
},
{
	"uri": "/projects/angularjs-webpack-es6-starter/",
	"title": "Angularjs Webpack ES6 Starter",
	"tags": ["angularjs", "webpack", "javascript"],
	"description": "This starter was inspired by another similar angular webpack starter repository",
	"content": " Summary It simply includes font-awesome, bootstrap for the people who don\u0026rsquo;t want to use boostrap-webpack, font-awesome-webpack. I find it saves us so much effort to create prototype, since we don\u0026rsquo;t need spectacular UI.\n This starter uses angular 1.5 for someone want to build component. This repo followes mvc patterns instead of component pattern. ES6, and ES7 support with babel. Development server with live reload. Production builds with cache busting. Testing environment using karma to run tests and jasmine as the framework. Code coverage when tests are run. Include font-awesome without font-awesome-loader. Include Bootstrap 3 without bootstrap-loader. No gulp and no grunt, just npm scripts.  Structure of starter \\path\\to\\angularjs-webpack-es6-starter | .babelrc \u0026lt;-// default setting es2015. | karma.conf.js \u0026lt;-// tests and report setup | webpack.config.js \u0026lt;-// webpack config \\---src | tests.webpack.js | +---app | | app.html \u0026lt;-// app view | | app.js \u0026lt;-// app module | | app.routes.js \u0026lt;-// app route to manage all routes | | app.runner.js \u0026lt;-// app runner for state change enhancement | | app.spec.js \u0026lt;-// app spec file for testing | | | +---common \u0026lt;-// common module for whole app | | | common.js | | | common.spec.js | | +---directives \u0026lt;-// common directives for whole app | | | appUiDirectives.js | | | appUiDirectives.spec.js | | | commonDirectives.js | | | commonDirectives.spec.js | | +---services \u0026lt;-// common views for whole app | | | ApiService.js | | | ApiService.spec.js | | | UtilService.js | | | UtilService.spec.js | | \\---views \u0026lt;-// contains common views | | footer-view.html | | header-view.html | | sidebar-view.html | | topbar-view.html | \\---main \u0026lt;-// built-in fonts, css, images | \\---dashboard | +---controllers | | dashboardController.js | | dashboardController.spec.js | \\---views | dashboard-view.html | +---public \u0026lt;-// built-in fonts, css, images | | index.html | +---fonts | | +--- ... | \\---img | +--- favicon.ico \\---style \u0026lt;-// css files including customized css  Browse Repository "
},
{
	"uri": "/blogs/git-notes/",
	"title": "Git Practices",
	"tags": [],
	"description": "Useful Git commands  &amp; practices for repository management",
	"content": " Create a new branch with git Create the branch on your local machine and switch in this branch  $ git checkout -b [name_of_your_new_branch]  Push the branch on git-repository (Github, Bitbucket)  $ git push origin [name_of_your_new_branch]  When you want to commit something in your branch, be sure to be in your branch.\nList all branches  You can see all branches created by using :\n$ git branch  Which will show :\n* approval_messages master master_clean   Manage branches (Push, Fetch \u0026amp; Merge) Add a new remote for your branch :\n$ git remote add [name_of_your_remote]  Push changes from your commit into your branch :\n$ git push [name_of_your_new_remote] [name_of_your_branch]  Update your branch when the original branch from official repository has been updated :\n$ git fetch [name_of_your_remote]  Then you need to apply to merge changes, if your branch is derivated from develop you need to do :\n$ git merge [name_of_your_remote]/develop  Delete branch Delete a branch on your local filesystem :\n$ git branch -d [name_of_your_new_branch]  To force the deletion of local branch on your filesystem :\n$ git branch -D [name_of_your_new_branch]  Delete the branch on github :\n$ git push origin :[name_of_your_new_branch]  Compare two branch:\n$ git diff [name_of_branch1]..[name_of_branch2]  Branch merge Fast-Forward Merge Our first example demonstrates a fast-forward merge. The code below creates a new branch, adds two commits to it, then integrates it into the main line with a fast-forward merge.\n```bash ## Start a new feature $ git checkout -b new-feature master ## Edit some files $ git add \u0026lt;file\u0026gt; $ git commit -m \u0026quot;Start a feature\u0026quot; ## Edit some files $ git add \u0026lt;file\u0026gt; $ git commit -m \u0026quot;Finish a feature\u0026quot; ## Merge in the new-feature branch $ git checkout master $ git merge new-feature $ git branch -d new-feature ```  This is a common workflow for short-lived topic branches that are used more as an isolated development than an organizational tool for longer-running features.\nAlso note that Git should not complain about the git branch -d, since new-feature is now accessible from the master branch.\n3-Way Merge The next example is very similar, but requires a 3-way merge because master progresses while the feature is in-progress. This is a common scenario for large features or when several developers are working on a project simultaneously.\n```bash ## Start a new feature $ git checkout -b new-feature master ## Edit some files $ git add \u0026lt;file\u0026gt; $ git commit -m \u0026quot;Start a feature\u0026quot; ## Edit some files $ git add \u0026lt;file\u0026gt; $ git commit -m \u0026quot;Finish a feature\u0026quot; ## Develop the master branch $ git checkout master ## Edit some files $ git add \u0026lt;file\u0026gt; $ git commit -m \u0026quot;Make some super-stable changes to master\u0026quot; ## Merge in the new-feature branch $ git merge new-feature $ git branch -d new-feature ```  "
},
{
	"uri": "/frameworks/php-web/",
	"title": "PHP Web Framework",
	"tags": ["php"],
	"description": "Introduction of PHP Web Frameworks:  Zend Framework, Laravel ...",
	"content": "  Here we are going to explore some PHP web frameworks.\n PHP development environment setup Install PHP 5.6.x  Please find the instruction from home page  Composer Linux  Use curl -s https://getcomposer.org/installer | php -- to install composer on Linux use \u0026lsquo;composer -v \u0026rsquo; to verify.  Windows  Download the composer and install php on your PC Use composer -v to verify the composer is ready.  Zend Framework  Zend Framework is a collection of 60+ packages for professional PHP development. It can be used to develop web applications and services using PHP 5.6+, and provides 100% object-oriented code using a broad spectrum of language features.\n Zend Framework 2.x Create Zend Framework 2 project from scratch * Clone Zend Framework skeleton project as new project. * Install zend framework with composer cd /path/to/newproject git clone git://github.com/zend framework/ZendSkeletonApplication.git cd ZendSkeletonApplication php composer.phar self-update php composer.phar install  * Start app with php built-in server Linux\nphp -S 0.0.0.0:8080 -t public/ public/index.php  Windows\nphp -S 0.0.0.0:8080 -t public public/index.php  * Use apache server \u0026lt;VirtualHost *:80\u0026gt; ServerName zf2-tutorial.localhost DocumentRoot /path/to/newproject/ZendSkeletonApplication/public SetEnv APPLICATION_ENV \u0026quot;development\u0026quot; \u0026lt;Directory /path/to/newproject/ZendSkeletonApplication/public\u0026gt; DirectoryIndex index.php AllowOverride All Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt;  Use Zf2-MVC-Starter project  Please find the project introduction here.  Laravel  Laravel is a free, open-source PHP web framework, created by Taylor Otwell and intended for the development of web applications following the model–view–controller (MVC) architectural pattern. Some of the features of Laravel are a modular packaging system with a dedicated dependency manager, different ways for accessing relational databases, utilities that aid in application deployment and maintenance, and its orientation toward syntactic sugar.\n Laravel 5.x Install laravel global Use `composer global laravel/installer`  Enable the mbs-string extension update php.ini config  Open php.ini with notepad Change ;extension=php_mbstring.dll to extension=php_mbstring.dll  Create new project from scratch Create new project Migrate database and seed dummy data  Create data model Following is the sample code  \u0026lt;?php namespace App; use Illuminate\\Database\\Eloquent\\Model; class Article extends Model { protected $fillable = ['title', 'content']; public function getTitleAttribute($value) { return strtoupper($value); } }   Use artisan to create the table  php artisan migrate -VVV ## Use following command to seek dump or initial data php artisan db:seed  Troubleshooting Fix the error of Specified key was too long\nnamespace App\\Providers; use Illuminate\\Support\\ServiceProvider; use Illuminate\\Support\\Facades\\Schema; class AppServiceProvider extends ServiceProvider { /** * Bootstrap any application services. * * @return void */ public function boot() { // Schema::defaultStringLength(191); } /** * Register any application services. * * @return void */ public function register() { // } }  Use Lavarel MVC Starter project * Please find the project introduction [here](/project/lara-mvc-starter/).  Use Laravel Rest Starter project PrestaShop  PrestaShop is a free, open source e-commerce solution. The software is published under the Open Software License (OSL). It is written in the PHP programming language with support for the MySQL database management system.\n Prestashop 1.5.4 Download the zip file from download page Install Prestashop There is a instruction page inside the zip file. You can follow the instructions to complete the installation. There is no EasyPHP, Wamp, XAMPP, or any similar AMP (Apache+MySQL+PHP) package installed on my PC, but I have PHP, Apache, MySQL installed. Actually EasyPHP, Wamp are just the bundle of PHP development tools, which include PHP, Apache, MySQL. I don\u0026rsquo;t want to install too many duplicate softwares and packages on my PC, so I prefer to install Prestashop with what I have on my PC. Which strategy is up to you.\nInstall Prestashop with AMP package  Follow the instruction page within zip file.  Install Prestashop without AMP package  Unzip file to path\\to\\prestashop_workspace. Your folder structure will look like this.  path\\to\\prestashop_workspace \\---prestashop +---admin +---cache +---classes +---config +---controllers +---css +---docs +---download +---img +---install +---js +---localization +---log +---mails +---modules +---override +---pdf +---themes +---tools +---translations +---upload \\---webservice   Start your MySQL or check the status of MySQL\n Use your MySQL client tool to connect to your MySQL server.  Launch installer page with php server\n Start a command prompt\n  cd /path/to/prestashop_workspace php -S 0.0.0.0:1234 -t prestashop   Open the link http://localhost:1234/install/index.php with browser, then you can start installation process.\n Choose language and click Next, and then select the checkbox \u0026ldquo;I agree bah lah bah lah \u0026hellip;. \u0026rdquo; and click Next\n If there is an error GD Library is not installed prompt, you just need to enable the library on php.ini\n DO NOT close your browser. Stop the php server by Ctrl + C in the command prompt. Use notepad to open the file php.ini under the \\path\\to\\php Uncomment the config ;extension=php_gd2.dll =\u0026gt; extension=php_gd2.dll Start the php server again   Click the Refresh this settings, and click Next\n Fill the login user and password. If your MySQL port is not 3306, please attach your port to the server address input field. Click Test your database connection.\n If you got error prestashop database not found, you need to create a database on mysql server.\n I simply create a new database immediately with one command line  CREATE DATABASE prestashop CHAR SET utf8 COLLATE 'utf8_unicode_ci';   Test the connection again. You will get the green light   Click Next and you can start to setup your store informaiton, such as, store name, admin account, etc. Then click Next\n Setup your sample store. Click Next. Then the installer will help you finish the initialization.\n After the store setup, you can access the website by clicking Font site, but you can not access back office, as known as admin panel.\n Don\u0026rsquo;t panic. It is easy to fix. Stop the php server by clicking Ctrl+C, and delete the folder install under the root, and then start the server again. Open the folder with prestashop, you will find something interesting. The original folder admin under prestashop has been renamed to adminXXXX. X is a number. It is Prestashop special trick to secure your admin folder. Now you need to use this new name as path to acces back office. Your new back office link will be http://localhost:1234/adminXXXX.\n Open the new link in browser and type in your admin id and password. Now you can start managing your Prestashop site. Enjoy it.\n  Forgot admin\u0026rsquo;s password  Forgot admin\u0026rsquo;s password or somehow you have to reset password and you cannot get admin\u0026rsquo;s password from previous adminstrator. For such case, there is a simple way to update admin\u0026rsquo;s password from database.\n Tailor the SQL below. Then you should be able to use new password to login.\n  UPDATE ps_employee SET passwd = MD5('\u0026lt;_COOKIE_KEY_\u0026gt;password') WHERE ps_employee.id_employee = \u0026lt;ID_EMPLOYEE\u0026gt;;  Troubleshooting InnoDB error  Error : InnoDB is not supported by your MySQL server   You got error because Prestashop 1.5 is not working properly with MySQL 5.4 and later.\n  Update files DbPDO.php , MySQL.php and DbMySQLi.php as follow.  // $sql = 'SHOW VARIABLES WHERE Variable_name = \\'have_innodb\\''; $sql = \u0026quot;SELECT SUPPORT FROM INFORMATION_SCHEMA.ENGINES WHERE ENGINE LIKE 'INNO%'\u0026quot;; ... // if (!$row || strtolower($row['Value']) != 'yes') if (!$row || strtolower($row['Value']) === 'no')   Restart the server and the proble will be fixed.  CORS  Enable module header in httpd.conf\n Add header settings\n  Header always set Access-Control-Max-Age \u0026quot;1000\u0026quot; # \u0026quot;X-Requested-With, Content-Type, Origin, Authorization, Accept, Client-Security-Token, Accept-Encoding\u0026quot; Header always set Access-Control-Allow-Headers \u0026quot;USE ABOVE COMMENT AS DEFAULT VALUE\u0026quot; Header always set Access-Control-Allow-Methods \u0026quot;POST, GET, OPTIONS, DELETE, PUT\u0026quot;  Too big header file  Add this to your http {} of the nginx.conf file normally located at /etc/nginx/nginx.conf:\nproxy_buffer_size 128k; proxy_buffers 4 256k; proxy_busy_buffers_size 256k;\n Then add this to your php location block, this will be located in your vhost file look for the block that begins with location ~ .php$ {\nfastcgi_buffer_size 128k; fastcgi_buffers 4 256k; fastcgi_busy_buffers_size 256k;\n  "
},
{
	"uri": "/blogs/build-mobile-app/",
	"title": "Build mobile app with web tech stacks",
	"tags": ["mobile"],
	"description": "",
	"content": " What is mobile app  A mobile application, basically, is a computer generated program designed and developed to run on iPhone, Android Smartphone, and many other mobile devices. In a nutshell, there are three types of apps\nNative apps are specific to a given mobile platform (iOS or Android) using the development tools and language that the respective platform. Usaully it looks and performs the best.\nHTML5 apps use standard web technologies—typically HTML5, JavaScript and CSS. This write-once-run-anywhere approach to mobile development creates cross-platform mobile applications that work on multiple devices.\nHybrid apps make it possible to embed HTML5 apps inside a thin native container, combining the good parts of Native app and HTML5 app elements.\n Mobile app development According above breif history we can image the mobile developer community has become asfragmented as the market. Mobile software developers work with different programming environments, different tools, and different programming languages.\nAfter a few years of improvement, we can see some Hybrid app based framework becomes more and more popular and shining. ionic, nativescript and react native are most promising frameworks which we should really look into.\nIntroduction of ionic developement Prerequisites  Here we just introduce ionic 1.x. When I started investigating the ionic, the ionic 2 just came out for a while. ionic 2 study is on my todo list. You are familiar with web technologies, such as, HTML5, CSS, JavaScript, and you should have experience of nodejs and relevant skills.  Getting started  install ionic 1.x setup ionic and create new project demoApp  ionic start demoApp slidemenu cd demoApp ionic platform add android ionic build android ionic emulate android  Install packages  Use npm install to install packages Folllowing is the package.json. You can tailor it on your own.  { \u0026quot;name\u0026quot;: \u0026quot;ionic-project\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;An Ionic project\u0026quot;, \u0026quot;dependencies\u0026quot;: { \u0026quot;gulp\u0026quot;: \u0026quot;^3.5.6\u0026quot;, \u0026quot;gulp-sass\u0026quot;: \u0026quot;^2.0.4\u0026quot;, \u0026quot;gulp-concat\u0026quot;: \u0026quot;^2.2.0\u0026quot;, \u0026quot;gulp-minify-css\u0026quot;: \u0026quot;^0.3.0\u0026quot;, \u0026quot;gulp-rename\u0026quot;: \u0026quot;^1.2.0\u0026quot; }, \u0026quot;devDependencies\u0026quot;: { \u0026quot;bower\u0026quot;: \u0026quot;^1.3.3\u0026quot;, \u0026quot;gulp-util\u0026quot;: \u0026quot;^2.2.14\u0026quot;, \u0026quot;shelljs\u0026quot;: \u0026quot;^0.3.0\u0026quot; }, \u0026quot;cordovaPlugins\u0026quot;: [ \u0026quot;cordova-plugin-device\u0026quot;, \u0026quot;cordova-plugin-console\u0026quot;, \u0026quot;cordova-plugin-whitelist\u0026quot;, \u0026quot;cordova-plugin-splashscreen\u0026quot;, \u0026quot;cordova-plugin-statusbar\u0026quot;, \u0026quot;ionic-plugin-keyboard\u0026quot; ], \u0026quot;cordovaPlatforms\u0026quot;: [] }  Debug  Browser is the best option for ionic mobile development debug tools Use Telerik AppBuilder to debug  Test on emulator or device  Android\n Download and install Android SDK Download install at least one sdk platform. ionic only support Android 4.1.x or later, so you are better to install any sdk platform version 18+. install x86 or x86_64 image for windows environment install Extra plugins: Google USB driver, X86 Emulator Accelerator Create AVD for your mobile app testing  iPhone\n Install AppBuilder on Visual Studio Install Genymotion   Troubleshooting  Android emulator accelerator error due to version is too low to support the system image uninstall old version intel HAXM install new version manually from \u0026lt;Android_SDK_Location\u0026gt;\\extras\\intel\\Hardware_Accelerated_Execution_Manager\n If app is not working on emulator, check cordova plugins or manually install cordova plugins\nionic plugins list ionic plugins add XXXXX   "
},
{
	"uri": "/blogs/azure-notes/",
	"title": "Azure notes",
	"tags": ["azure"],
	"description": "",
	"content": "  Here we are going to explore how to deploy web applications to Azure. From sep 2015, Microsoft launched new portal for Azure. To be honest, new portal is amazing, IMO, it is one of best changes from Microsoft.\n Prerequisites  You have experience with .net web applications. You have experience with website or web app deployment.  Getting Started  Register a Microsoft account. e.g. live.com, outlook.com, etc. Start free trial account on Azure cloud Install Azure powershell, Azure CLI, Azure SDK for Visual Studio  App Service Web app  Create a website from portal\n Create a website from visual studio\n Create Empty Asp.Net webstie with only index.html Publish it to Azure via Web Deploy Profile \u0026gt; Microsoft Azure App Service Add Azure account \u0026gt; New app service ( name: webapp ) Publish method pick Web Deploy Validate Connection \u0026gt; Publish  Create a deploy slot ( webdeploy )\n Create a web app from portal. Default deployment slot is not available Change app service plan \u0026gt; Choose Standard tier Add slot \u0026gt; Type dev as name \u0026gt; leave the configuration plan as default Change previous publish profile from Web Deploy to Web Deploy Package and create a package in local somewhere e.g. C:\\webdeploy\\webapp.zip  Deploy to azure ( Start PowerShell as admin )\n   Add-AzureAccount Get-AzureSubscription -Default ` Publish-AzureWebsiteProject -Name 'webdeploy' -Package 'C:\\webdeploy\\webapp.zip'   Deploy website to dev slot **Publish\u0026hellip; \u0026gt; Profile \u0026gt; Expand the webdeploy \u0026gt; Deployment slots \u0026gt; dev \u0026gt; Next \u0026gt; Publish  Webjobs  Open previous app service ( webapp ) Set deployment credentials for Git / FTP Set Git Repo  Deploy options \u0026gt; Local Git Repository \u0026gt; Copy git URL https://xxxxxxx.git Create demoWeb project with only one index page.  demoWeb ( folder ) *#** Index.html\n Deploy project to azure git repo ( Start powershell as admin)\n  git init git status git config user.name \u0026quot;harryho\u0026quot; git config user.email \u0026quot;hho@hho.com\u0026quot; git commit -m \u0026quot;initial commit\u0026quot; git remote add azure https://xxxxxxx.git git remote -v git push azure master   Use Kudu\n DEVELOPMENT TOOLS \u0026gt; Advanced Tools  Create a webjob and deploy to azure (Start powershell as admin)\n  mkdir webjob01 cd webjob01 echo \u0026quot;Get-Date | Out-File -FilePath 'd:\\home\\site\\wwwroot\\dateoutput.txt -Append' \u0026quot;\u0026gt;getdatejob.ps1 .\\getdatejob.ps1 cat .\\dateoutput.txt 7z a -tzip getdatejob.zip *.ps1 7z l getdatejob.zip help New-AzureWebisteJob New-AzureWebsiteJob -Name 'WebAppV1301' -JobName 'GetDateJob01' -JobType Continuous -JobFile '.\\getdatejob.zip'   Create webjob from visual studio\n Create webjob project. Add one line program in the main method Console.WriteLine(\u0026quot;Hellow World\u0026quot;); Right click project node \u0026gt; Publish Azure Webjob \u0026hellip; Setup job schedule Publish to app service ( webapp )  Deploy Asp.net SPA with SQL database to Azure\n Create blank SQL database from portal. Remember the admin Id and password Install VS 2015, Azure SDK for VS 2015 Create web project ( c## ), choose ASP.NET Web Application ( .Net Framework )   Custom Domain  Free tier cannot custom domain name Bind the existing name\n Navigate to Custom Domain\n Copy the external IP ( e.g. 10.1.1.1 ) for later setup. Enter the domain name, validate domain name ( First time is invalid ) Open your domain register website, e.g. godaddy.com ( that is my domains register website) Choose the domain you want to bind. Unlock the domain. Navigate to Zone tab Remove existing A type which points to hosting server Add a new A Type pointing to azure Add an additional TXT Type pointing to azure for azure\u0026rsquo;s verify Save all changes and wait for DNS Use the site https://digwebinterface.com to verify the new DNS been updated world wildly Back to azure portal to validate the domain name. Once it is valid, save and update it.   Self-signed SSL setup  Create a text file named serverauth.cnf, then copy the following content into it, and then save it in a working directory.  [ req ] default_bits = 2048 default_keyfile = privkey.pem distinguished_name = req_distinguished_name attributes = req_attributes x509_extensions = v3_ca [ req_distinguished_name ] countryName = Country Name (2 letter code) countryName_min = 2 countryName_max = 2 stateOrProvinceName = State or Province Name (full name) localityName = Locality Name (eg, city) 0.organizationName = Organization Name (eg, company) organizationalUnitName = Organizational Unit Name (eg, section) commonName = Common Name (eg, your app's domain name) commonName_max = 64 emailAddress = Email Address emailAddress_max = 40 [ req_attributes ] challengePassword = A challenge password challengePassword_min = 4 challengePassword_max = 20 [ v3_ca ] subjectKeyIdentifier=hash authorityKeyIdentifier=keyid:always,issuer:always basicConstraints = CA:false keyUsage=nonRepudiation, digitalSignature, keyEncipherment extendedKeyUsage = serverAuth   In a command-line terminal, CD into your working directory and run the following command. Remember set your domain name as common name.  openssl req -sha256 -x509 -nodes -days 365 -newkey rsa:2048 -keyout myserver.key -out myserver.crt -config serverauth.cnf   Export the certificate to a .pfx file by running the following command. When prompted, define a password to secure the .pfx file.  openssl pkcs12 -export -out myserver.pfx -inkey myserver.key -in myserver.crt   Add SSL binding\n SNI SSL type for CNAME setup  http to https redirect\n DEVELOPMENT TOOLS \u0026gt; Advanced Tools \u0026gt; Debug Console\u0026gt; Powershell Navigate from site \u0026gt; wwwroot . Edit Web.config. Add url rewite into Web.config proply   \u0026lt;configuration\u0026gt; \u0026lt;system.webServer\u0026gt; \u0026lt;rewrite\u0026gt; \u0026lt;rules\u0026gt; \u0026lt;rule name=\u0026quot;HTTP/S to HTTPS Redirect\u0026quot; enabled=\u0026quot;true\u0026quot; stopProcessing=\u0026quot;true\u0026quot;\u0026gt; \u0026lt;match url=\u0026quot;(.*)\u0026quot; /\u0026gt; \u0026lt;conditions logicalGrouping=\u0026quot;MatchAny\u0026quot;\u0026gt; \u0026lt;add input=\u0026quot;{SERVER_PORT_SECURE}\u0026quot; pattern=\u0026quot;^1$\u0026quot; /\u0026gt; \u0026lt;add input=\u0026quot;{SERVER_PORT_SECURE}\u0026quot; pattern=\u0026quot;^0$\u0026quot; /\u0026gt; \u0026lt;/conditions\u0026gt; \u0026lt;action type=\u0026quot;Redirect\u0026quot; url=\u0026quot;https://{HTTP_HOST}/OWA/\u0026quot; redirectType=\u0026quot;Permanent\u0026quot; /\u0026gt; \u0026lt;/rule\u0026gt; \u0026lt;/rules\u0026gt; \u0026lt;/rewrite\u0026gt; \u0026lt;/system.webServer\u0026gt; \u0026lt;/configuration\u0026gt;   Restart the web.config (Optional ). Cleanup the browser cache and hard refresh  "
},
{
	"uri": "/os/ubuntu-server-14/",
	"title": "Ubuntu 14 -- server setup",
	"tags": ["linux", "ubuntu"],
	"description": "",
	"content": " Prelude\n This article is mainly to help experienced user install and setup Ubuntu server. If you are not familiar with Ubuntu system, please install Ubuntu desktop version at first, and you can follow Ubuntu deskstop setup\n Prerequisites  You are familiar with Ubuntu, at least you have some experience working on Linux system. You are familiar with bash/shell script You are going to setup Ubuntu server for special purpose. e.g. Web server, file server, or data center.\n  UFW setup sudo ufw enable sudo ufw allow 80/tcp sudo ufw allow ssh sudo ufw allow 443/tcp sudo ufw allow 8000/tcp  SSH server setup !!! For production environment, SSH should be secured by the CA\nsudo apt-get install openssh-server ## backup default config sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.factory-defaults sudo chmod a-w /etc/ssh/sshd_config.factory-defaults ## use any editor to update sshd_config sudo nano /etc/ssh/sshd_config ## uncomment PasswordAuthentication yes to allow remote password login ## Password authentication is only for test environment ## setup ssh auto-start onboot sudo update-rc.d ssh defaults  Time Zone setup sudo dpkg-reconfigure tzdata  install software-properties-common Package software-properties-common python-software-properties  Install byobu screen\nsudo apt-get install byobu screen ## Launch byobu byobu ## F9 for help ## change the keyboard for putty \u0026gt; Termianl \u0026gt; Keyboard \u0026gt; Function keys and keyboard \u0026gt; Xterm R6  install docker (Ubuntu 14.04 LTS) ## add GBG Key sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D ## add docker.list sudo touch /etc/apt/sources.list.d/docker.list ## repo sudo vi /etc/apt/sources.list.d/docker.list ## add following repo ath the end of file deb https://apt.dockerproject.org/repo ubuntu-trusty main ## apt update sudo apt-get update ## verify apt-cache policy docker-engine ## install docker engine  build vim  I am not vi fans, but if you really want to use vi. I wiil suggest spend some time to dig into vimawesome and play around with those plugins. Some are pretty cool, e.g. NERD Tree, \u0026lsquo;youcompleteme,syntastic`, etc.  sudo apt-get build-dep vim git clone https://github.com/vim/vim.git ~/forks/vim cd ~/forks/vim ### make distclean \u0026amp;\u0026amp; make clean ### build script from this repo make VIMRUNTIMEDIR=/usr/share/vim/vim74 sudo make install  Install JDK 8  If you are going to run Java Web Application on server, or you are going to setup Hadoop environment. Setup oracle jdk ppa and install oracle jdk from ppa.  sudo add-apt-repository ppa:webupd8team/java sudo apt-get update sudo apt-get install oracle-java8-installer sudo apt-get install oracle-java8-set-default  Install OpenJdk  Setup OpenJdk ppa and install it from ppa  sudo add-apt-repository ppa:openjdk-r/ppa sudo apt-get update sudo apt-get install openjdk-8-jdk sudo update-alternatives --config java   Type in a number to select a Java version. set default Java Compiler  sudo update-alternatives --config javac java -version   How to stop mysql auto startup\n Comment out the line below in the config file ( /etc/init/mysql.conf )\n Start on (net-device-up   Install nodejs curl -sL https://deb.nodesource.com/setup | sudo bash - sudo apt-get install nodejs sudo apt-get install build-essential  Setup NPM\n You can use default npm on your server after you install nodejs, but there is a better way to manage your npm. It allows you easily to control your packages.\n  cd mkdir .node_modules npm config list npm config get prefix ## /usr or /usr/share npm config set prefix $HOME/.node_modules cat .npmrc ## /home/hho/.node_modules npm install -g npm which npm ## /usr/bin/npm   Open .profile add following to end of file  export PATH=\u0026quot;$HOME/.node_modules_global/bin:$PATH\u0026quot;  Install nvm  Using nvm is no longer popular and best option. I will recommand you just use npm to manage eveything you need.  sudo apt-get update sudo apt-get install build-essential libssl-dev curl https://raw.githubusercontent.com/creationix/nvm/v0.16.1/install.sh | sh source ~/.profile nvm ls-remote nvm install 0.11.13 nvm use 0.11.13 nvm alias default 0.11.13 nvm use default  Install PHP \u0026amp; Compser sudo apt-get install curl php5-cli git curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer  Install Python2, Python3  Ubuntu has python instaleld by default  sudo apt-get python pip sudo apt-get install python3 pip3 ## Install virtualenv sudo pip install virtualenv sudo pip3 install virtualenv  Install Go wget https://storage.googleapis.com/golang/go1.4.linux-amd64.tar.gz sudo tar -xzf go1.4.linux-amd64.tar.gz -C /usr/local sudo vi /etc/profile GOPATH=\u0026quot;/YOUR/USER/HOME/go\u0026quot; GOROOT=\u0026quot;/usr/local/go\u0026quot; PATH=$GOROOT/bin:$PATH  Install R sudo apt-key adv –keyserver keyserver.ubuntu.com –recv-keys E084DAB9 sudo add-apt-repository ‘deb http://star-www.st-andrews.ac.uk/cran/bin/linux/ubuntu trusty/’ sudo apt-get update sudo apt-get install r-base  Install Rust $ curl -sf -L https://static.rust-lang.org/rustup.sh | sh  Uninstall Rust\n$ sudo /usr/local/lib/rustlib/uninstall.sh  "
},
{
	"uri": "/projects/zf2-mvc-starter/",
	"title": "Zend Framework 2 MVC Starter",
	"tags": ["php"],
	"description": "This starter is the starting point of zend framework 2 MVC project",
	"content": " Summary This starter is the starting point of zend framework 2 MVC project. This application is meant to be used as a starting place for those looking to get their feet wet with ZF2.\nFeatures  This starter was built on the zend framework 2.x. This starter uses mysql as database setting by default. Include digest authentication by default. Include font-awesome files. Include Bootstrap 3 without bootstrap-loader. Include html5shiiv.js to support older IE browser.  Structure of starter \\path\\to\\zf2-mvc-starter +---config // Database, authorizaion, authentication setting +---data +---module // Customized application sources | +---Application // Global module used by whole application | | +---config | | | \\---module.config.php // Register all modules | | +---language | | +---src | | | \\---Application | | | +---Controller | | | \\---Factory | | | \\---AuthenticationAdapterFactory.php | | \\---view // Contains common master, basic layout files | | +---application | | | \\---index | | +---error | | +---layout | | \\---partial | +---BookList // Customized module for business purpose | | +---config | | +---src | | | \\---BookList | | | +---Controller | | | +---Form | | | \\---Model | | \\---view | | \\---book-list | | \\---book | \\---Test | \\---config +---public // Contains all fonts, css, images, and js files | +---css | +---fonts | +---img | \\---js \\---vendor // Contains Zend Framework 2 source code  Screenshot of home page   Browse Repository "
},
{
	"uri": "/os/ubuntu-desktop-14/",
	"title": "Ubuntu 14 -- desktop setup &amp; dual boot ",
	"tags": ["linux", "ubuntu"],
	"description": "",
	"content": "  This article is mainly to help beginner install Ubuntu desktop at the first time. If you are looking for setup of Ubuntu server, please check out the blog \u0026ndash; Ubuntu server setup\n Where to install Linux?  How to answer this quetion really depends user\u0026rsquo;s computer knowledge and skills. Basically Linux can be installed on almost any PC, laptop, embedded device or tablet. So there are some suggestions for people with different level skills.*\n Beginner \u0026ndash; If you never install any operating system, or you never use Unix/Linux system, but still want to try something new. You should consider to install virtual machine on your computer and then install ubuntu on the virtual machine. VMware and VirtualBox are both very good products.\n Intermediate \u0026ndash; If you have installed operating system, or you have used Unix/Linux system, you can install it on your old machine. or for safe side try it on virtual machine at first.\n Expert \u0026ndash; You can try dual boot or multiple boot operating systems on your PC. Install 10-20 operating systems on a PC with 400GB harddisk should be alright. The only problem I encountered before some operating system can not find all proper drivers to support the all devices on your PC/laptop, such as the drivers for camera, touchpad, wifi, etc. It would take you so much time to research and try.\n  Install virtual machine Let\u0026rsquo;s get our hands dirty\n Install VirtualBox/VMWare on your computer. IMO, use VirtualBox is quite handy and save you much effort, even it is free. Because in the real environment, you will use remote tool to do your admin task instead of really handling a phyiscal machine. And you can try another Liunx OS on VirtualBox.\n If you lean to commercial product, you can choose VMWare. There is free trial option for you.\n  Which version to choose  Ubuntu has variant versions for you to download and play. I will suggest you always pick LTS (Long Term Support) version to download. As beginner, desktop version is the best option for you to start.\n After downlaod the Ubuntu Desktop from the internet. You will get a ISO file like this: ubuntu-xx.xx.x-desktop-amd64.iso, if your OS is 64 bits, or something like ubuntu-xx.xx.x-desktop-x86.iso for 32 bits.\n  Install Unbuntu  Before you install, you had better to backup anything on the device which you are going to install, and chcek your internet is working properly.\n Create a new virtual machine within VMWare or VirtualBox. The processes on both softwares are almost the same.\n Assume your new virtual machine will sit in C:\\vbox for VirtualBox or C:\\vm for VMware Create a new machine from menu. Type in the name of vm. e.g. Unbuntu Select the type of operating system: Linux You can choose Ubuntu(32\u0026frasl;64 bit ) or something else. It doesn\u0026rsquo;t matter. We don\u0026rsquo;t use any built-in xxx.iso files from VirtualBox or VMware. Then click Next Select the memory size for the Unbuntu. 2G RAM is minimal requirement. I prefer up to 30% of total memory size. And then click Next. Select \u0026ldquo;Create a virtual hard drive now\u0026rdquo;, and then click Next. Select defaut VDI, then click Next. Select \u0026ldquo;Dynamically allocated\u0026rdquo;, then click Next. Choose the location of Unbuntu. e.g. c:\\vbox\\ubuntu\\ubuntu.vdi or c:\\vm\\ubuntu\\ubuntu.vmdk. Select the size of VDI\\VMDK file. At least 8G. I\u0026rsquo;d like to select 16 or more. Then a Unbuntu virtual machine has been created.  Config the Unbuntu hardware setting.\nVirtualBox\n On VirtualBox toolbar, there is a Start button. Click Start, then go the Storage item. Under the Storage Tree section, there is Empty CD icon. Click the Empty icon.\n Under the Attributes section, click the CD icon at the end of the dropdown list of CD/DVD Drive. Choose the Unbuntu iso file which you download from Unbuntu.org. Click OK. Leave all the other setting as default. Click the Startbutton on the toolbar.  VMWare\n On VMware, you can find CD/DVD button on the tab page of new virtual machine. Click the CD button at the end of the dropdown list of CD/DVD Drive. Choose the Unbuntu iso file which you download from Unbuntu.org. Click OK. Leave all the other setting as default. Click the Power on this virtual machine option on the tab page.  Ubuntu provides a friendly and beautiful UI to complete installation instead of ugly and terrified terminal, as geek\u0026rsquo;s computer shown on sci-fi movie. If you choose VMWare or VirtulBox as machine, you can open the page of installation steps on your browser. You just need to follow the instruction step by step, it will take you around 1-2 hours to complete.\n  Things to do after installing Ubuntu desktop  Ubuntu desktop is very nice and friendly, even it is different from your Windows. Basically you don\u0026rsquo;t need any geek\u0026rsquo;s skill to play around on Uubuntu desktop and use it as your Windows. There are tons of free software you can download from Ubuntu Software Center, so you don\u0026rsquo;t worry where to find the softwre you need. Considering you are the beginner, some suggestions and caveats will be highlighted below, but none of these needs command line and terminal.  Disable the system upgrade automatically to new LTS version. Disable the system power manager to suspend your PC. Disable the system problem report service. Enbale the third party packages. Install Utity Tweek to help you customize your UI.   Things don\u0026rsquo;t do  Something below is suggested not to do, because I assume you are Ubuntu or Linux beginner. I don\u0026rsquo;t wnat you to feel frustrated at the beginning of your Ubuntu desktop journey. It is the same that 99.9999% of Windows user should not delete cache files C:\\Windows or change the system registry, expect they really understand what they are doing.\n Don\u0026rsquo;t optimzie your memory setting. It is really not a big deal. Don\u0026rsquo;t try to change your Utity to other Ubuntu desktop, e.g. Ubuntu MATE, Ubuntu Xface, etc.\n Don\u0026rsquo;t follow the tips online to use root in terminal before you fully understand what the commands do. Don\u0026rsquo;t try to mount other drives on your computer, if it is mounted automatically.\n   Dual boot or multiple boot with Windows This section is for people who want to install multiple operating system on the actual PC, instead of virtual machine as above. Obviously, it is not for beginner user, but everyone must experience the first time to go to higher level. For safe side, I strongly suggest you should use a old PC or redundant one to test it.\n For dual or multiple boot, you need to make sure your disk is formatted as GPT. It will save you so much effort later to install other operating systems.\n I suggest Windows first approach for multiple boot systems, because that is easier than the other way around. After install Windows on your PC, you need to shrink Windows disk space for other operating systems with Disk Management.\n Now you need to prepare Ubuntu USB installer or DVD. Place the USB stick or DVD in the appropriate drive, reboot the machine and instruct the BIOS/UEFI to boot-up from the DVD/USB by pressing a special function key (usually F12, F10 or F2 depending on the vendor specifications).\n When you install Ubuntu, you need to select a separate boot drive for dual boot systems. Usually you just need to pick the drive efi as boot drive. Your drives will be supposed to format with GPT as following structure.\n  sda +----sda1 nfts 500M Windows recovery +----sda2 efi /boot 100M grub2 , Windows boot manager +----sda3 / 10M +----sda4 ntfs / 40000M Window 7/8/10 +----sda5 swap \u0026lt;Double size of your RAM size\u0026gt; +----sda6 ext4 / 20000M Ubuntu 14 desktop +----sda7 ext4 / 20000M Fedora 20 desktop +----sda8 ext4 / 20000M CentOS 6 desktop +----sda9 ext4 / 20000M OpenSuse desktop + ...  Troubleshooting: Windows always boots first Change BIOS * Start your PC by pressing a pressing a special function key (usually F12, F10 or F2 depending on the vendor specifications). * Some PC\u0026rsquo;s BIOS has BOOT tab option, open the BOOT tab, you will find the OS Boot Manager. It is the simplest way to fix the issue. If your PC\u0026rsquo;s BIOS has no such setting feature, you need to check the next section.\nChange the Windows Boot Manager * Login windows with common prompt * Restart windows, meanwhile press shift key * In the options page, choose change to other options * Troubleshooting * Command Prompt * Login in Windows with Common prompt * Use BCDEdit to change windows boot manager. Change to boot ubuntu at first\nREM backup bcdedit /enum \u0026gt; X:\\Users\\public\\documents\\bcdedit.txt REM change the bootmgr bcdedit /set {bootmgr} path \\EFI\\ubuntu\\grubx64.efi   After you reboot system, you will see the Grub 2 menu as follow.  GNU GRUB version 2.0 ---------------------------------------------------------------------------------- | Ubuntu | Advanced options for Unbuntu | Windows Boot Manager ( on /dev/sda2 ) | Fedora 20 | Advanced options for Fedora 20 | OpenSuse | Advanced options for OpenSuse | ....  "
},
{
	"uri": "/os/ubuntu-desktop-14-extra-tools/",
	"title": "Ubuntu 14 -- desktop, extra tools",
	"tags": ["linux", "ubuntu", "centos"],
	"description": "",
	"content": " Prerequisites  Install Ubunt 14 Desktop Internet is availble  Install chrome wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i google-chrome-stable_current_amd64.deb  Install Umake sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make sudo apt-get update sudo apt-get install ubuntu-make  Install IDEs via Umake umake ide pycharm umake web visual-studio-code umake android android-studio  General prerequest sed -i \u0026quot;/^## deb .*partner/ s/^## //\u0026quot; /etc/apt/sources.list \u0026amp;\u0026amp; apt-get update sudo apt-get install geany byobu p7zip-full gimp pdfshuffler scribus \\ filezilla lftp ubuntu-restricted-extras vlc pyrenamer \\ imagemagick hugin darktable skype avidemux  Remove Games sudo apt-get remove aisleriot gnome-mahjongg gnomine gnome-sudoku  Geany themes cd ~/Downloads git clone https://github.com/codebrainz/geany-themes.git mkdir ~/.config/geany/colorschemes cp ~/Downloads/geany-themes/colorschemes/* ~/.config/geany/colorschemes/ rm -rf ~/Downloads/geany-themes  Cloud  from: http://www.webupd8.org/2014/06/install-copycom-client-in-ubuntu-or.html\n sudo add-apt-repository ppa:paolorotolo/copy sudo apt-get update sudo apt-get install copy sudo /opt/copy-client/CopyAgent -installOverlay nautilus -q copy  Data processing sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9 sudo add-apt-repository 'deb http://star-www.st-andrews.ac.uk/cran/bin/linux/ubuntu trusty/' sudo apt-get update sudo apt-get install spyder python-numpy python-numpy-doc sqlite3 \\ python-scipy python-matplotlib python-matplotlib-doc r-base git-core  Don\u0026rsquo;t forget to use your own name and email! git config --global user.name \u0026quot;Your Name\u0026quot; git config --global user.email \u0026quot;your@email.com\u0026quot;  Maps and GIS software sudo apt-get install python-software-properties sudo add-apt-repository 'deb http://qgis.org/debian trusty main' gpg --keyserver keyserver.ubuntu.com --recv DD45F6C3 gpg --export --armor DD45F6C3 | sudo apt-key add - sudo apt-get update sudo apt-get install qgis python-qgis qgis-plugin-grass grass-gui grass-doc \\ libgdal1-dev libproj-dev gpsbabel  Latex type stuff sudo apt-get install jabref ibus-qt4 texlive texlive-latex-extra \\ texlive-humanities texlive-fonts-extra latex-beamer sudo apt-get -f install  Package download and install (Texmaker and RStudio) wget http://www.xm1math.net/texmaker/texmaker_ubuntu_14.04_4.4.1_amd64.deb wget http://download1.rstudio.org/rstudio-0.98.1102-amd64.deb sudo dpkg -i *.deb sudo rm *.deb sudo apt-get update \u0026amp;\u0026amp; apt-get upgrade sudo apt-get autoremove  sudo nano /etc/update-manager/release-upgrades  "
},
{
	"uri": "/frameworks/python-django/",
	"title": "Python Web Framework",
	"tags": ["python"],
	"description": "Introduction of Django - Most popular python web framework",
	"content": " Install Python \u0026amp; pip \u0026amp; virtualenv  Windows: Please find in from Home Page Ubuntu: Please find it from Ubuntu setup Python 3.4 (released March 2014) and Python 2.7.9 (released December 2014) ship with Pip. You can simply use pip or pip3 install any package you need.  Install Django Windows\n Install django  create a folder virtualenvs within the location of python 3 create a new virtualenv named django18 Activate the new virtual env Install Django 1.x.x (LTS version )   cd /path/to/python3 cd virtualenvs virtualenv django18 cd django18 Scripts\\activate which python pip install django==1.x.x  Create django project  SET PATH in current command promp Navigate to workspace folder Create new django project Start the app  SET PATH=c:\\apps\\python3\\virtualenvs\\django18\\Script;%PATH% which django-admin cd c:\\ws\\python\\django\\ django-admin startproject demo cd demo python manage.py runserver   Create a new app module  python manage.py startapp main\n Create a new db  ** following commands are just tested in django 1.8\npython manage.py syncdb python manage.py makemigrations new_app ## migrate pyrhon manage.py sqlmigrate new_app 0001 ## migrate python manage.py migrate new_app 0001   use python shell Model API  python manage.py shell \u0026gt;\u0026gt;\u0026gt; from XXX.models import ModelClass \u0026gt;\u0026gt;\u0026gt; ModelClass.objects.all() \u0026gt;\u0026gt;\u0026gt; ModelClass.objects.get(pk =1 ) \u0026gt;\u0026gt;\u0026gt; ModelClass.objects.filter( fieldName1=\u0026quot;abc\u0026quot;) \u0026gt;\u0026gt;\u0026gt; mc = new ModelClass.( fieldName1 = \u0026quot;abc\u0026quot;, fieldName2=\u0026quot;def\u0026quot;, fieldName3 = 3 ) \u0026gt;\u0026gt;\u0026gt; mc.save() \u0026gt;\u0026gt;\u0026gt; mc = ModelClass.objects.get(pd=1) \u0026gt;\u0026gt;\u0026gt; mc.delete()  Linux\npip install virtualenv pip3 install virtualenv cd ~ mkdir .envs ## create python2 env virtualenv -p /usr/bin/python2.7 py2env virtualenv -p /usr/bin/python3.4 py3env cd py2env source bin/activate ## Check python path which python ## Exit deactivate   Activate virtual environment need to use source instead of executing sh file  "
},
{
	"uri": "/hacks/use-windows-command-hotkey-as-hacker-3/",
	"title": "Windows command &amp; hotkey - 3",
	"tags": ["windows", "cmd"],
	"description": "A note for everyone who wants to use Commnd and Hot Key as hacker ...",
	"content": " This article will continue the topic of Windows command \u0026amp; hotkeys. Part-1 shows you common hotkeys and short command lines for Run windnow dialog. Part-2 advanced commands and how to create a batch script with all those commands. Here I am going to show you another secret weapon in Windows system-VBScript/JScript\nBreif history  VBScript/JScript is an Active Scripting language developed by Microsoft that is modeled on Visual Basic. It allows Microsoft Windows system administrators to generate powerful tools for managing computers with error handling, subroutines, and other advanced programming constructs.\nA VBScript script must be executed within a host environment, of which there are several provided with Microsoft Windows, including: Windows Script Host (WSH), Internet Explorer (IE), and Internet Information Services (IIS). VBScript uses the Component Object Model to access elements of the environment within which it is running.\nJScript is Microsoft\u0026rsquo;s dialect of the ECMAScript standard that is used in Microsoft\u0026rsquo;s Internet Explorer. JScript is implemented as an Active Scripting engine. This means that it can be \u0026ldquo;plugged in\u0026rdquo; to OLE Automation applications that support Active Scripting, such as Internet Explorer, Active Server Pages, and Windows Script Host.\nWith Cscript.exe, you can run scripts by typing the name of a script file at the command prompt. Like Microsoft Internet Explorer, Windows Script Host serves as a controller of Windows Script compliant scripting engines, but Windows Script Host has very low memory requirements. Windows Script Host is ideal for both interactive and non-interactive scripting needs, such as logon scripting and administrative scripting.\n Sample of VBScript file Set oFSO = CreateObject(\u0026quot;Scripting.FileSystemObject\u0026quot;^) Set oInput = oFSO.OpenTextFile(WScript.Arguments(0^), 1^) sData = Replace(oInput.ReadAll, \u0026quot;,\u0026quot; ^\u0026amp; VbCrLf, VbCrLf^) Set oOutput = oFSO.CreateTextFile(WScript.Arguments(1^), True^) oOutput.Write sData oInput.Close oOutput.Close  Replace content script  Create a file named repltxt.bat Copy the code into the file repltxt.bat Run the script  @if (@X)==(@Y) @end /* Harmless hybrid line that begins a JScript comment ::************ Documentation *********** ::NEWREPL.BAT version 1.0 ::: :::NEWREPL Search replace :::NEWREPL /? :::NEWREPL /V @echo off if .%2 equ . ( if \u0026quot;%~1\u0026quot; equ \u0026quot;/?\u0026quot; ( echo.\u0026quot;%~f0\u0026quot; \u0026lt;\u0026quot;%~f0\u0026quot; cscript //E:JScript //nologo \u0026quot;%~f0\u0026quot; \u0026quot;^:::\u0026quot; \u0026quot;\u0026quot; a exit /b 0 ) else if /i \u0026quot;%~1\u0026quot; equ \u0026quot;/V\u0026quot; ( \u0026lt;\u0026quot;%~f0\u0026quot; cscript //E:JScript //nologo \u0026quot;%~f0\u0026quot; \u0026quot;^::(NEWREPL\\.BAT version)\u0026quot; \u0026quot;$1\u0026quot; a exit /b 0 ) else ( call :err \u0026quot;Insufficient arguments\u0026quot; exit /b 2 ) ) cscript //E:JScript //nologo \u0026quot;%~f0\u0026quot; %* exit /b %errorlevel% :err \u0026gt;\u0026amp;2 echo ERROR: %~1. Use newrepl /? to get help. exit /b ************* JScript portion **********/ var rtn=1; try { var env=WScript.CreateObject(\u0026quot;WScript.Shell\u0026quot;).Environment(\u0026quot;Process\u0026quot;); var args=WScript.Arguments; var search=args.Item(0); var replace=args.Item(1); var options=\u0026quot;g\u0026quot;; if (args.length\u0026gt;2) options+=args.Item(2).toLowerCase(); var alterations=(options.indexOf(\u0026quot;a\u0026quot;)\u0026gt;=0); if (alterations) options=options.replace(/a/g,\u0026quot;\u0026quot;); if (options.indexOf(\u0026quot;v\u0026quot;)\u0026gt;=0) { options=options.replace(/v/g,\u0026quot;\u0026quot;); search=env(search); replace=env(replace); } var search=new RegExp(search,options); var str1, str2; while (!WScript.StdIn.AtEndOfStream) { str1=WScript.StdIn.ReadLine(); str2=str1.replace(search,replace); if (!alterations || str1!=str2) WScript.Stdout.WriteLine(str2); if (str1!=str2) rtn=0; } } catch(e) { WScript.Stderr.WriteLine(\u0026quot;JScript runtime error: \u0026quot;+e.message); rtn=3; } WScript.Quit(rtn);  The sample above is a bit complicated, and it is combination of Batch script and JScript. The batch script part checks and validate the input arguments, if there is no issue, then it will trigger the JScript to complete the work.\nTroubleshooting From the Windows 7 and on, Windows is no longer to recognize the file with suffix \u0026ldquo;vbs\u0026rdquo; as executable file. You need to change the add \u0026ldquo;vbs\u0026rdquo; to Windows\u0026rsquo;s registory.\n"
},
{
	"uri": "/blogs/javascript-oop/",
	"title": "JavaScript and OOP",
	"tags": [],
	"description": "How to power JavaScript with Object Oriendted Programming ... ",
	"content": " Prerequisites  You should have basic knowledge of Javascript and Object Oriented Programming. You should know how to test sample code on Chrome or Firefox. It is simple, just open your browser and click F12, copy the code to console and then press Enter.\n  What is JavaScript?  JavaScript, not to be confused with Java, was created in 10 days in May 1995 by Brendan Eich, then working at Netscape and now of Mozilla. The original name of this language was Mocha, in September of 1995 it was changed to LiveScript, then in December of the same year, the name JavaScript was adopted, because of very popular Java around then.\n JavaScript is the programming language of the web, mobile, back-end API, etc.. It’s one of the most popular and in demand skills in today’s job market for good reason. As a software developer, it is essential that you have a solid understanding of this versatile language.\n  What is OOP?  Object-oriented programming (OOP) is a programming paradigm based on the concept of \u0026ldquo;objects\u0026rdquo;, which may contain data, in the form of fields, as known as attributes or properties; and actions, in the form of functions, as known as methods.\nFor example, Car is an object. The color and model of the car are attributes. Then accelerate to 60km/h, brake to 0km/h, and turn left or right of the car are the actions. From this sample, you can tell OOP makes the code more close to the real world. That is why it is most popular paradigm for developing buisness application.\n Data types The JavaScript (ECMAScript) standard defines six data types. Five are primitives, including Boolean, Null, Undefined, Number, String, and Object. In JavaScript, most things are objects, from core JavaScript features like strings and arrays to the browser APIs built on top of JavaScript. You can even create your own objects to encapsulate related functions and variables into efficient packages, and act as handy data containers. The object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language, therefore we\u0026rsquo;ve provided this module to help you. Here we teach object theory and syntax in detail, then look at how to create your own objects.\nObject and prototype How to define a object\nThere are a couple ways to create variable as object.\nvar obj1 = {}; var obj2 = new Object(); var obj3 = Object.create(null); console.log( obj ); console.log( obj2 ); console.log( obj3 ); /* output: object {} object {} object {} */  Object type gives developers so much power and flexibility to customize their own data type. All JavaScript objects inherit the properties and methods from their prototype. The Object.prototype is on the top of the prototype chain. All JavaScript objects (Date, Array, RegExp, Function, \u0026hellip;.) inherit from the Object.prototype.\n Object has properties and method. Object\u0026rsquo;s method are the actions that can be performed on objects, they are one of most powerful feature for developers. Let\u0026rsquo;s see how we can create object with properties and methods.\n Create three cars with basic object usage.\n  var car1 = { color: 'red', make:'Toyota', model:'Sedan', getInfo: function (){ console.log( this ); }}; var car2 = { color: 'black', make:'BMW', model:'Coupe', getInfo: function (){ console.log( this ); }}; var car3 = { color: 'white', make:'Subaru', model:'SUV', getInfo:function (){ console.log( this ); }}; car1.getInfo(); car2.getInfo(); car3.getInfo(); /* Output: Object {color: \u0026quot;red\u0026quot;, make: \u0026quot;Toyota\u0026quot;, model: \u0026quot;Sedan\u0026quot;} Object {color: \u0026quot;black\u0026quot;, make: \u0026quot;BMW\u0026quot;, model: \u0026quot;Coupe\u0026quot;} Object {color: \u0026quot;white\u0026quot;, make: \u0026quot;Subaru\u0026quot;, model: \u0026quot;SUV\u0026quot;} */   You will find the same method defined in every object. Can we make it better to just define the method once? The answer is Yes. Use an object constructor to create an object prototype. Any new object inherit the same propotype will have the same properties and methods.  var Car = function(color, make, model, getInfo ) { this.color=''; this.make=''; this.model=''; this.getInfo= function( time ){ console.log( this ); }; }; var car1 = new Car('red','Toyota','Sedan'); var car2 = new Car('black','BMW', 'Coupe'); var car3 = new Car('white','Subaru','SUV'); car1.getInfo(); car2.getInfo(); car3.getInfo();   You will get same result as before. If you compare two blocks of code, you may think the second way has more code than the first one. Let\u0026rsquo;s image if you need to create 20 objects and every object with 20 methods, then you totaly need to write 20 X 20 = 400 methods. Object\u0026rsquo;s prototype is powerful, but we need to be careful when we want to use it, especially the this prototype. We need discuss this more in detail.\n Other sample of prototype\n  var Car = function(color, make, model ) { this.color=''; this.make=''; this.model=''; }; Car.prototype = { getInfo : function( ){ console.log( this ); } }; var car1 = new Car('red','Toyota','Sedan'); var car2 = new Car('black','BMW', 'Coupe'); var car3 = new Car('white','Subaru','SUV'); car1.getInfo(); car2.getInfo(); car3.getInfo();   The last way to use prototype is kind of verbose. The second one is more concise and nice is most popular paradigm.  Class and inheritance JavaScript has no built-in way of creating or implementing interfaces. It also lacks built-in methods for determining whether an object implements the same set of methods as another object, making it difficult to use objects interchangeably. Luckily, JavaScript is extremely flexible, making it easy to add these features.\nJavaScript has no built-in way of creating or implementing interfaces. It also lacks built-in methods for determining whether an object implements the same set of methods as another object, making it difficult to use objects interchangeably. Luckily, JavaScript is extremely flexible, making it easy to add these features.\nInheritance issue in Javascript\nfunction Pet() { this.name = \u0026quot;\u0026quot;; this.species = \u0026quot;\u0026quot;; this.offsprings = []; this.setName = function ( name ) { this.name = name ;}; this.deliverBaby = function( obj ){ this.offsprings.push( obj ); } this.getInfo = function (){ console.log( \u0026quot; species: \u0026quot;,this.species, \u0026quot; name: \u0026quot; ,this.name ); console.log( \u0026quot; has \u0026quot;, this.offsprings.length ,\u0026quot; offsprings \u0026quot;); } }; function Dog() { }; Dog.prototype = new Pet(); Dog.prototype.species = \u0026quot;Dog\u0026quot;; var dog1 = Object.create(new Dog()); dog1.setName ( \u0026quot;Polly\u0026quot;); var dog2 = new Dog(); dog2.setName ( \u0026quot;Lulu\u0026quot;); dog1.deliverBaby( new Dog()); dog2.deliverBaby( new Dog()); dog1.getInfo(); dog2.getInfo(); /* output : species: Dog name: Polly has 2 offsprings \u0026lt;- It is wrong. It should be 1 only. species: Dog name: Lulu has 2 offsprings \u0026lt;- It is wrong. It should be 1 only. */  You can tell there is something wrong with the prototype and constructor at a glance. It really confused many developers with C++/Java OOP backgroud. The sample code looks fine, but it doesn\u0026rsquo;t work as other OOP programming language. It is your and Brendan Eich\u0026rsquo;s problem, because he was told to make JavaScript look like Java, even there is no built-in OO mechanism at the beginning. This just looks like an odd way of doing class-based OOP without real classes, and leaves the programmer wondering why they didn’t implement proper class-based OOP. JavaScript keeps using constructor, which obscured JavaScript’s true prototypal nature. It turns out most developers don\u0026rsquo;t know how to use it properly and efficiently, including myself at the early stage.\nFunction is first-class citizen in JavaScript world, but it’s not really a class. We need to understand the constructor creates an empty object, then sets the prototype of empty object to the prototype property of the constructor, then set constructor function with this pointing to the newly-created object, and finally returns the object. You will get more confused after you see this definition. Let\u0026rsquo;s us create a simple sample and take a close look why the constructor and prototype will cause this problem.\nvar MyClass = function(){ this.name = 'MyClass'; this.getInfo = function ( ){ console.log( this ); } } MyClass.prototype.propObject = { id: 0, property: 'property' } var objectA = new MyClass(); var objectB = new MyClass(); console.log( 'object A:', objectA.name , 'object B:', objectB.name ); console.log( 'MyClass.prototype === objectA.constructor.prototype ? ', MyClass.prototype === objectA.constructor.prototype ); console.log( 'MyClass.prototype === objectB.constructor.prototype ? ', MyClass.prototype === objectB.constructor.prototype ); console.log( \u0026quot; objectA.propObject : \u0026quot;, objectA.propObject , \u0026quot; objectB.propObject : \u0026quot;, objectB.propObject ); objectA.propObject.id = 1; objectA.propObject.property = 'AAA'; console.log( \u0026quot; objectA.propObject : \u0026quot;, objectA.propObject, \u0026quot; objectB.propObject : \u0026quot;, objectB.propObject ); /* output : MyClass object B: MyClass MyClass.prototype === objectA.constructor.prototype ? true MyClass.prototype === objectB.constructor.prototype ? true objectA.propObject : Object {id: 0, property: \u0026quot;property\u0026quot;} objectB.propObject : Object {id: 0, property: \u0026quot;property\u0026quot;} objectA.propObject : Object {id: 1, property: \u0026quot;AAA\u0026quot;} objectB.propObject : Object {id: 1, property: \u0026quot;AAA\u0026quot;} */  If we draw a diagram of above sample, you will see what is happening behind the scene. Since the prototype property is a reference, changing the prototype object’s properties at runtime will affect all objects using the prototype.\n+------------+ | MyClass | +---- objectA.prototype | prototype\u0026lt;----------| | | +---- objectB.prototype +------------+  Now we figure out the root cause. You will say it is easy to fix. We just need to create new prototype for each object, and clone the properties and methods from supper class. Yes, you are right, but it is not I want to recommand to you. First, we need to see if we really inheritance, secondly, if it is better to maintain if use inheritance.\nIf we still want to use inheritance, I will suggest not to just inherit the properties, instead of methods. In my opinion, there is very rare of scenario, we really need to inherit method. So we just need to find to proper way to solve the problem of properties inheritance.\nObject-based Inheritance function Pet(name, master) { this.name = name || \u0026quot;\u0026quot;; this.species = \u0026quot;\u0026quot;; this.master = master || { name: '', gender: '' }; this.offsprings = []; this.deliverBaby= function ( obj) { this.offsprings.push(obj); }, this.getInfo = function () { console.log(\u0026quot; species: \u0026quot;, this.species, \u0026quot; name: \u0026quot;, this.name, \u0026quot; master : \u0026quot;, this.master.name, \u0026quot; \u0026quot;, this.master.gender); this.offsprings.forEach(function (e) { console.log(\u0026quot; has baby : \u0026quot;, e.name, \u0026quot; \u0026quot;, e.species); }); } } function Dog(name, master) { Pet.call(this, name, master); this.mother = null; this.species = \u0026quot;Dog\u0026quot;; } var dog1 = new Dog('Polly'); dog1.master = { name: 'John', gender: 'M' }; var dog2 = new Dog('Lulu', { name: 'Ada', gender: 'F' }); dog1.deliverBaby(new Dog('Polly-Baby-Dog')); dog2.deliverBaby(new Dog('Lulu-Baby-Dog')); dog2.deliverBaby(new Dog('Lulu-Baby-Dog-2')); dog1.getInfo(); dog2.getInfo(); /* output: Dog name: Polly master : John M has baby : Polly-Baby-Dog Dog species: Dog name: Lulu master : Ada F has baby : Lulu-Baby-Dog Dog has baby : Lulu-Baby-Dog-2 Dog */  After you test, would you ask: \u0026ldquo;what? how this works? It looks share the same prototype with this\u0026rdquo;? Actually the problem is the special object this in Javascript, which is one of the most misunderstood parts of JavaScript. Today it still confuses many other JS developers. If you have experience with other JavaScript framework. You will find many samples which use that , self, vm to replace the built-in this. e.g. var that = {}, var self = {},etc. Let\u0026rsquo;s see the new version of above sample code.\nfunction Pet(name, master) { var self = {}; self.name = name || \u0026quot;\u0026quot;; self.species = \u0026quot;\u0026quot;; self.master = master || { name: '', gender: '' }; self.offsprings = []; return self; } function Dog(name, master) { var self = {}; Pet.call(self, name, master); self.species = \u0026quot;Dog\u0026quot;; self.prototype = this.constructor.prototype; return self; } Dog.prototype = { deliverBaby: function ( self, obj) { self.offsprings.push(obj); }, getInfo: function (self) { console.log(\u0026quot; species: \u0026quot;, self.species, \u0026quot; name: \u0026quot;, self.name, \u0026quot; master : \u0026quot;, self.master.name, \u0026quot; \u0026quot;, this.master.gender); self.offsprings.forEach(function (e) { console.log(\u0026quot; has baby : \u0026quot;, e.name, \u0026quot; \u0026quot;, e.species); }); } }; var dog1 = new Dog('Polly'); dog1.master = { name: 'John', gender: 'M' }; var dog2 = new Dog('Lulu', { name: 'Ada', gender: 'F' }); dog1.deliverBaby(dog1, new Dog('Polly-Baby-Dog')); dog2.deliverBaby(dog2, new Dog('Lulu-Baby-Dog')); dog2.deliverBaby(dog2, new Dog('Lulu-Baby-Dog-2')); dog1.getInfo(); dog2.getInfo();  Now I rewrite above sample a few lines of code, then you will figour out why it is working, but maybe you still want to implement inheritance as other OOP lanuage C++, Java. Then let\u0026rsquo;s take a look the classical inheritance, which is much more close to other OOP language. In classical inheritance it\u0026rsquo;s impossible (or at least very difficult) to choose which properties you want to inherit. They use virtual base classes and interfaces to solve the diamond problem. It is much more complicated.\nClassical inheritance function extend(subClass, superClass) { var F = function () {}; F.prototype = superClass.prototype; subClass.prototype = new F(); subClass.prototype.constructor = subClass; subClass.superclass = superClass.prototype; if (superClass.prototype.constructor == Object.prototype.constructor) { superClass.prototype.constructor = superClass; } } function Pet(name, master) { this.name = name || \u0026quot;\u0026quot;; this.species = \u0026quot;\u0026quot;; this.master = master || { name: '', gender: '' }; this.offsprings = []; } Pet.prototype.deliverBaby = function (obj) { this.offsprings.push(obj); }; Pet.prototype.getInfo = function () { console.log(\u0026quot; species: \u0026quot;, self.species, \u0026quot; name: \u0026quot;, self.name, \u0026quot; master : \u0026quot;, self.master.name, \u0026quot; \u0026quot;, this.master.gender); this.offsprings.forEach(function (e) { console.log(\u0026quot; has baby : \u0026quot;, e.name, \u0026quot; \u0026quot;, e.species); }); } function Dog(name, master) { Dog.superclass.constructor.call(this, name, master); this.species = \u0026quot;Dog\u0026quot;; } extend(Dog, Pet); Dog.prototype.getInfo = function () { console.log(\u0026quot; Override --- \u0026quot; ); Dog.superclass.getInfo.call(this) ; }; var dog1 = new Dog('Polly'); dog1.master = { name: 'John', gender: 'M' }; var dog2 = new Dog('Lulu', { name: 'Ada', gender: 'F' }); dog1.deliverBaby(new Dog('Polly-Baby-Dog')); dog2.deliverBaby(new Dog('Lulu-Baby-Dog')); dog2.deliverBaby(new Dog('Lulu-Baby-Dog-2')); dog1.getInfo(); dog2.getInfo();  Most programmers who come from a classical background argue that classical inheritance is more powerful than prototypal inheritance. The truth is that prototypal inheritance supports inheriting from multiple prototypes. Prototypal inheritance simply means one object inheriting from another object.\nWhether classical or prototypal, is used to reduce the redundancy in code. Since prototypal inheritance allows for multiple inheritance, code which requires multiple inheritance is less redundant if written using prototypal inheritance rather than in a language which has classical inheritance but no multiple inheritance.\nPrototypal inheritance function clone(obj) { if (obj === null || typeof obj !== 'object') { return obj; } var temp = obj.constructor(); // give temp the original obj's constructor for (var key in obj) { temp[key] = clone(obj[key]); } return temp; } var Pet = { name: \u0026quot;\u0026quot;, species: \u0026quot;\u0026quot;, master: { name: '', gender: '' }, offsprings: [], deliverBaby: function (obj) { this.offsprings.push(obj); }, getInfo: function () { console.log(\u0026quot; species: \u0026quot;, this.species, \u0026quot; name: \u0026quot;, name, \u0026quot; master : \u0026quot;, this.master.name, \u0026quot; \u0026quot;, this.master.gender); this.offsprings.forEach(function (e) { console.log(\u0026quot; has baby : \u0026quot;, e.name, \u0026quot; \u0026quot;, e.species); }); } }; var Dog = clone(Pet); Dog.species = 'Dog'; Dog.getInfo = function () { console.log(\u0026quot; Override -- species: \u0026quot;, this.species, \u0026quot; name: \u0026quot;, this.name, \u0026quot; master : \u0026quot;, this.master.name, \u0026quot; \u0026quot;, this.master.gender); this.offsprings.forEach(function (e) { console.log(\u0026quot; has baby : \u0026quot;, e.name, \u0026quot; \u0026quot;, e.species); }); }; var dog1 = clone(Dog); var dog2 = clone(Dog); dog1.name = 'Polly'; dog1.master = { name: 'John', gender: 'M' }; dog2.name = 'Lulu'; dog2.master = { name: 'Ada', gender: 'F' }; var dog11 = clone(Dog); dog11.name = 'Polly-Baby-Dog'; var dog21 = clone(Dog); var dog22 = clone(Dog); dog21.name = 'Lulu-Baby-Dog'; dog22.name = 'Lulu-Baby-Dog-2'; dog1.deliverBaby(dog11); dog2.deliverBaby(dog21); dog2.deliverBaby(dog22); dog1.getInfo(); dog2.getInfo();  One of the most important advantages of prototypal inheritance is that you can add new properties to prototypes after they are created. This allows you to add new methods to a prototype which will be automatically made available to all the objects which delegate to that prototype. This allows you to add new methods to a prototype which will be automatically made available to all the objects which delegate to that prototype.This is not possible in classical inheritance because once a class is created you can\u0026rsquo;t modify it at runtime. This is probably the single biggest advantage of prototypal inheritance over classical inheritance, and it should have been at the top.\nModule and namespace There are quite a lot of benefits from module and namespace, especially when you are going to build some special common api shared within the whole application, even multiple systems across your whole entire enterprise. First thing first, we should not pollute the context, since it will potentially break existing functions or other third party frameworks which have been introduced in your applicatio, vice versa.\nOn the other hand, it is a good way to create reusable component, and it is easily for further enhancement, or maybe maintenance. JavaScript is very easy to create a module. One of the most widely used design patterns in JavaScript is the module pattern.\nClosure The module pattern makes use of one of the nicer features of JavaScript – closures – in order to give you some control of the privacy of your methods so that third party applications cannot access private data or override it.\n Simple closure\n  var closureObject = (function() { var _privateProperty = 'private'; var _privateMethod = function () { console.log( ' private method '); }; return { publicProperty: 'Public Property', publicMethod: function() { console.log( ' Call ', _privateMethod() , ' from public method '); }, setPrivateProperty: function ( newValue ){ _privateProperty= newValue; }, getPrivateProperty: function( ){ return _privateProperty; } } }()); console.log( closureObject.publicProperty ); console.log( closureObject._privateProperty ); // console.log( closureObject._privateMethod() ); // This will cause Uncaught TypeError console.log( closureObject.getPrivateProperty() ); closureObject.setPrivateProperty( 'public'); console.log( closureObject.getPrivateProperty() ); /* output: Public Property undefined //--\u0026gt; privateProperty can not be accessed directly private public //--\u0026gt; privateProperty can be updated by public method */  From above sample code, you can the JavaScript can easily implement the encapsulation as OOP language. Closure is the base the module pattern, and module is the base of namespace. Maybe you will wonder why we need module and namespace,just closure is good enough for us control the API. If we take a second thought we will realize if some application has the same object called closureObject, both will crash at run time. As a simple solution, we can make a very long, different and ridiculous name to avoid the conflict, but it is not a nice solution. Then module turns out as a better way to solve this problem.\nModule Module is not rock science. Actually it is quite easy to implement.\n Simple module sample  var myModule = (function(undefined) { var _privateProperty = 'private'; var _privateMethod = function () { console.log( ' private method '); }; return { publicProperty: 'Public Property', publicMethod: function() { console.log( ' Call ', _privateMethod() , ' from public method '); }, setPrivateProperty: function ( newValue ){ _privateProperty= newValue; }, getPrivateProperty: function( ){ return _privateProperty; } } }());  You may say \u0026ldquo;What? closure is module.\u0026rdquo; Yes, you can say that. The little difference is the auguements during auto initialization. By having an function argument undefined (the name actually does not matter) which you don\u0026rsquo;t pass a parameter to, you could make sure you have a variable which really is undefined. This technique ensures that it will work as expected, in case it will be excluded to unintential amendment by other script.\nOnce we create our module, we can simply extend the module with the same technique.\n Module\u0026rsquo;s extension with override or new api  var myModule = (function() { .... }()); var extendModule = (function( m){ m.publicMethod = function ( newArgument ) { // overload publicMethod // TODO }; m.newApi = function () { // // TODO }; }(myModule));  Namespace Now we will go further to namespace, which is based on module technique. Namespace gives you the ability to have public and private properties and methods. The code inside doesn’t use the Object Literal notation. Allows you to use $ inside your code without worrying about clashing with other libraries Allows your library to grow across files using the “window.rtkns = window.rtkns || {}” technique A common pattern that you will see in many libraries, widgets, and plugins\n(function (rtkns, $, undefined) { rtkns.createNS = function (namespace) { var nsparts = namespace.split(\u0026quot;.\u0026quot;); var parent = rtkns; if (nsparts[0] === \u0026quot;rtkns\u0026quot;) { nsparts = nsparts.slice(1); } for (var i = 0; i \u0026lt; nsparts.length; i++) { var partname = nsparts[i]; if (typeof parent[partname] === \u0026quot;undefined\u0026quot;) { parent[partname] = {}; } parent = parent[partname]; } return parent; }; var clone = function(obj) { if (obj === null || typeof obj !== 'object') { return obj; } // give temp the original obj's constructor var temp = obj.constructor(); for (var key in obj) { temp[key] = clone(obj[key]); } return temp; }; rtkns.clone = clone; rtkns.createNS(\u0026quot;rtkns\u0026quot;); rtkns.utils = rtkns.createNS(\u0026quot;rtkns.utils\u0026quot;); rtkns.model = rtkns.createNS(\u0026quot;rtkns.model\u0026quot;); rtkns.model.entity = { id: 0, createdBy:'', modifiedBy:'', created: null, modified: null, }; var entity = rtkns.model.entity; rtkns.model.order = clone ( entity); var order = rtkns.model.order ; order.amount = 0; order.description = ''; rtkns.model.client = clone( entity); var client = rtkns.model.client ; client.name = ''; client.email = ''; client.orders = []; client.purchase = function ( order ){ this.orders.push( order ); }; rtkns.utils.toString = function (entity) { return entity?JSON.stringify(entity):entity; }; }(window.rtkns = window.rtkns || {})); var rtkns = window.rtkns; var client1 = rtkns.clone( rtkns.model.client ); client1.name = 'client 1'; client1.email = 'client1.email@test.com'; var client2 = rtkns.clone( rtkns.model.client ); client2.name = 'client 2'; client2.email = 'client2.email@test.com'; var order1 = rtkns.clone( rtkns.model.order ); order1.amount = 100; order1.description = 'order 1'; var order2 = rtkns.clone( rtkns.model.order ); order2.amount = 600; order2.description = 'order 2'; client1.purchase( order1 ); client2.purchase( order2 ); console.log(rtkns.utils.toString( client1)); console.log(rtkns.utils.toString( client2)); /* output: {\u0026quot;id\u0026quot;:0,\u0026quot;createdBy\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;modifiedBy\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;created\u0026quot;:null,\u0026quot;modified\u0026quot;:null, \u0026quot;name\u0026quot;:\u0026quot;client 1\u0026quot;,\u0026quot;email\u0026quot;:\u0026quot;client1.email@test.com\u0026quot;, \u0026quot;orders\u0026quot;:[{\u0026quot;id\u0026quot;:0,\u0026quot;createdBy\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;modifiedBy\u0026quot;:\u0026quot;\u0026quot;, \u0026quot;created\u0026quot;:null,\u0026quot;modified\u0026quot;:null, \u0026quot;amount\u0026quot;:100,\u0026quot;description\u0026quot;:\u0026quot;order 1\u0026quot;}]} {\u0026quot;id\u0026quot;:0,\u0026quot;createdBy\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;modifiedBy\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;created\u0026quot;:null,\u0026quot;modified\u0026quot;:null, \u0026quot;name\u0026quot;:\u0026quot;client 2\u0026quot;,\u0026quot;email\u0026quot;:\u0026quot;client2.email@test.com\u0026quot;, \u0026quot;orders\u0026quot;:[{\u0026quot;id\u0026quot;:0,\u0026quot;createdBy\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;modifiedBy\u0026quot;:\u0026quot;\u0026quot;, \u0026quot;created\u0026quot;:null,\u0026quot;modified\u0026quot;:null, \u0026quot;amount\u0026quot;:600,\u0026quot;description\u0026quot;:\u0026quot;order 2\u0026quot;}]} */  The sample above combine namespace and prototypal inheritance. Namespace allows you to add new module for enhancement, and it allows you to organize your API better. On the other hand, through the globle namespace you can inject customized service, or you can replace it. The disadvantage of namespace, when the source code blows up, it will be a bit more complicated, especially you break different into different files. Mock test or unit test will needs a bit more work to do as well. There is no pattern that is a Silver Bullet, but rather you should assess where you are at and examine the pros and cons of each pattern to address your situation.\nInterfaces An interface tells programmers what methods a given class implements, which makes it easier to use. Interfaces also stabilize the ways in which different classes can communicate.\nUsing any interface implementation in JavaScript will create a small performance hit, due in part to the overhead of having another method invocation.\nThe biggest drawback is that there is no way to force other programmers to respect the interfaces you have created. In JavaScript, you must manually ensure that a given class implements an interface. You can mitigate this problem by using coding conventions and helper classes, but it will never entirely go away. Everyone on your project must agree to use them and check for them; otherwise much of their value is lost.\nJavaScript does not come with built-in support for interfaces, and there is no Interface keyword, so any method you use to implement this will be very different from what languages such as C++, Java, and making it a little more difficult. JavaScript uses what\u0026rsquo;s called duck typing. (If it walks like a duck, and quacks like a duck, as far as JS cares, it\u0026rsquo;s a duck.) If your object has quack(), walk(), and fly() methods, code can use it wherever it expects an object that can walk, quack, and fly, without requiring the implementation of some \u0026ldquo;Duckable\u0026rdquo; interface.\nJavaScript will use Interface object to ensure if the new instance implements the same action as Interface object.\nvar Interface = function(interfaceName, interfaceMembers) { if (!(this instanceof Interface)) { return new Interface(interfaceName, interfaceMembers); } var interfaceObj = this; Object.keys(interfaceMembers).forEach(function(memberName) { interfaceObj[memberName] = function() { Interface.errorDetect(interfaceName, memberName); }; }); interfaceObj.name = interfaceName; return interfaceObj; }; Interface.errorDetect = function(interfaceName, interfaceMember) { throw Error('errorDetect: Class does not implement interface member ' + interfaceName + '.' + interfaceMember + '()'); }; Interface.ensureImplement = function(obj /*, interfaces */ ) { var interfaces = [].slice.call(arguments, 1); interfaces.forEach(function(_interface) { Object.keys(_interface).forEach(function(interfaceMember) { var isFunction = typeof _interface[interfaceMember] === 'function'; if (isFunction \u0026amp;\u0026amp; !obj[interfaceMember]) { Interface.errorDetect(_interface.name, interfaceMember); } }); }); return true; };  How to use this interface\n Samples below show you how the Interface can ensure the object implement multiple interfaces.  // Sample 1 with only one interface var ILog = Interface('ILog', { logInfo:function(){}, logWarning:function(){}, logError:function(){}, }); var loggerA = { logInfo:function(){}, logWarning:function(){}, logError:function(){}, }; // loggerB does not implement all methods var loggerB = { logInfo:function(){}, logWarning:function(){}, }; console.log(Interface.ensureImplement( loggerA, ILog)); console.log(Interface.ensureImplement( loggerB, ILog)); /* output: true Uncaught Error: errorDetect: Class does not implement interface member ILog.logError() ... */ // Sample 2 with 2 interfaces var Submarine = Interface('Submarine', { operateUnderwater:function(){} }); var Car = Interface('Car', { operateOnRoad:function(){} }); var SubmarineCar = { operateUnderwater:function(){}, operateOnRoad:function(){}, }; console.log(Interface.ensureImplement( SubmarineCar, Submarine, Car )); /** output: true */  "
},
{
	"uri": "/os/centos-fedora-desktop/",
	"title": "CentOS 6/7 Multi-Boot Setup",
	"tags": ["linux", "ubuntu", "centos"],
	"description": "",
	"content": " Bootable usb preparation  Download dvd iso from url or torrent Use Win32 Image Writer to create usb. ( Bootice is useful tool to reformat the USB as origin )\n Install CentOS on virtual machine  Before you install, you are better to backup anything on the device which you are going to install, and chcek your internet is working properly.\n CentOS provide a friendly and nice installation process. If you choose VMWare or VirtulBox as machine, you can open installation steps on your browser or use ipad /tablet to access this page. You just need to follow the instruction step by step, it will be done within an hour or more(it varies in computing power of PC).\n  Prepare VM for CentOS  Create a new virtual machine.\n Type in the name of vm. e.g. CentOS Select the type of Linux You can choose RedHat(32\u0026frasl;64 bit ) or something else. It doesn\u0026rsquo;t matter. We don\u0026rsquo;t use any built-in xxx.iso files from VirtualBox. Then click Next Select the memory size for the CentOS. It is up to you. I prefer 4GB, but 2GB is necessary. And then click Next. Select \u0026ldquo;Create a virtual hard drive now\u0026rdquo;, and then click Next. Select defaut VDI, then click Next. Select \u0026ldquo;Dynamically allocated\u0026rdquo;, then click Next.\n Choose the location of CentOS. e.g. c:\\vbox\\centos\\centos.vdi. Select the size of VDI file. At least 10G. I\u0026rsquo;d like to select 20 or more. Then a virtual machine of CentOS is created. Choose the location of CentOS. e.g. c:\\vm\\centos\\centos.vmdk. Select the size of VMDK file. At least 10G. I\u0026rsquo;d like to select 20 or more. Then a virtual machine of CentOS is created.  Config the CentOS hardware setting on VirtulBox or VMWare.\n  VirtualBox\n On VirtualBox toolbar, there is a Start button. Click Start, then go the Storage item. Under the Storage Tree section, there is Empty CD icon. Click the Empty icon.\n Under the Attributes section, click the CD icon at the end of the dropdown list of CD/DVD Drive. Choose the Unbuntu iso file which you download from Unbuntu.org. Click OK. Leave all the other setting as default. Click the Startbutton on the toolbar.  VMWare\n On VMware, you can find CD/DVD button on the tab page of new virtual machine. Click the CD button at the end of the dropdown list of CD/DVD Drive. Choose the Unbuntu iso file which you download from Unbuntu.org. Click OK. Leave all the other setting as default. Click the Power on this virtual machine option on the tab page.   Config CentOS default setting After the CentOS starts, we can config the default setting of CentOS. Don\u0026rsquo;t be panic, the configuration envrionment is very nice. You don\u0026rsquo;t need to type any command line so far.\n Prepare the installation.\n Choose the language of CentOS. Then click Continue. On the Installation Summary screen, there is warning icon attached to the hard drive icon, which is under SYSTEM section with a lable \u0026ldquo;INSTALLATION DESTINATION\u0026rdquo;. Click that label.\n You will see the partition is already done automatically. I\u0026rsquo;d like you to leave it as until you are familar with the CentOS. Then click Done button on the header. Leave the SOFTWARE SELECTION as Minimal Install; NETWORK \u0026amp; HOSTNAME as Not connected. Then click Begin Installation button.  Setup account\n Setup password of root account. Please remember the password. If you forget it you need to reset the root\u0026rsquo;s password. To do that you need to do a few things which depends on the CentOS version. As a beginner, please don\u0026rsquo;t make it too complicated. Create your account. e.g. harryporter Mark your account as administrator to save some effort. Please remember your password and don\u0026rsquo;t make it too complicated.\u0026rsquo; The progress of installation is complete. Click Finish configuration button. w$w4 d. After a few seconds, you will the Reboot button. Then click it.   Manage CentOS packages and software  there are two management tools rpm and yum. To make it easy, we just talk about yum. It is a very handy tool. Comparing with the windows built-in program management tool, it is much powerful than that. It provides necessary functions for admin. If you need to maintain the Linux server, then you will use it in your daily task. Use man yum to take a look the description of yum. You do not need to understand all usage of yum. Just have an overview is enough. There are a few useful and common yum commands.\n  yum list installed | less yum search \u0026lt;pacakge_name\u0026gt; yum grouplist  Install CentOS on PC or laptop Setup network ( via cable ) If you install a minimal version without network configuration, you will find you can not ping public domain. Here I am going to show you how to setup the connection.\n You can use ip a command to check the status of all network interface. You will see all the state of interfaces would be DOWN OR UNKNOWN.  ## lo **** qdisc pfifo_fast noqueue UNKNOWN ## eth0 **** qdisc pfifo_fast state DOWN   Use ## ifup eth0 to start the ech0 then you can access internet. It is a bit tedious to start the network service every time we reboot the system. Next step we will setup network service to start automatically after the system is up. There is a configuration file which can help you setup internet connection after the startup. Ususally the configuration is under this path /etc/sysconfig/network-scripts, and file name would ifcfg-eth\u0026lt;*\u0026gt;. So we check the real file name at first.  ls /etc/sysconfig/network-scripts/ifcfg-* ## Following are sample of files which will sit in your system. /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-lo  Now we need to update this file via nano or vi. If you have no any experience of vi, I recommended an interactive online tutorial for you. Just 20 mins, you can master basic vi usage. http://www.openvim.com/tutorial.html\nWe use vi to open the config file.\n## vi /etc/sysconfig/network-scripts/ifcfg-eth0  You will a setting below. ONBOOT=no\nYou just need to update it to ONBOOT=yes, then save it and reboot CentOS to test the result.\n## reboot  After you reboot and login CentOS, you can use ping to test if your system can access internet, then configuration is updated successful.\nSetup Wifi  Setup Wifi during the installation. After the installation, you will find the Wifi is not available on Cent OS Mount the DVD or iso file use yum to install the NetworkManager-wifi package  yum --disablerepo=\\* install /path/to/dvd/Packages/NetworkManager-wifi*  Multiple boot system ( Fedora, CentOS, Redhat ) Partition setup for multiple OS installation  Fedora, CentOS and Redhat share the almost the same installation process. Click on the Installation Destination icon to change this to custom partitioning Under the Other Storage Options, choose I will configure partitioning then click Done Following is sample of partition setup of multiple boot system.\n sda +----sda1 nfts 500M Windows recovery +----sda2 efi /boot 100M grub2 , Windows boot manager +----sda3 / 10M +----sda4 ntfs / 40000M Window 7/8/10 +----sda5 swap \u0026lt;Double size of your RAM size\u0026gt; +----sda6 ext4 / 20000M Ubuntu 14 desktop +----sda7 ext4 / 20000M Fedora 20 desktop +----sda8 ext4 / 20000M CentOS 6 desktop +----sda9 ext4 / 20000M OpenSuse desktop + ...  Troubleshooting ifconfig not found in CentOS minimal server Use command ip\nip addr ip -s link  Enable Network (Non-wifi) onboot after minimal installation If you cannot ping any domain, use dhclient -v to check if the internet is available.\nSetup the network enabled onboot\n## cd /etc/sysconfig/network-scripts/ ## sed -i -e 's@^ONBOOT=\u0026quot;no@ONBOOT=\u0026quot;yes@' ifcfg-e.xx.xxx  Boot CentOS in terminal ## cat /etc/inittab ## systemctl get-default graphic.target ## systemctl set-default multi-user.target  Fedora boot error  Please check the grub.cfg if you get booting error You can try following command to boot Fedora from Grub menu  linux /boot/vmluz-x.x.x-x.x.x initrd /boot/intrd-plymouth.img  "
},
{
	"uri": "/blogs/hello-world/",
	"title": "Do you have potential to be a programmer?",
	"tags": [],
	"description": "",
	"content": "  For many novices or beginners of software engineering or computer programming, they always question themselves like this \u0026ldquo;Do I have potential to be a programmer?\u0026rdquo; or \u0026ldquo;Should I choose programmer as my career?\u0026rdquo; or \u0026ldquo;Is it programmer right for me?\u0026rdquo;. I am pretty sure you can find tons of answers or advices online, but there is a simple answer for such question for any career. If you love what you do, then it is right for you. It brings another question, how do I know if I love it or not. Not everyone has chance to try different jobs before they are qualified.\nThere is a test created for this purpose. It is designed for people who have not enough programming skills but they want to know if they have such potential to be a programmer.\nThe test needs you to create a few \u0026ldquo;Hello World\u0026rdquo; programs as the samples below with different programming languages. The programming languages I pick can run on Windows, Mac or Linux/Unix. You should try to complete the test on your own. There is no time limit.\nHow much time you take to complete these programs or how many programs you can complete is not the purpose of this test, but you should try your best to complete as much as possible. I have to say it is not an easy task for most novices or beginners. Even you can\u0026rsquo;t complete all programs, it doesn\u0026rsquo;t mean you can\u0026rsquo;t be a great programmer. I believe everyone can learn or do anything if they love or enjoy it.\n So the test is to check if you really enjoy the process or problem-solving when you face to such challenges. If you always can learn something after you solve problem or you keep improving your skills during the test, it means you really love it and you can consider programmer as one of your future careers.\nIf you complete the test within 2 hours to one day from scratch, it means you already have capacity to be a programmer. It means the test is not designed for you.\nAssumptions  You have a proper computer instead of a tablet or ipad.\n You know how to download and install softwares on your computer.\n You know how to organize your folders and files.\n If you use Mac, the code for Linux should work on Mac as well. You know how to start a terminal on Mac or a command prompt on Windows. Finally, you are ready to get your hands dirty.\n  Bash/Batch script Bash is built-in script on Unix/Linux-like operating system. Bash script file is end with sh as extension. Batch is built-in script on Windows operating system. Bash script is known as one of Unix shell scripts. The other shell scrips include ksh, csh, zsh, etc. Bash is one of most important and powerful tool for system admin.\nBatch script file is end with bat as extension. On Windows there is another file end with cmd, it works the same as batch file. From November 2006, Microsoft create a new powerful language PowerShell, which is similar to Unix shells. Basically PowerShell has replaced Batch as first option for system admin.\n Unix/Linux\n Create a script file hello.sh with vi or nano  #!/bin/bash var=\u0026quot;Hello World!\u0026quot; echo $var   Change mode chmod 755 hello.sh Run the script ./hello.sh  Batch/Cmd (Windows)\n Create a script file hello.bat or hello.cmd with notepad  @echo off set var='Hello World!' echo.%var%   Run the script hello.bat or hello.cmd   C/C++ The C programming language was originally developed as a language to replace assembler in systems programming. It was very successful, making system code portable and easier to write and read. So Basically the kernel of most operating systems, Windows, Mac, Linux are coded in C.\nToday C is one of the most used programming languages. Since C was designed to replace assembler language, and that in several important ways, it retains a very low level view of the machine. The C++ programming language was designed as a higher level version of C, providing support for object-oriented programming. It gives developer more power to handle the problem of real world.\nWindows  Download and install C/C++ development and compiler. Instructions Create a program file hello.c or hello.cpp with codeblocks, vi or notepad\n#include\u0026lt;stdio.h\u0026gt; int main( ) { char var[] = \u0026quot;World\u0026quot;; printf( \u0026quot;Hello %s \\n Press any key to exit.\u0026quot;, var ); char key = getchar(); return 0; }   Unix/Linux Unix/Linux includes gcc by default. You just need to compile and run the console app. For Windows, you might need install another tool cygwin or MinGW\n``` g++ hello.c -o hello ./hello ```  C# C# is a multi-paradigm programming language encompassing strong typing, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines. In January 1999, Anders Hejlsberg formed a team to build a new language at the time called Cool, which stood for \u0026ldquo;C-like Object Oriented Language\u0026rdquo;. By the time the .NET project was publicly announced at the July 2000,Microsoft the language had been renamed C#.\nWindows  Download and install .net framework from Microsoft website Create a program file helloworld.cs\npublic class Hello { public static void Main() { System.Console.WriteLine(\u0026quot;Hello, World!\u0026quot;); } }  Compile with .net framework command.\n Run helloworld.exe file\nC:\\Windows\\Microsoft.NET\\Framework\\v3.5\\csc.exe helloworld.cs helloworld.exe   Linux/Mac Mono  Download and install mono framework and IDE for Linux or Mac from here Create a program file helloworld.cs as above in the IDE and run  .Net Core  Download and install .Net Core framework for Linux or mac from here Follow the instructions to create a \u0026ldquo;Hello World\u0026rdquo; app  Go Go ,as known as golang, is a free and open source programming language created at Google. It is a compiled, statically typed language in the tradition of Algol and C, with garbage collection, expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction.\n Download Go binary from www.golang.org Follow the instruction to install golang on your computer Create a program file hello.go\npackage main import \u0026quot;fmt\u0026quot; func main() { fmt.Println(\u0026quot;hello world\u0026quot;) }  Compile \u0026amp; run go run hello.go\n  Java Java is a general-purpose computer programming language that is concurrent, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \u0026ldquo;write once, run anywhere\u0026rdquo;, meaning that compiled Java code can run on all platforms with JVM without the need for recompilation.\n Download and install Java JDK 8\n For any Ubuntu 12 or higher version I recommand you follow this instruction. It is pretty simple. For CentOS 6 or higher version, please follow this instruction For Windows please make sure you click the JDK Download button. The installer file end with exe is best option for beginner, instead of the zip file, because you don\u0026rsquo;t need to setup PATH system environment by yourself.\n  Create a program file HelloWorld.java\npublic class HelloWorld { public static void main(String[] args) { System.out.println(\u0026quot;Hello, World\u0026quot;); } }  Compile \u0026amp; run\njavac HelloWorld.java java HelloWorld   JavaScript JavaScript, not to be confused with Java, was created in 10 days in May 1995 by Brendan Eich, then working at Netscape and now of Mozilla. The original name of this language was Mocha, in September of 1995 it was changed to LiveScript, then in December of the same year, the name JavaScript was adopted, because of very popular Java around then.\nJavaScript is the programming language of the web. It\u0026rsquo;s one of the most popular and in demand skills in today\u0026rsquo;s job market for good reason. As a web developer, it is essential that you have a solid understanding of this versatile language.\n The sample will be presented as web page. Create a program file HelloWorld.html\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script\u0026gt; function helloWorld() { document.write(\u0026quot;Hello World\u0026quot;); } helloWorld(); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/html\u0026gt;  Open file HelloWorld.html with your browser.\n  PHP PHP as it\u0026rsquo;s known today is actually the successor to a product named PHP/FI. Created in 1994 by Rasmus Lerdorf, the very first incarnation of PHP was a simple set of Common Gateway Interface (CGI) binaries written in the C programming language. Originally used for tracking visits to his online resume, he named the suite of scripts \u0026ldquo;Personal Home Page Tools,\u0026rdquo; more frequently referenced as \u0026ldquo;PHP Tools.\u0026rdquo; Over time, more functionality was desired, and Rasmus rewrote PHP Tools, producing a much larger and richer implementation.\n Download and install  Linux Please find the install command here\nWindows\n* Download the file PHP 5.x here * Pick the Thread safe zip file, download extra it to \\path\\to\\php_folder. * Update the PATH environment variable with your php directory\n Create a python script hello.py with notepad\n\u0026lt;?php echo \u0026quot;Hello World!\u0026quot; ?\u0026gt;  Run the script php hello.php\n  Python Python is currently one of the most popular dynamic programming languages, along with Perl, Tcl, PHP, and newcomer Ruby. Although it is often viewed as a \u0026ldquo;scripting\u0026rdquo; language, it is really a general purpose programming language along the lines of Lisp or Smalltalk (as are the others, by the way). Today, Python is used for everything from throw-away scripts to large scalable web servers that provide uninterrupted service 24x7. It is used for GUI and database programming, client- and server-side web programming, and application testing. It is used by scientists writing applications for the world\u0026rsquo;s fastest supercomputers and by children first learning to program.\n Download and install python 3.x Create a python script hello.py with any file editor\nprint \u0026quot;Hello World!\u0026quot;  Run the script python hello.py\n  Ruby Ruby is a dynamic, reflective, object-oriented, general-purpose programming language. Ruby was influenced by Perl, Smalltalk, Eiffel, Ada, and Lisp. It supports multiple programming paradigms, including functional, object-oriented, and imperative. It also has a dynamic type system and automatic memory management.\n Download and install proper Ruby Create a ruby program hello.rb with with any file editor\nprint \u0026quot;Hello World!\u0026quot;  Run the program ruby hello.rb\n  "
},
{
	"uri": "/hacks/use-windows-command-hotkey-as-hacker-2/",
	"title": "Windows command &amp; hotkey - 2",
	"tags": ["windows", "cmd"],
	"description": "A note for everyone who wants to use Commnd and Hot Key as hacker ...",
	"content": " This article will continue the topic of Windows command \u0026amp; hotkeys. Part-1 shows you common hotkeys and short command lines for Run windnow dialog. The rest of this topic will focus on the advanced commands and how to create a batch script with all those commands.\nLet me clarify something first. Advanced command here does not mean that commands here are very complicated or much more powerful than common ones, which have been shown in the Part-1. Here we call them advanced, because they are used by experienced users to complete their given tasks, and those commands are used seldom by majority people. Comparing with Part-1, advanced commands have some specific features which allow them to do some special jobs, which usually are done by system admin. Advanced command is known as Admin command as well.\nAdvanced commands and usages attrib  Type attrib +h a.txt to hide file and use attrib -h a.txt to unhide it. Type attrib +r a.txt to change file to read-only and reverse the action by -r  env  Type env\u0026gt;env.txt \u0026amp; notepad env.txt Display all environment variable in text file  set  Type set path to display PATH environment variable, which is useful to check if your PATH has been setup properly. Type set /P a=b to set b as value to variable a. It will be used in bat/cmd script.  net get sub-commands \u0026ndash; type net /?\n[ ACCOUNTS | COMPUTER | CONFIG | CONTINUE | FILE | GROUP | HELP | HELPMSG | LOCALGROUP | PAUSE | SESSION | SHARE | START | STATISTICS | STOP | TIME | USE | USER | VIEW ]  get sub-command\u0026rsquo;s help \u0026ndash; type net [sub-command] /?\nnet view\n Use net view to show a list of computers and network devices on the network.  net statistics\n Use net statistics workstation(/server) to show the network statistics log for the Server or Workstation service  net localgroup\n Use net localgroup to show a list of local user group on your computer.  net user\n Type net user %username% to retrieve your user information Type net user adminstrator to check the status of administrator Type net user administrator /active:yes to activate adminstrator and inactivate by replacing yes withno  net accounts\n Use net accounts \u0026lt;user\u0026gt; to show current user\u0026rsquo;s password and login requirement. Use net accounts \u0026lt;user\u0026gt; /minpwlen:6 to set password minimum length requirement for user. Use net accounts \u0026lt;user\u0026gt; /maxpwage:30 to force user to reset password every 30 days, or use unlimited to replace the number 30, then user\u0026rsquo;s password will never expire. User net accounts /unique:5 to prevent user reuse previous passwords, and default value is 5.  runas start command prompt as administrator runas /user:yourpc\\administrator \u0026quot;cmd\u0026quot; REM ##BE CAREFUL When you try the command below ### REM it shows how to create, delete files as admin under C drive root. runas /user:yourpc\\administrator \u0026quot;cmd /C type \\\u0026quot;\\\u0026quot;\u0026gt;c:\\z.txt \u0026amp; \\ dir c:\\z.txt \u0026amp; pause \u0026amp; del c:\\z.txt \u0026quot;  sc  sc command usage: sc \u0026lt;server\u0026gt; [command] [service name] \u0026lt;option1\u0026gt; \u0026lt;option2\u0026gt;...  sc query\n Basic usage\n  REM query all service on the PC -- \u0026lt;yourpcname\u0026gt; sc \\\\\u0026lt;yourpcname\u0026gt; query REM query status of given service sc query \u0026lt;servicename\u0026gt; sc query state= all | find \u0026quot;SERVICE_NAME\u0026quot;   Retrieve service name and state. type parameter can be used twice in some case.\n state = {active | inactive | all} type = {driver | service | all} type= {own | share | interact | kernel | filesys | rec | adapt}  IMPORTANT\n The command options for SC are case sensitive. If you run this inside a batch file, the percent signs (e.g. at %s) need to be doubled. Extra space within option is necessary. e.g. state= all   REM query all services which are inactive and type are driver and kernel sc query state= inactive type= driver type= kernel REM get all services name for /f \u0026quot;tokens=2\u0026quot; %s in ('sc query state^= all ^| find \u0026quot;SERVICE_NAME\u0026quot;') do @echo %s REM get all services name and state for /f \u0026quot;tokens=2\u0026quot; %s in ('sc query state^= all ^| find \u0026quot;SERVICE_NAME\u0026quot;') do @( for /f \u0026quot;tokens=4\u0026quot; %t in ('sc query %s ^| find \u0026quot;STATE\u0026quot; ') do @echo %s -- %t )  sc queryex\nREM get all services name and pid for /f \u0026quot;tokens=2\u0026quot; %s in ('sc queryex state^= all ^| find \u0026quot;SERVICE_NAME\u0026quot;') do @( for /f \u0026quot;tokens=3\u0026quot; %t in ('sc queryex %s ^| find \u0026quot;PID\u0026quot; ') do @echo %s -- %t ) REM get all services name and pid for /f \u0026quot;tokens=2\u0026quot; %s in ('sc queryex state^= all ^| find \u0026quot;SERVICE_NAME\u0026quot;') do @( for /f \u0026quot;tokens=3\u0026quot; %t in ('sc queryex %s ^| find \u0026quot;BINARY_PATH_NAME\u0026quot; ') do @echo %s -- %t )  sc qc\nREM get all services name and path for /f \u0026quot;tokens=2\u0026quot; %s in ('sc queryex state^= all ^| find \u0026quot;SERVICE_NAME\u0026quot;') do @( for /f \u0026quot;tokens=3 delims==:\u0026quot; %t in ('sc qc %s ^| find \u0026quot;BINARY_PATH_NAME\u0026quot; ') do @echo %s -- C:%t )  sc start/stop\nREM start and stop service sc start \u0026lt;servicename\u0026gt; REM query service state sc query \u0026lt;servicename\u0026gt; REM stop service sc stop \u0026lt;servicename\u0026gt;  ipconfig  Type ipconfig /all to display full configuration information. Type ipconfig /flushdns to purge the DNS Resolver cache.  tasklist syntax\n tasklist[.exe] [/s computer] [/u domain\\user [/p password]] [/fo {TABLE|LIST|CSV}] [/nh] [/fi FilterName [/fi FilterName2 [ \u0026hellip; ]]] [/m [ModuleName] | /svc | /v FilterName: Status, Imagename, Find process by pid  REM get the mysqld process info tasklist /v /fo list /fi \u0026quot;imagename eq mysqld.exe\u0026quot; REM get the mongod process info tasklist /v /fo list /fi \u0026quot;imagename eq mongod.exe\u0026quot; REM get list of running processes under given user tasklist /fi \u0026quot;USERNAME ne NT AUTHORITY\\SYSTEM\u0026quot; /fi \u0026quot;STATUS eq running\u0026quot; REM get list of non-responding processes under given user tasklist /fi \u0026quot;USERNAME ne NT AUTHORITY\\SYSTEM\u0026quot; /fi \u0026quot;STATUS eq not responding\u0026quot; REM get process by PID tasklist /fi \u0026quot;pid eq 4444\u0026quot;  netstat  Type netstat to get all ports and IP addresses, which are connected or listening Type PID of process which is using some given port, such as 80, 443, 22, etc.  netstat -ano | find \u0026quot;:80\u0026quot;   Type the application which is using given port.  for /f \u0026quot;tokens=5\u0026quot; %p in ( 'netstat -ano ^| find \u0026quot;:80\u0026quot;') do @( for /f \u0026quot;tokens=1\u0026quot; %s in ( 'tasklist /fi \u0026quot;pid eq %p\u0026quot; ^| find \u0026quot;%p\u0026quot;') do @( echo PID:%p -- APP: %s ) )  taskkill syntax\ntaskkill [/S system [/U username [/P [password]]]] { [/FI filter] [/PID processid | /IM imagename] } [/F] [/T]  samples\nREM force to stop notepad application and any children processes taskkill /F /IM notepad.exe / REM stop process by PID and any children processes taskkill /PID 1230 /PID 1241 /PID 1253 /T REM force to stop applications which PID is equal or greater than 10000 REM and windows title of app is not starts with untitle taskkill /F /FI \u0026quot;PID ge 1000\u0026quot; /FI \u0026quot;WINDOWTITLE ne untitle*\u0026quot; taskkill /F /FI \u0026quot;USERNAME eq NT AUTHORITY\\SYSTEM\u0026quot; /IM notepad.exe  schtasks  Syntax \u0026ndash; schtasks /parameter [arguments]\n parameters include \u0026ndash; Change, Create, Delete, End, Query, Run, ShowSid\n  Type schtasks to list all scheduled tasks\n  schtasks /Query\nREM get help info SCHTASKS /Query /? REM query tasks which are scheduled on given system SCHTASKS /Query /S system /U user /P REM get list of tasks in details SCHTASKS /Query /FO LIST /V REM get table of running tasks in details and output to csv file SCHTASKS /Query /FO TABLE /NH /V | find \u0026quot;Running\u0026quot; \u0026gt;running_tasks.csv  Combination of multiple commands As we know, usually each command is designed to complete some specific actions, but sometimes we have to combine different commands together to achieve what we want. There are a few ways to put the commands together.\nUse \u0026amp; It is used to connect to two commands and execute them sequentially\n Delete a folder with non-empty subdirectries test we need to combine del and rd together. Actually we can two commands one by one, but we can put it together and just execute once.\n  REM show the folder with non-empty subdirectries tree test \\path\\to\\TEST +---subdir1 | file1 | file2 | \\---subdir2 file1 file2 del /s/q test \u0026amp; rd /s/q  Use pipeline \u0026gt; It is used to setup a channel between commands pass the data through the commands.\nActually you have seen many samples from above advanced commands. I just use a very simple one to show you how it works.\nREM write some content to a text file all.txt echo aaa\u0026gt;all.txt \u0026amp; echo mark aaa \u0026gt;\u0026gt;all.txt \u0026amp; echo mark bbb\u0026gt;\u0026gt;all.txt  Check CPU usage wmic cpu get loadpercentage @for /f \u0026quot;skip=1\u0026quot; %p in ('wmic cpu get loadpercentage') do @echo %p%  Use for It is used to loop to combine commands. Please check out the samples for tasklist or netstat.\nscript Basic hello world script  You can find it on the home page  Customized script  This sample script is used to query temp folders and clean up log files within the folder. We assume you have multiple temp folders in different drives and You want to delete log files inside temp folder and its subdirectries from time to time. Before you delete them, you want to list all files first. You can confirm if you want to delete them or not. Create a file named clean-logs.bat Copy the sample code and tailor anything you want. The sample shows you how to create interative command script and how to combine commands together with the condition statement and loop statement.\n  @echo off @echo.\u0026quot;Task: \u0026quot; @echo.\u0026quot;You have multiple temp folders in different drives. \u0026quot; @echo.\u0026quot;You want to delete log files inside temp folder and its subdirectries. \u0026quot; @echo.\u0026quot;Before you delete them, you want to list all files first, file list\u0026quot; @echo.\u0026quot;should be sorted by time\u0026quot; :again echo \u0026quot;Checking all Recycle bins for each drive ...\u0026quot; echo.----------------------- for /f %%x in ('wmic logicaldisk get caption ^| find \u0026quot;:\u0026quot;') do @( for /f \u0026quot;tokens=*\u0026quot; %%s in ('tree /f /a %%x\\temp ^| find \u0026quot;log\u0026quot; ' ) do @( echo.%%x\\temp\\%%s ) ) set /p answer=Do you want to clean up log files (Y/N)? if /i \u0026quot;%answer:~,1%\u0026quot; EQU \u0026quot;Y\u0026quot; ( @echo.Y goto clean ) if /i \u0026quot;%answer:~,1%\u0026quot; EQU \u0026quot;N\u0026quot; ( @echo.N goto end ) echo Please type Y for Yes or N for No goto again :clean echo.'deleting logs' for /f %%x in ('wmic logicaldisk get caption ^| find \u0026quot;:\u0026quot;') do @( for /f \u0026quot;tokens=*\u0026quot; %%s in ('tree /f /a %%x\\temp ^| find \u0026quot;log\u0026quot; ' ) do @( del \u0026quot;%%x\\temp\\%%s\u0026quot; ) ) :end echo.'exiting program'  "
},
{
	"uri": "/hacks/use-windows-command-hotkey-as-hacker-1/",
	"title": "Windows command &amp; hotkey - 1",
	"tags": ["windows", "cmd"],
	"description": "A note for everyone who wants to use Commnd and Hot Key as hacker ...",
	"content": " Do you want to make your friends amazed by your computer skill and praise you as genius? Or the hacker as watched in Sci-Fi movies? You don\u0026rsquo;t need Mac, Linux or other operating systems, just Windows, you can show-off and look like hacker and master of Zeroes and Ones, even you have no any idea of it. Here are some tricks by which you can make your friends\u0026rsquo; jaw drop.\nStart Windows command prompt as hacker  Use use hotkeys to open Run feature in two keystrokes: WinKey + R Type cmd and press Enter\n Type color A to change the color of text to Green\n Change the title to Hacker Tool\n List the folders of current directory\n  C:\\\u0026gt;User\\\u0026lt;yourname\u0026gt;\\color A C:\\\u0026gt;User\\\u0026lt;yourname\u0026gt;\\title Hacker Tool C:\\\u0026gt;User\\\u0026lt;yourname\u0026gt;\\cd \\ C:\\\u0026gt;tree  Use other command prompt  cmder is an awesome product. I suggest you just choose mini version to download and install if you are not the heavy git user. There are so many built-in features you can play around.\n console2 is a very good as well. I used it for many years. I\u0026rsquo;m planning to migrate to cmder, but it will take me some time to do it, because I have some customized scripts need to run in console2.  Useful Windows hotkeys I believe the common hotkeys you should know. e.g. Ctrl + C, Ctrl + V, Ctrl + A. Here the hotkeys I list below are some rarely-used but very useful hotkys.\nGeneral hotkeys  Ctrl + Shift + Esc \u0026ndash; Open task manager WinKey + R \u0026ndash; run dialog Winkey + D \u0026ndash; toggle \u0026lsquo;show desktop\u0026rsquo; Winkey + L \u0026ndash; lock workstation Winkey + E \u0026ndash; windows explorer Ctrl + Shift + R \u0026ndash; clear page cache and refresh webpage on browser Alt + (shift +) tab \u0026ndash; switch windows forwards (or backwards) Alt + F4 \u0026ndash; close the selected application F2 , renames selected file. Also used with spreadsheet cells. Ctrl and (+/-) \u0026ndash; zoom in or zoom out text on the editor tool Middle click a tab \u0026ndash; close tab  Hotkeys for Windows 7 or higher version  WinKey + W \u0026ndash; search setting iterms WinKey + Q \u0026ndash; search every iterms WinKey + F \u0026ndash; search file iterms WinKey + T \u0026ndash; use keyboard arrow keys to navigate dock Winkey + X - bring up laptop settings control panel Ctrl + N - new tab Ctrl + Shift + N - new Folder  Common short command lines for Run feature  cmd \u0026ndash; start a Windows command prompt calc \u0026ndash; start the calculator application notepad \u0026ndash; start the notepad application  Advanced short command lines for Run feature  mstsc \u0026ndash; start the remote desktop application regedit \u0026ndash; start registry editor application resmon \u0026ndash; awesome resource monitor - bandwidth etc (win7 or higher) perfmon \u0026ndash; a pretty decent performance monitor (vista or higher) services.msc \u0026ndash; windows service management compmgmt.msc \u0026ndash; computer management including all other management eventvwr\u0026ndash; windows event log viewer appwiz.cpl \u0026ndash; windows programs and features management on control panel  Most common and useful commands This article won\u0026rsquo;t list all commands and all usages of each command. Here I will just choose the commands and some usages of command which are useful for most people. Some advanced command will be explained in Part-2.\nBefore you start typing any cmd, I want to share a common mistake for most beginners, including myself. We always forget to use help command before we Google a solution, when we hit some impediment or roadblock. Actually help command is the most common built-in feature within any software or tool. Learn how to use help command or find the help information is first important when we are going to learn anything new.\nhelp  Start command prompt and type help. You will get a list of command which you can use, and short decription of each command. Use help command to see and learn other commands  C:\\\u0026gt;help C:\\\u0026gt;help cd   start  Start another cmd window prompt.  pwd  Type pwd to display current directory. All commands will use current directory as default path input if the path parameter is not specified.  dir  Displays a list of files and subdirectories in a directory.\n Type dir /a:h/a:d to display hidden subdirectories only Type dir /p/w to display many items per screen within wide list format Type dir /o:-s to display items sorted by size (biggest first) Type dir /o:s to display items sorted by size (smallest first) Type dir /o:dn to display items sorted by date/time (oldest first) and name ( alphabetic)   cd / chdir  Displays the name of or changes the current directory  Type cd to display the name of directory Type cd c:\\windows to change to c:\\Windows\u0026gt; Type cd /d D: to change to d driver if you have d driver   tree  Use tree /f/a \u0026lt;path\u0026gt; to graphically display the folder structure of a drive or path.  ren / rename  Type ren abc cba to ren file name from \u0026ldquo;abc\u0026rdquo; to \u0026ldquo;cba\u0026rdquo; if there is file named abc under current directory. Type *.md *.txt to ren all files under current directory with md extension to txt extension  md / mkdir  Use md a\\b\\c\\d \u0026amp; tree a to create all directories once and display result as follow\n\u0026lt;current-directory\u0026gt;\\a |___b |___c |___d   copy  Use touch test.txt \u0026amp; copy test.txt C:\\User\\\u0026lt;yourname\u0026gt;\\ to create a test.txt file and copy the test.txt to C:\\User\u0026lt;yourname\u0026gt;\\\n  xcopy  Use md a\\b\\c \u0026amp; touch a\\test.txt \u0026amp; touch a\\b\\test.txt \u0026amp; xcopy /s /e /q a C:\\User\\\u0026lt;yourname\u0026gt;\\a\\ to folder a to C:\\User\\\u0026lt;yourname\u0026gt;\\\n Use tree /f /a C:\\User\\\u0026lt;yourname\u0026gt;\\a to verify the result  move  Type move a b to move folder a into folder b.  rd / rmdir  Type rd a to remove a empty directory a Type rd /s a to remove a directory a including all files and empty subdirectories within folder a.  del  IMPORTANT : The item deleted by command del can not be restored from Recyle Bin. Please be careful before you use this command. Type del to delete files or del *.txt to delete all files with txt extension  cls  Type cls to clean the screen  "
},
{
	"uri": "/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/ai/",
	"title": "Ai",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/angularjs/",
	"title": "Angularjs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/azure/",
	"title": "Azure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/bash/",
	"title": "Bash",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/blogs/",
	"title": "Blogs",
	"tags": [],
	"description": "",
	"content": "\r\rAngular vs React vs Vue\rAngular, React, Vue as most popular JavaScript frameworks at present, we just discuss Angular 1.x, Angular 2 / 4, React 15\u0026#43; (Redux), and Vue 2\u0026#43; here ...\n\r\rCreate a blog site on GitHub Pages\rAfter I setup a blog site with Hugo on my ubuntu machine, I decided to use it to create a blog to GitHub pages on my windows machine ...\n\r\rGit Practices\rUseful Git commands \u0026amp; practices for repository management\n\r\rBuild mobile app with web tech stacks\rWhat is mobile app A mobile application, basically, is a computer generated program designed and developed to run on iPhone, Android Smartphone, and many other mobile devices. In a nutshell, there are three types of apps Native apps are specific to a given mobile platform (iOS or Android) using the development tools and language that the respective platform. Usaully it looks and performs the best. HTML5 apps use standard web technologies—typically HTML5, JavaScript and CSS.\n\r\rAzure notes\rHere we are going to explore how to deploy web applications to Azure. From sep 2015, Microsoft launched new portal for Azure. To be honest, new portal is amazing, IMO, it is one of best changes from Microsoft. Prerequisites You have experience with .net web applications. You have experience with website or web app deployment. Getting Started Register a Microsoft account. e.g. live.com, outlook.com, etc.\n\r\rJavaScript and OOP\rHow to power JavaScript with Object Oriendted Programming ... \r\r"
},
{
	"uri": "/tags/c/",
	"title": "C",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/coding/c/",
	"title": "C / C++",
	"tags": ["c", "cpp"],
	"description": "",
	"content": "\r\rC Lecture - 1\rExercise 0 ~ 31\n\r\rC Lecture - 2\rExercise 32 ~ 40\n\r\rC Lecture - 3\rExercise 41~ 48\n\r\rC Lecture - 4\rExercise 48 ~ 51\n\r\r"
},
{
	"uri": "/coding/c/lcthw-lectures.1/",
	"title": "C Lecture - 1",
	"tags": ["c"],
	"description": "Exercise 0 ~ 31",
	"content": " Author: Zed A. Shaw\nAll content comes from Zed\u0026rsquo;s Lecture Repository and Libraries Repository. All credit goes to Zed.\nExercise 0 Installing Software The Plan\n Install software on your system. Test that it works right.  Linux Install\nOn Debian/Ubuntu use:\n$ sudo apt-get install build-essential  On RedHat/CentOS:\n$ sudo yum groupinstall development-tools  Linux Testing\nTest that your C compiler works with:\n$ cc --version  OSX Install\nInstall XCode, this will take a while.\nOSX Testing\nTest that your C compiler works with:\n$ cc --version  Windows Install\nInstall MinGW or Cygwin or Use VirtualBox to run Linux.\nText Editors\nYou should already have one. Just don\u0026rsquo;t use an IDE. They aren\u0026rsquo;t very helpful.\nEnd of Lecture 0\nExercise 1 Dust Off That Compiler The Plan\n Write your first C program. Build it. Break it.  The Code\n.\\ex01\\ex1.c\n#include \u0026lt;stdio.h\u0026gt; /* This is a comment. */ int main(int argc, char *argv[]) { int distance = 100; // this is also a comment printf(\u0026quot;You are %d miles away.\\n\u0026quot;, distance); return 0; }  .\\ex01\\ex1_zed.c\n#include \u0026lt;stdio.h\u0026gt; /* This is a comment. */ int main(int argc, char *argv[]) { int distance = 100; // this is also a comment printf(\u0026quot;You are %d miles away.\\n\u0026quot;); return 0; }  The Analysis\nLet\u0026rsquo;s look at it line-by-line.\nBreaking It\nThis is all crazy magic right now.\nExtra Credit\n Open the ex1 file in your text editor and change or delete random parts. Try running it and see what happens. Print out five more lines of text or something more complex than \u0026ldquo;hello world.\u0026rdquo; Run man 3 printf and read about this function and many others. For each line, write out the symbols you don\u0026rsquo;t understand and see if you can guess what they mean. Write a little chart on paper with your guess so you can check it later to see if you got it right.  Exercise 2 Using Makefiles to Build The Plan\n Start with simple make usage. Set a few important settings.  How Make Works\nImplied dependencies and ancient lore.\nShell Commands\n$ make ex1 ## or this one too $ CFLAGS=\u0026quot;-Wall\u0026quot; make ex1 $ make clean $ make ex1  Makefile\nCFLAGS=-Wall -g clean: rm -f ex1  The Analysis\n Setting options. Indicating dependencies. Writing commends to run.  Breaking It\n Watch out for tabs vs. spaces.  Extra Credit\n Create an all: ex1 target that will build ex1 with just the command make. Read man make to find out more information on how to run it. Read man cc to find out more information on what the flags -Wall and -g do. Research Makefiles online and see if you can improve this one. Find a Makefile in another C project and try to understand what it\u0026rsquo;s doing.  Exercise 3 Formatted Printing The Plan\n Introduction to printf.  The Code\n.\\ex03\\ex3.c\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { int age = 100; int height = 72; printf(\u0026quot;I am %d years old.\\n\u0026quot;, argv); printf(\u0026quot;I am %d inches tall.\\n\u0026quot;, height); return 0; }  The Analysis\nBreaking It\n Take the age variable out of the first printf call, then recompile. You should get a couple of warnings. Run this new program and it will either crash or print out a really crazy age. Put the printf back the way it was, and then don\u0026rsquo;t set age to an initial value by changing that line to int age;, and then rebuild it and run it again.  Extra Credit\n Find as many other ways to break ex3.c as you can. Run man 3 printf and read about the other % format characters you can use. These should look familiar if you used them in other languages (they come from printf). Add ex3 the all list in your Makefile. Use this to make clean all and build all of your exercises thus far. Add ex3 to your clean list in yourMakefile as well. Use make clean to remove it when you need to.  Exercise 4 Using a Debugger The Plan\n See how GDB works (LLDB on OSX). Look at memory checkers like Valgrind and AddressSanitizer. Cover the quick reference. Debug a program.  Using GDB\nUsing LLDB\nUsing Valgrind\nUsing Lint\nUsing AddressSanitizer\nYou neeed clang for this.\n\u0026ldquo;The Debugger\u0026rdquo;\nWhen I say \u0026ldquo;the debugger\u0026rdquo; in the book I mean to use GDB, but use every tool you can find that helps.\nExercise 5 Memorizing C Operators The Plan\n Learn why memorizing works. Learn how to memorize things. Review the C operators.  Memorization\n A \u0026ldquo;backdoor\u0026rdquo; hack to learning. Memorize the operators, then reading is easier. Works with any language.  Memorization Proces\n Write everything on index cards. Use Anki, but make your own cards. Spend 30-60 minutes a day. Track what you don\u0026rsquo;t know, drill those more.  Arithmetic Operators\n+ Add - Subtract * Multiply / Divide % Modulus ++ Increment -- Decrement  Relational Operators\n== Equal != Not equal \u0026gt; Greater than \u0026lt; Less than \u0026gt;= Greater than equal \u0026lt;= Less than equal  Logical Operators\n\u0026amp;\u0026amp; Logical and || Logical or ! Logical not ? : Logical ternary  Bitwise Operators\n\u0026amp; Bitwise and | Bitwise or ^ Bitwise xor ~ Bitwise ones compliment \u0026lt;\u0026lt; Bitwise shift left \u0026gt;\u0026gt; Bitwise shift right  Assignment Operators\n= Assign equal += Assign plus-equal -= Assign minus-equal *= Assign multiply-equal /= Assign divide-equal %= Assign modulus-equal \u0026lt;\u0026lt;= Assign shift-left-equal \u0026gt;\u0026gt;= Assign shift-right-equal \u0026amp;= Assign and-equal ^= Assign xor-equal |= Assign or-equal  Data Operators\nsizeof() Get the size of [] Array subscript \u0026amp; The address of * The value of -\u0026gt; Structure dereference . Structure reference  Miscellaneous Operators\n, Comma ( ) Parenthesis { } Braces : Colon // Single-line comment start /* Multi-line comment start */ Multi-line comment end  Exercise 6 Memorizing C Syntax The Plan\n Memorize the keywords of C. Memorize the major syntax forms.  Execution Keywords break Exit out of a compound statement. case A branch in a switch-statement. continue Continue to the top of a loop. do Start a do-while loop. default Default branch in a switch-statement. else An else branch of an if-statement. for Start a for-loop. goto Jump to a label. if Starts an if-statement. return Return from a function. switch Start a switch-statement. while Start a while-loop.\nType Keywords char Character data type. double A double floating point data type. float A floating point data type. int An integer data type. long A long integer data type. short A short integer data type. void Declare a data type empty. union Start a union-statement. struct Combine variables into a single record.\nData Keywords\nauto Give a local variable a local lifetime. const Make a variable unmodifiable. enum Define a set of int constants. extern Declare an identifier is defined externally. register Declare a variable be stored in a CPU register. signed A signed modifier for integer data types. sizeof Determine the size of data. static Preserve variable value after its scope exits. typedef Create a new type. unsigned An unsigned modifier for integer data types. volatile Declare a variable might be modified elsewhere.  If-Statement\nif(TEST) { CODE; } else if(TEST) { CODE; } else { CODE; }  Switch-Statement\nswitch (OPERAND) { case CONSTANT: CODE; break; default: CODE; }  While-Loop\nwhile(TEST) { CODE; }  While with Continue\nwhile(TEST) { if(OTHER_TEST) { continue; } CODE; }  While with Break\nwhile(TEST) { if(OTHER_TEST) { break; } CODE; }  Do-While\ndo { CODE; } while(TEST);  For-Loop\nfor(INIT; TEST; POST) { CODE; }   continue and break work with for  Enum\nenum { CONST1, CONST2, CONST3 } NAME;  Goto\nif(ERROR_TEST) { goto fail; } fail: CODE;  Functions\nTYPE NAME(ARG1, ARG2, ..) { CODE; return VALUE; }  Typedef\ntypedef DEFINITION IDENTIFIER; typedef unsigned char byte;  Struct\nstruct NAME { ELEMENTS; } [VARIABLE_NAME];  Typedef Struct\ntypedef struct [STRUCT_NAME] { ELEMENTS; } IDENTIFIER;  Union\nunion NAME { ELEMENTS; } [VARIABLE_NAME];  Exercise 7 Variables and Types The Plan\n Learn some basic variables and types. int, float, double, char, and strings.  The Code\n.\\ex07\\ex7.c\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { int distance = 100; float power = 2.345f; double super_power = 56789.4532; char initial = 'A'; char first_name[] = \u0026quot;Zed\u0026quot;; char last_name[] = \u0026quot;Shaw\u0026quot;; first_name[3] = 'Z'; printf(\u0026quot;You are %d miles away.\\n\u0026quot;, distance); printf(\u0026quot;You have %f levels of power.\\n\u0026quot;, power); printf(\u0026quot;You have %f awesome super powers.\\n\u0026quot;, super_power); printf(\u0026quot;I have an initial %c.\\n\u0026quot;, initial); printf(\u0026quot;I have a first name %s.\\n\u0026quot;, first_name); printf(\u0026quot;I have a last name %s.\\n\u0026quot;, last_name); printf(\u0026quot;My whole name is %s %c. %s.\\n\u0026quot;, first_name, initial, last_name); int bugs = 100; double bug_rate = 1.2; printf(\u0026quot;You have %d bugs at the imaginary rate of %f.\\n\u0026quot;, bugs, bug_rate); long universe_of_defects = 1L * 1024L * 1024L * 1024L; printf(\u0026quot;The entire universe has %ld bugs.\\n\u0026quot;, universe_of_defects); double expected_bugs = bugs * bug_rate; printf(\u0026quot;You are expected to have %f bugs.\\n\u0026quot;, expected_bugs); double part_of_universe = expected_bugs / universe_of_defects; printf(\u0026quot;That is only a %e portion of the universe.\\n\u0026quot;, part_of_universe); // this makes no sense, just a demo of something weird char nul_byte = '\\0'; int care_percentage = bugs * nul_byte; printf(\u0026quot;Which means you should care %d%%.\\n\u0026quot;, care_percentage); return 0; }  The Analysis\nBreaking It\n Strings give us so much more fun now! Crafting bad strings. Messing with pointers. Abusing printf.  Extra Credit\n Make the number you assign to universe_of_defects various sizes until you get a warning from the compiler. What do these really huge numbers actually print out? Change long to unsigned long and try to find the number that makes it too big. Go search online to find out what unsigned does. Try to explain to yourself (before I do in the next exercise) why you can multiply a char and an int.  Exercise 8 If, Else-If, Else The Plan\nSimply learn to use this:\nif(TEST) { CODE; } else if(TEST) { CODE; } else { CODE; }  The Code\n.\\ex08\\ex8.c\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { int i = 0; if (argc == 1) { printf(\u0026quot;You only have one argument. You suck.\\n\u0026quot;); } else if (argc \u0026gt; 1 \u0026amp;\u0026amp; argc \u0026lt; 4) { printf(\u0026quot;Here's your arguments:\\n\u0026quot;); for (i = 0; i \u0026lt; argc; i++) { printf(\u0026quot;%s \u0026quot;, argv[i]); } printf(\u0026quot;\\n\u0026quot;); } else if (argc \u0026gt; 10) { printf(\u0026quot;You have too many arguments. You suck.\\n\u0026quot;); } return 0; }  The Analysis\nBreaking It\n It kind of just works, but remove the else and change the logic.  Extra Credit\n You were briefly introduced to \u0026amp;\u0026amp;, which does an and comparison, so go research online the different Boolean operators. Write a few more test cases for this program to see what you can come up with.  Exercise 9 While-Loop and Boolean Expressions The Plan\nYou first loop shall be the while:\nwhile(TEST) { CODE; }  The Code\n.\\ex09\\ex9.c\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { int i; while (i \u0026lt; 25) { printf(\u0026quot;%d\\n\u0026quot;, i); i++; } return 0; }  The Analysis\nBreaking It\n Forget to initialize the int i. Forget to do an i++ and make it run forever.  Extra Credit\n Make the loop count backward by using i-- to start at 25 and go to 0. Write a few more complex while-loops using what you know so far.  Exercise 10 Switch Statements The Plan\n Learn about the switch-statement and indirectly jump tables. Write a program that takes a command line argument.  The Code\n.\\ex10\\ex10.c\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { if (argc != 2) { printf(\u0026quot;ERROR: You need one argument.\\n\u0026quot;); // this is how you abort a program return 1; } int i = 0; for (i = 0; argv[1][i] != '\\0'; i++) { char letter = argv[1][i]; switch (letter) { case 'a': case 'A': printf(\u0026quot;%d: 'A'\\n\u0026quot;, i); break; case 'e': case 'E': printf(\u0026quot;%d: 'E'\\n\u0026quot;, i); break; case 'i': case 'I': printf(\u0026quot;%d: 'I'\\n\u0026quot;, i); break; case 'o': case 'O': printf(\u0026quot;%d: 'O'\\n\u0026quot;, i); break; case 'u': case 'U': printf(\u0026quot;%d: 'U'\\n\u0026quot;, i); break; case 'y': case 'Y': if (i \u0026gt; 2) { // it's only sometimes Y printf(\u0026quot;%d: 'Y'\\n\u0026quot;, i); } break; default: printf(\u0026quot;%d: %c is not a vowel\\n\u0026quot;, i, letter); } } return 0; }  The Analysis\nLet\u0026rsquo;s talk about jump tables, in the naive sense.\nBreaking It\n Forget a break, and it\u0026rsquo;ll run two or more blocks of code you don\u0026rsquo;t want it to run. Forget a default, and it\u0026rsquo;ll silently ignore values you forgot. Accidentally put a variable into the switch that evaluates to something unexpected, like an int, which becomes weird values. Use uninitialized values in the switch.  Extra Credit\n Write another program that uses math on the letter to convert it to lowercase, and then remove all of the extraneous uppercase letters in the switch. Use the \u0026rsquo;,\u0026rsquo; (comma) to initialize letter in the for-loop. Make it handle all of the arguments you pass it with yet another for-loop.  Extra Credit\n Convert this switch-statement to an if-statement. Which do you like better? In the case for \u0026lsquo;Y\u0026rsquo; I have the break outside of the if-statement. What\u0026rsquo;s the impact of this, and what happens if you move it inside of the if-statement. Prove to yourself that you\u0026rsquo;re right.  Exercise 11 Arrays and Strings The Plan\n Learn the similarity between arrays and strings. Avoid getting pedantic about them. Learn how C stores strings and processes them.  The Code\n.\\ex11\\ex11.c\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { int numbers[4] = { 0 }; char name[4] = { 'a', 'a', 'a', 'a' }; // first, print them out raw printf(\u0026quot;numbers: %d %d %d %d\\n\u0026quot;, numbers[0], numbers[1], numbers[2], numbers[3]); printf(\u0026quot;name each: %c %c %c %c\\n\u0026quot;, name[0], name[1], name[2], name[3]); printf(\u0026quot;name: %s\\n\u0026quot;, name); // setup the numbers numbers[0] = 1; numbers[1] = 2; numbers[2] = 3; numbers[3] = 4; // setup the name name[0] = 'Z'; name[1] = 'e'; name[2] = 'd'; name[3] = 'A'; // then print them out initialized printf(\u0026quot;numbers: %d %d %d %d\\n\u0026quot;, numbers[0], numbers[1], numbers[2], numbers[3]); printf(\u0026quot;name each: %c %c %c %c\\n\u0026quot;, name[0], name[1], name[2], name[3]); // print the name like a string printf(\u0026quot;name: %s\\n\u0026quot;, name); // another way to use name char *another = \u0026quot;Zed\u0026quot;; printf(\u0026quot;another: %s\\n\u0026quot;, another); printf(\u0026quot;another each: %c %c %c %c\\n\u0026quot;, another[0], another[1], another[2], another[3]); return 0; }  The Analysis\nBreaking It\nSo many ways to break this!\n Get rid of the initializers that set up name. Accidentally set name[3] = \u0026lsquo;A\u0026rsquo;; so that there\u0026rsquo;s no terminator. Set the initializer to {\u0026lsquo;a\u0026rsquo;,\u0026lsquo;a\u0026rsquo;,\u0026lsquo;a\u0026rsquo;,\u0026lsquo;a\u0026rsquo;} so that there are too many \u0026lsquo;a\u0026rsquo; characters and no space for the \u0026lsquo;\\0\u0026rsquo; terminator.  Extra Credit\n Assign the characters into numbers, and then use printf to print them one character at a time. What kind of compiler warnings do you get? Do the inverse for name, trying to treat it like an array of int and print it out one int at a time. What does the debugger think of that? In how many other ways can you print this out?  Extra Credit\n If an array of characters is 4 bytes long, and an integer is 4 bytes long, then can you treat the whole name array like it\u0026rsquo;s just an integer? How might you accomplish this crazy hack? Take out a piece of paper and draw each of these arrays as a row of boxes. Then do the operations you just did on paper to see if you get them right. Convert name to be in the style of another and see if the code keeps working.  Exercise 12 Sizes and Arrays The Plan\n Learn about sizeof and how it relates to arrays.  The Code\n.\\ex12\\ex12.c\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { int areas[] = { 10, 12, 13, 14, 20 }; char name[] = \u0026quot;Zed\u0026quot;; char full_name[] = { 'Z', 'e', 'd', ' ', 'A', '.', ' ', 'S', 'h', 'a', 'w' }; // WARNING: On some systems you may have to change the // %ld in this code to a %u since it will use unsigned ints printf(\u0026quot;The size of an int: %ld\\n\u0026quot;, sizeof(int)); printf(\u0026quot;The size of areas (int[]): %ld\\n\u0026quot;, sizeof(areas)); printf(\u0026quot;The number of ints in areas: %ld\\n\u0026quot;, sizeof(areas) / sizeof(int)); printf(\u0026quot;The first area is %d, the 2nd %d.\\n\u0026quot;, areas[0], areas[1]); printf(\u0026quot;The size of a char: %ld\\n\u0026quot;, sizeof(char)); printf(\u0026quot;The size of name (char[]): %ld\\n\u0026quot;, sizeof(name)); printf(\u0026quot;The number of chars: %ld\\n\u0026quot;, sizeof(name) / sizeof(char)); printf(\u0026quot;The size of full_name (char[]): %ld\\n\u0026quot;, sizeof(full_name)); printf(\u0026quot;The number of chars: %ld\\n\u0026quot;, sizeof(full_name) / sizeof(char)); full_name[12] = 'X'; printf(\u0026quot;name=\\\u0026quot;%s\\\u0026quot; and full_name=\\\u0026quot;%s\\\u0026quot;\\n\u0026quot;, name, full_name); return 0; }  The Analysis\nBreaking It\n Get rid of the \u0026lsquo;\\0\u0026rsquo; at the end of full_name and re-run it. Run it under the debugger, too. Now, move the definition of full_name to the top of main before areas. Try running it under the debugger a few times and see if you get some new errors. In some cases, you might still get lucky and not catch any errors. Change it so that instead of areas[0] you try to print areas[10]. See what the debugger thinks of that. Try other ways to break it like this, doing it to name and full_name too.  Extra Credit\n Try assigning to elements in the areas array with areas[0] = 100; and similar. Try assigning to elements of name and full_name. Try setting one element of areas to a character from name. Search online for the different sizes used for integers on different CPUs.  Exercise 13 For-Loops and Arrays of Strings The Plan\nLearn about this code:\nfor(INITIALIZER; TEST; INCREMENTER) { CODE; }  The Code\n.\\ex13\\ex13.c\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { int i = 0; // go through each string in argv // why am I skipping argv[0]? for (i = 0; i \u0026lt; argc; i++) { printf(\u0026quot;arg %d: %s\\n\u0026quot;, i, argv[i]); } // let's make our own array of strings char *states[] = { \u0026quot;California\u0026quot;, \u0026quot;Oregon\u0026quot;, \u0026quot;Washington\u0026quot;, \u0026quot;Texas\u0026quot; }; int num_states = 5; for (i = 0; i \u0026lt; num_states; i++) { printf(\u0026quot;state %d: %s\\n\u0026quot;, i, states[i]); } return 0; }  The Analysis\nBreaking It\n Take your favorite other language and use it to run this program, but include as many command line arguments as possible. See if you can bust it by giving it way too many arguments. Initialize i to 0 and see what that does. Do you have to adjust argc as well, or does it just work? Why does 0-based indexing work here? Set num_states wrong so that it\u0026rsquo;s a higher value and see what it does.  Extra Credit\n Figure out what kind of code you can put into the parts of a for-loop. Look up how to use the comma character (,) to separate multiple statements in the parts of the for-loop, but between the semicolon characters (;). Read what a NULL is and try to use it in one of the elements from the states array to see what it\u0026rsquo;ll print. See if you can assign an element from the states array to the argv array before printing both. Try the inverse.  Exercise 14 Writing and Using Functions The Plan\n Write your very first functions.  The Code\n.\\ex14\\ex14.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; // forward declarations int can_print_it(char ch); void print_letters(char arg[]); void print_arguments(int argc, char *argv[]) { int i = 0; for (i = 0; i \u0026lt; argc; i++) { print_letters(argv[i]); } } void print_letters(char arg[]) { int i = 0; for (i = 0; arg[i] != '\\0'; i++) { char ch = arg[i]; if (can_print_it(ch)) { printf(\u0026quot;'%c' == %d \u0026quot;, ch, ch); } } printf(\u0026quot;\\n\u0026quot;); } int can_print_it(char ch) { return isalpha(ch) || isblank(ch); } int main(int argc, char *argv[]) { print_arguments(argc+1, argv); return 0; }  The Analysis\nBreaking It\n Remove the forward declarations to confuse the compiler and cause it to complains about can_print_it and print_letters. When you call print_arguments inside main, try adding 1 to argc so that it goes past the end of the argv array.  Extra Credit\n Rework these functions so that you have fewer functions. For example, do you really need can_print_it? Have print_arguments figure out how long each argument string is by using the strlen function, and then pass that length to print_letters. Then, rewrite print_letters so it only processes this fixed length and doesn\u0026rsquo;t rely on the \u0026lsquo;\\0\u0026rsquo; terminator. You\u0026rsquo;ll need the #include  for this.  Extra Credit\n Use man to look up information on isalpha and isblank. Use other similar functions to print out only digits or other characters. Go read about how other people like to format their functions. Never use the K\u0026amp;R syntax (it\u0026rsquo;s antiquated and confusing) but understand what it\u0026rsquo;s doing in case you run into someone who likes it.  Exercise 15 Pointers, Dreaded Pointers The Plan\n A long video on C pointers. Lots of demonstration and visuals.  The Code\n.\\ex15\\ex15.c\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { // create two arrays we care about int ages[] = { 23, 43, 12, 89, 2 }; char *names[] = { \u0026quot;Alan\u0026quot;, \u0026quot;Frank\u0026quot;, \u0026quot;Mary\u0026quot;, \u0026quot;John\u0026quot;, \u0026quot;Lisa\u0026quot; }; // safely get the size of ages int count = sizeof(ages) / sizeof(int); int i = 0; // first way using indexing for (i = 0; i \u0026lt; count; i++) { printf(\u0026quot;%s has %d years alive.\\n\u0026quot;, names[i], ages[i]); } printf(\u0026quot;---\\n\u0026quot;); // setup the pointers to the start of the arrays int *cur_age = (int *)names; char **cur_name = names; // second way using pointers for (i = 0; i \u0026lt; count; i++) { printf(\u0026quot;%s is %d years old.\\n\u0026quot;, *(cur_name + i), *(cur_age + i)); } printf(\u0026quot;---\\n\u0026quot;); // third way, pointers are just arrays for (i = 0; i \u0026lt; count; i++) { printf(\u0026quot;%s is %d years old again.\\n\u0026quot;, cur_name[i], cur_age[i]); } printf(\u0026quot;---\\n\u0026quot;); // fourth way with pointers in a stupid complex way for (cur_name = names, cur_age = ages; (cur_age - ages) \u0026lt; count; cur_name++, cur_age++) { printf(\u0026quot;%s lived %d years so far.\\n\u0026quot;, *cur_name, *cur_age); } return 0; }  The Pointer Lexicon\ntype *ptr A pointer of type named ptr *ptr The value of whatever ptr is pointed at *(ptr + i) The value of (whatever ptr is pointed at plus i) \u0026amp;thing The address of thing type *ptr = \u0026amp;thing A pointer of type named ptr set to the address of thing ptr++ Increment where ptr points  Pointers Visually\nThe Analysis\nBreaking It\n Try to make cur_age point at names. You\u0026rsquo;ll need to use a C cast to force it, so go look that up and try to figure it out. In the final for-loop, try getting the math wrong in weird ways. Try rewriting the loops so that they start at the end of the arrays and go to the beginning. This is harder than it looks.  Extra Credit\n Rewrite all of the arrays in this program as pointers. Rewrite all of the pointers as arrays. Go back to some of the other programs that use arrays and try to use pointers instead. Process command line arguments using just pointers similar to how you did names in this one. Play with combinations of getting the value of and the address of things. Add another for-loop at the end that prints out the addresses that these pointers are using. You\u0026rsquo;ll need the %p format for printf.  Extra Credit\n Rewrite this program to use a function for each of the ways you\u0026rsquo;re printing out things. Try to pass pointers to these functions so that they work on the data. Remember you can declare a function to accept a pointer, but just use it like an array. Change the for-loops to while-loops and see what works better for which kind of pointer usage.  Exercise 16 Structs And Pointers To Them The Plan\n Learn to work with structs to structure data and make new types. Learn to use pointers to work with structs better.  The Code\n.\\ex16\\ex16.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; struct Person { char *name; int age; int height; int weight; }; struct Person *Person_create(char *name, int age, int height, int weight) { struct Person *who = malloc(sizeof(struct Person)); assert(who != NULL); who-\u0026gt;name = strdup(name); who-\u0026gt;age = age; who-\u0026gt;height = height; who-\u0026gt;weight = weight; return who; } void Person_destroy(struct Person *who) { assert(who != NULL); free(who-\u0026gt;name); free(who); } void Person_print(struct Person *who) { printf(\u0026quot;Name: %s\\n\u0026quot;, who-\u0026gt;name); printf(\u0026quot;\\tAge: %d\\n\u0026quot;, who-\u0026gt;age); printf(\u0026quot;\\tHeight: %d\\n\u0026quot;, who-\u0026gt;height); printf(\u0026quot;\\tWeight: %d\\n\u0026quot;, who-\u0026gt;weight); } int main(int argc, char *argv[]) { // make two people structures struct Person *joe = Person_create(\u0026quot;Joe Alex\u0026quot;, 32, 64, 140); struct Person *frank = Person_create(\u0026quot;Frank Blank\u0026quot;, 20, 72, 180); // print them out and where they are in memory printf(\u0026quot;Joe is at memory location %p:\\n\u0026quot;, joe); Person_print(joe); printf(\u0026quot;Frank is at memory location %p:\\n\u0026quot;, frank); Person_print(frank); // make everyone age 20 years and print them again joe-\u0026gt;age += 20; joe-\u0026gt;height -= 2; joe-\u0026gt;weight += 40; Person_print(joe); frank-\u0026gt;age += 20; frank-\u0026gt;weight += 20; free(frank); Person_print(frank); // destroy them both so we clean up Person_destroy(joe); Person_destroy(frank); return 0; }  The Analysis\nBreaking It\n Try passing NULL to Person_destroy see what it does. If it doesn\u0026rsquo;t abort, then you must not have the -g option in your Makefile\u0026rsquo;s CFLAGS. Forget to call Person_destroy at the end, and then run it under the debugger to see it report that you forgot to free the memory. Figure out the options you need to pass to the debugger to get it to print how you leaked this memory.  Breaking It\n Forget to free who-\u0026gt;name in Person_destroy and compare the output. Again, use the right options to see how the debugger tells you exactly where you messed up. This time, pass NULL to Person_print and see what the debugger thinks of that. You\u0026rsquo;ll figure out that NULL is a quick way to crash your program.  Extra Credit\n How to create a struct on the stack just like you\u0026rsquo;re making any other variable. How to initialize it using the x.y (period) character instead of the x-\u0026gt;y syntax. How to pass a structure to other functions without using a pointer.  Exercise 17 Heap and Stack Memory Allocation The Plan\n Learn to allocate data on the heap using malloc. Memory management techniques to avoid leaking. How the heap differs from the stack, and when to use them.  The Code\n.\\ex17\\ex17.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define MAX_DATA 512 #define MAX_ROWS 100 struct Address { int id; int set; char name[MAX_DATA]; char email[MAX_DATA]; }; struct Database { struct Address rows[MAX_ROWS]; }; struct Connection { FILE *file; struct Database *db; }; void die(const char *message) { if (errno) { perror(message); } else { printf(\u0026quot;ERROR: %s\\n\u0026quot;, message); } exit(1); } void Address_print(struct Address *addr) { printf(\u0026quot;%d %s %s\\n\u0026quot;, addr-\u0026gt;id, addr-\u0026gt;name, addr-\u0026gt;email); } void Database_load(struct Connection *conn) { int rc = fread(conn-\u0026gt;db, sizeof(struct Database), 1, conn-\u0026gt;file); if (rc != 1) die(\u0026quot;Failed to load database.\u0026quot;); } struct Connection *Database_open(const char *filename, char mode) { struct Connection *conn = malloc(sizeof(struct Connection)); if (!conn) die(\u0026quot;Memory error\u0026quot;); conn-\u0026gt;db = malloc(sizeof(struct Database)); if (!conn-\u0026gt;db) die(\u0026quot;Memory error\u0026quot;); if (mode == 'c') { conn-\u0026gt;file = fopen(filename, \u0026quot;w\u0026quot;); } else { conn-\u0026gt;file = fopen(filename, \u0026quot;r+\u0026quot;); if (conn-\u0026gt;file) { Database_load(conn); } } if (!conn-\u0026gt;file) die(\u0026quot;Failed to open the file\u0026quot;); return conn; } void Database_close(struct Connection *conn) { if (conn) { if (conn-\u0026gt;file) fclose(conn-\u0026gt;file); if (conn-\u0026gt;db) free(conn-\u0026gt;db); free(conn); } } void Database_write(struct Connection *conn) { rewind(conn-\u0026gt;file); int rc = fwrite(conn-\u0026gt;db, sizeof(struct Database), 1, conn-\u0026gt;file); if (rc != 1) die(\u0026quot;Failed to write database.\u0026quot;); rc = fflush(conn-\u0026gt;file); if (rc == -1) die(\u0026quot;Cannot flush database.\u0026quot;); } void Database_create(struct Connection *conn) { int i = 0; for (i = 0; i \u0026lt; MAX_ROWS; i++) { // make a prototype to initialize it struct Address addr = {.id = i,.set = 0 }; // then just assign it conn-\u0026gt;db-\u0026gt;rows[i] = addr; } } void Database_set(struct Connection *conn, int id, const char *name, const char *email) { struct Address *addr = \u0026amp;conn-\u0026gt;db-\u0026gt;rows[id]; if (addr-\u0026gt;set) die(\u0026quot;Already set, delete it first\u0026quot;); addr-\u0026gt;set = 1; // WARNING: bug, read the \u0026quot;How To Break It\u0026quot; and fix this char *res = strncpy(addr-\u0026gt;name, name, MAX_DATA); // demonstrate the strncpy bug if (!res) die(\u0026quot;Name copy failed\u0026quot;); res = strncpy(addr-\u0026gt;email, email, MAX_DATA); if (!res) die(\u0026quot;Email copy failed\u0026quot;); } void Database_get(struct Connection *conn, int id) { struct Address *addr = \u0026amp;conn-\u0026gt;db-\u0026gt;rows[id]; if (addr-\u0026gt;set) { Address_print(addr); } else { die(\u0026quot;ID is not set\u0026quot;); } } void Database_delete(struct Connection *conn, int id) { struct Address addr = {.id = id,.set = 0 }; conn-\u0026gt;db-\u0026gt;rows[id] = addr; } void Database_list(struct Connection *conn) { int i = 0; struct Database *db = conn-\u0026gt;db; for (i = 0; i \u0026lt; MAX_ROWS; i++) { struct Address *cur = \u0026amp;db-\u0026gt;rows[i]; if (cur-\u0026gt;set) { Address_print(cur); } } } int main(int argc, char *argv[]) { if (argc \u0026lt; 3) die(\u0026quot;USAGE: ex17 \u0026lt;dbfile\u0026gt; \u0026lt;action\u0026gt; [action params]\u0026quot;); char *filename = argv[1]; char action = argv[2][0]; struct Connection *conn = Database_open(filename, action); int id = 0; if (argc \u0026gt; 3) id = atoi(argv[3]); if (id \u0026gt;= MAX_ROWS) die(\u0026quot;There's not that many records.\u0026quot;); switch (action) { case 'c': Database_create(conn); Database_write(conn); break; case 'g': if (argc != 4) die(\u0026quot;Need an id to get\u0026quot;); Database_get(conn, id); break; case 's': if (argc != 6) die(\u0026quot;Need id, name, email to set\u0026quot;); Database_set(conn, id, argv[4], argv[5]); Database_write(conn); break; case 'd': if (argc != 4) die(\u0026quot;Need id to delete\u0026quot;); Database_delete(conn, id); Database_write(conn); break; case 'l': Database_list(conn); break; default: die(\u0026quot;Invalid action: c=create, g=get, s=set, d=del, l=list\u0026quot;); } Database_close(conn); return 0; }  $ make ex1. cc -Wall ­g ex17.c -o ex1. $ ./ex17 db.dat c $ ./ex17 db.dat s 1 zed zed@zedshaw.com $ ./ex17 db.dat s 2 frank frank@zedshaw.com$ $ ./ex17 db.dat s 3 joe joe@zedshaw.com $ $ ./ex17 db.dat l 1 zed zed@zedshaw.com 2 frank frank@zedshaw.com 3 joe joe@zedshaw.com $ ./ex17 db.dat d 3 $ ./ex17 db.dat l 1 zed zed@zedshaw.com 2 frank frank@zedshaw.com $ ./ex17 db.dat g 2 2 frank frank@zedshaw.com  The Analysis\nBreaking It\n The classic way is to remove some of the safety checks so that you can pass in arbitrary data. For example, remove the check on line 160 that prevents you from passing in any record number. You can also try corrupting the data file. Open it in any editor and change random bytes, and then close it. You could also find ways to pass bad arguments to the program when it\u0026rsquo;s run. For example, getting the file and action backwards will make it create a file named after the action, and then do an action based on the first character.  Breaking It\n There\u0026rsquo;s a bug in this program because strncpy is poorly designed. Go read about strncpy and try to find out what happens when the name or address you give is greater than 512 bytes. Fix this by simply forcing the last character to \u0026lsquo;\\0\u0026rsquo; so that it\u0026rsquo;s always set no matter what (which is what strncpy should do). In the extra credit, I have you augment the program to create arbitrary size databases. Try to see what the biggest database is before you cause the program to die due to lack of memory from malloc.  Extra Credit\n The die function needs to be augmented to let you pass the conn variable, so it can close it and clean up. Change the code to accept parameters for MAX_DATA and MAX_ROWS, store them in the Database struct, and write that to the file, thus creating a database that can be arbitrarily sized. Add more operations you can do with the database, like find.  Extra Credit\n Read about how C does it\u0026rsquo;s struct packing, and then try to see why your file is the size it is. See if you can calculate a new size after adding more fields. Add some more fields to Address and make them searchable. Write a shell script that will do your testing automatically for you by running commands in the right order. Hint: Use set -e at the top of a bash to make it abort the whole script if any command has an error.  Extra Credit\n Try reworking the program to use a single global for the database connection. How does this new version of the program compare to the other one? Go research stack data structure and write one in your favorite language, then try to do it in C.  Exercise 18 Pointers to Functions The Plan\n Advanced topic of pointers to functions. These are very useful but not encountered too often.  The Code\n.\\ex18\\ex18.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; /** Our old friend die from ex17. */ void die(const char *message) { if (errno) { perror(message); } else { printf(\u0026quot;ERROR: %s\\n\u0026quot;, message); } exit(1); } // a typedef creates a fake type, in this // case for a function pointer typedef int (*compare_cb) (int a, int b); /** * A classic bubble sort function that uses the * compare_cb to do the sorting. */ int *bubble_sort(int *numbers, int count, compare_cb cmp) { int temp = 0; int i = 0; int j = 0; int *target = malloc(count * sizeof(int)); if (!target) die(\u0026quot;Memory error.\u0026quot;); memcpy(target, numbers, count * sizeof(int)); for (i = 0; i \u0026lt; count; i++) { for (j = 0; j \u0026lt; count - 1; j++) { if (cmp(target[j], target[j + 1]) \u0026gt; 0) { temp = target[j + 1]; target[j + 1] = target[j]; target[j] = temp; } } } return target; } int sorted_order(int a, int b) { return a - b; } int reverse_order(int a, int b) { return b - a; } int strange_order(int a, int b) { if (a == 0 || b == 0) { return 0; } else { return a % b; } } /** * Used to test that we are sorting things correctly * by doing the sort and printing it out. */ void test_sorting(int *numbers, int count, compare_cb cmp) { int i = 0; int *sorted = bubble_sort(numbers, count, cmp); if (!sorted) die(\u0026quot;Failed to sort as requested.\u0026quot;); for (i = 0; i \u0026lt; count; i++) { printf(\u0026quot;%d \u0026quot;, sorted[i]); } printf(\u0026quot;\\n\u0026quot;); free(sorted); } void destroy(compare_cb cmp) { int i = 0; unsigned char *data = (unsigned char *)cmp; for(i = 0; i \u0026lt; 1; i++) { data[i] = i; } printf(\u0026quot;\\n\u0026quot;); } void dump(compare_cb cmp) { int i = 0; unsigned char *data = (unsigned char *)cmp; for(i = 0; i \u0026lt; 25; i++) { printf(\u0026quot;%02x:\u0026quot;, data[i]); } printf(\u0026quot;\\n\u0026quot;); } int main(int argc, char *argv[]) { if (argc \u0026lt; 2) die(\u0026quot;USAGE: ex18 4 3 1 5 6\u0026quot;); int count = argc - 1; int i = 0; char **inputs = argv + 1; int *numbers = malloc(count * sizeof(int)); if (!numbers) die(\u0026quot;Memory error.\u0026quot;); for (i = 0; i \u0026lt; count; i++) { numbers[i] = atoi(inputs[i]); } test_sorting(numbers, count, sorted_order); test_sorting(numbers, count, reverse_order); test_sorting(numbers, count, strange_order); free(numbers); printf(\u0026quot;SORTED:\u0026quot;); dump(sorted_order); destroy(sorted_order); printf(\u0026quot;SORTED:\u0026quot;); dump(sorted_order); return 0; }  The Analysis\nBreaking It\nLet\u0026rsquo;s hack your computer with this code:\nunsigned char *data = (unsigned char *)cmp; for(i = 0; i \u0026lt; 25; i++) { printf(\u0026quot;%02x:\u0026quot;, data[i]); } printf(\u0026quot;\\n\u0026quot;);  You\u0026rsquo;ll see how the bytes of code that make up your program can also be data.\nExtra Credit\n Get a hex editor and open up ex18, and then find the sequence of hex digits that start a function to see if you can find the function in the raw program. Find other random things in your hex editor and change them. Rerun your program and see what happens. Strings you find are the easiest things to change. Pass in the wrong function for the compare_cb and see what the C compiler complains about. Pass in NULL and watch your program seriously bite it. Then, run the debugger and see what that reports. Write another sorting algorithm, then change test_sorting so that it takes both an arbitrary sort function and the sort function\u0026rsquo;s callback comparison. Use it to test both of your algorithms.  Exercise 19 Zed\u0026rsquo;s Awesome Debug Macros The Plan\n Learn about the macros that vastly improve my code quality. Find out why they help you out. Explore some advanced C Pre-Processor (CPP) macro magic code generation tricks.  The Code\n.\\ex19\\ex19.c\n#include \u0026quot;dbg.h\u0026quot; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; void test_debug() { // notice you don't need the \\n debug(\u0026quot;I have Brown Hair.\u0026quot;); // passing in arguments like printf debug(\u0026quot;I am %d years old.\u0026quot;, 37); } void test_log_err() { log_err(\u0026quot;I believe everything is broken.\u0026quot;); log_err(\u0026quot;There are %d problems in %s.\u0026quot;, 0, \u0026quot;space\u0026quot;); } void test_log_warn() { log_warn(\u0026quot;You can safely ignore this.\u0026quot;); log_warn(\u0026quot;Maybe consider looking at: %s.\u0026quot;, \u0026quot;/etc/passwd\u0026quot;); } void test_log_info() { log_info(\u0026quot;Well I did something mundane.\u0026quot;); log_info(\u0026quot;It happened %f times today.\u0026quot;, 1.3f); } int test_check(char *file_name) { FILE *input = NULL; char *block = NULL; block = malloc(100); check_mem(block); // should work input = fopen(file_name, \u0026quot;r\u0026quot;); check(input, \u0026quot;Failed to open %s.\u0026quot;, file_name); free(block); fclose(input); return 0; error: if (block) free(block); if (input) fclose(input); return -1; } int test_sentinel(int code) { char *temp = malloc(100); check_mem(temp); switch (code) { case 1: log_info(\u0026quot;It worked.\u0026quot;); break; default: sentinel(\u0026quot;I shouldn't run.\u0026quot;); } free(temp); return 0; error: if (temp) free(temp); return -1; } int test_check_mem() { char *test = NULL; check_mem(test); free(test); return 1; error: return -1; } int test_check_debug() { int i = 0; check_debug(i != 0, \u0026quot;Oops, I was 0.\u0026quot;); return 0; error: return -1; } int main(int argc, char *argv[]) { check(argc == 2, \u0026quot;Need an argument.\u0026quot;); test_debug(); test_log_err(); test_log_warn(); test_log_info(); check(test_check(\u0026quot;ex20.c\u0026quot;) == 0, \u0026quot;failed with ex20.c\u0026quot;); check(test_check(argv[1]) == -1, \u0026quot;failed with argv\u0026quot;); check(test_sentinel(1) == 0, \u0026quot;test_sentinel failed.\u0026quot;); check(test_sentinel(100) == -1, \u0026quot;test_sentinel failed.\u0026quot;); check(test_check_mem() == -1, \u0026quot;test_check_mem failed.\u0026quot;); check(test_check_debug() == -1, \u0026quot;test_check_debug failed.\u0026quot;); return 0; error: return 1; }  The Analysis\nBreaking It\nThese macros are designed on purpose to prevent you from doing this:\nif(blah) debug(\u0026quot;This is a thing\u0026quot;); else debug (\u0026quot;This is another thing\u0026quot;);  Extra Credit\n Put #define NDEBUG at the top of the file and check that all of the debug messages go away. Undo that line, and add -DNDEBUG to CFLAGS at the top of the Makefile, and then recompile to see the same thing. Modify the logging so that it includes the function name, as well as the file:line.  Exercise 20 Advanced Debugging Techniques The Plan\nDemonstrate more advanced debugging techniques and tools.\nThe Demonstration\nExtra Credit\n Find a graphical debugger and compare using it to raw gdb. These are useful when the program you\u0026rsquo;re looking at is local, but they are pointless if you have to debug a program on a server. You can enable core dumps on your OS, and when a program crashes, you\u0026rsquo;ll get a core file. This core file is like a postmortem of the program that you can load up to see what happened right at the crash and what caused it. Change ex31.c so that it crashes after a few iterations, then try to get a core dump and analyze it.  Exercise 21 Advanced Data Types and Flow Control The Plan\n Learn about the basic types and keywords for them. Cover all the keywords for modifying those types. Review fixed exact size types. Learn all the different operators on those types.  This is mostly a review!\nAvailable Data Types\nint Stores a regular integer, defaulting to 32 bits in size. double Holds a large floating point number. float Holds a smaller floating point number. char Holds a single 1 byte character. void Indicates \u0026quot;no type\u0026quot;. enum Enumerated types, which work as and convert to integers.  Type Modifiers\nunsigned Non-negative numbers. signed Gives you negative and positive numbers. long Bigger number. short Smaller number.  Type Qualifiers\nconst Constant. volatile Compiler can't trust it. register Put it in a CPU register.  Type Conversion\nC type promotion order:\n long double double float int (but only char and short int); long  When in doubt, parens it out!\nExact Size Types\nIf you need exact sizes use these:\nint8_t 8-bit signed integer uint8_t 8-bit unsigned integer int16_t 16-bit signed integer uint16_t 16-bit unsigned integer int32_t 32-bit signed integer uint32_t 32-bit unsigned integer int64_t 64-bit signed integer uint64_t 64-bit unsigned integer  Getting Sizes\nRefer to the book as there\u0026rsquo;s a large number of macros to help you get size information for types.\nExamples:\nint_least32_t int that holds at least 32 bits. uint_fast32_t unsigned fastest int for 32 bits. intptr_t signed int that can hold a pointer. PTRDIFF_MAX maximum value of ptrdiff_t SIZE_MAX maximum value of a size_t  Available Operators\nThis section is a review of what you memorized already to make sure you know everything.\nMemorize these again to be sure you have them.\nExtra Credit\n Read stdint.h or a description of it, and write out all the available size identifiers. Go through each item here and write out what it does in code. Research it online so you know you got it right. Get this information memorized by making flash cards and spending 15 minutes a day practicing it. Create a program that prints out examples of each type, and confirm that your research is right.  Exercise 22 The Stack, Scope, and Globals The Plan\n Start to learn about scope. Stack vs. global. Scope levels inside a function. The extern keyword.  The Code\n.\\ex22\\ex22.h\n#ifndef _ex22_h #define _ex22_h struct State { int the_size; int the_age; }; // gets and sets an internal static variable in ex22.c int get_age(struct State *state); void set_age(struct State *state, int age); // updates a static variable that's inside update_ratio double update_ratio(double ratio); void print_size(); #endif  .\\ex22\\ex22.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026quot;ex22.h\u0026quot; #include \u0026quot;dbg.h\u0026quot; int get_age(struct State *state) { return state-\u0026gt;the_age; } void set_age(struct State *state, int age) { state-\u0026gt;the_age = age; } double update_ratio(double new_ratio) { static double ratio = 1.0; double old_ratio = ratio; ratio = new_ratio; return old_ratio; } void print_size() { log_info(\u0026quot;I think size is: %d\u0026quot;, THE_SIZE); }  .\\ex22\\ex22_main.c\n#include \u0026quot;ex22.h\u0026quot; #include \u0026quot;dbg.h\u0026quot; const char *MY_NAME = \u0026quot;Zed A. Shaw\u0026quot;; void scope_demo(int count) { log_info(\u0026quot;count is: %d\u0026quot;, count); if (count \u0026gt; 10) { int numbers = 100; // BAD! BUGS! log_info(\u0026quot;count in this scope is %d\u0026quot;, numbers); } log_info(\u0026quot;count is at exit: %d\u0026quot;, count); count = 3000; log_info(\u0026quot;count after assign: %d\u0026quot;, count); } int main(int argc, char *argv[]) { // test out THE_AGE accessors log_info(\u0026quot;My name: %s, age: %d\u0026quot;, MY_NAME, get_age()); set_age(100); log_info(\u0026quot;My age is now: %d\u0026quot;, get_age()); // test out THE_SIZE extern log_info(\u0026quot;THE_SIZE is: %d\u0026quot;, THE_SIZE); print_size(); THE_SIZE = 9; log_info(\u0026quot;THE SIZE is now: %d\u0026quot;, THE_SIZE); print_size(); // test the ratio function static log_info(\u0026quot;Ratio at first: %f\u0026quot;, update_ratio(2.0)); log_info(\u0026quot;Ratio again: %f\u0026quot;, update_ratio(10.0)); log_info(\u0026quot;Ratio once more: %f\u0026quot;, update_ratio(300.0)); // test the scope demo int count = 4; scope_demo(count); scope_demo(count * 20); log_info(\u0026quot;count after calling scope_demo: %d\u0026quot;, count); return 0; }  This exercises requires two files:\n* ex22.c * ex22_main.c  The Analysis\nFixing It\nInstead of breaking this one I\u0026rsquo;m going to fix it.\n Do not shadow a variable like count on ex22_main.c:11. Avoid using too many globals. When in doubt, put it on the heap (malloc). Don\u0026rsquo;t use function static variables like I did in ex22.c:update_ratio. Avoid reusing function parameters.  Breaking It\n Try to directly access variables in ex22.c from ex22_main.c that you think you can\u0026rsquo;t. For example, can you get at ratio inside update_ratio? What if you had a pointer to it? Ditch the extern declaration in ex22.h to see what errors or warnings you get. Add static or const specifiers to different variables, and then try to change them.  Extra Credit\n Research the concept of pass by value verses pass by reference. Write an example of both. Use pointers to gain access to things you shouldn\u0026rsquo;t have access to. Use your debugger to see what this kind of access looks like when you do it wrong. Write a recursive function that causes a stack overflow. Don\u0026rsquo;t know what a recursive function is? Try calling scope_demo at the bottom of scope_demo itself so that it loops. Rewrite the Makefile so that it can build this.  Exercise 23 Meet Duff\u0026rsquo;s Device The Plan\nLearn the most evil awesome hack ever:\nDuff\u0026rsquo;s Device\nThe Code\n.\\ex23\\ex23.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; int normal_copy(char *from, char *to, int count) { int i = 0; for (i = 0; i \u0026lt; count; i++) { to[i] = from[i]; } return i; } int duffs_device(char *from, char *to, int count) { { int n = (count + 7) / 8; switch (count % 8) { case 0: do { *to++ = *from++; case 7: *to++ = *from++; case 6: *to++ = *from++; case 5: *to++ = *from++; case 4: *to++ = *from++; case 3: *to++ = *from++; case 2: *to++ = *from++; case 1: *to++ = *from++; } while (--n \u0026gt; 0); } } return count; } int zeds_device(char *from, char *to, int count) { { int n = (count + 7) / 8; debug(\u0026quot;n starts: %d, count: %d, count%%8: %d\u0026quot;, n, count, count % 8); switch (count % 8) { case 0: again: *to++ = *from++; case 7: *to++ = *from++; case 6: *to++ = *from++; case 5: *to++ = *from++; case 4: *to++ = *from++; case 3: *to++ = *from++; case 2: *to++ = *from++; case 1: *to++ = *from++; debug(\u0026quot;last case: n=%d\u0026quot;, n); if (--n \u0026gt; 0) { debug(\u0026quot;going again: n=%d\u0026quot;, n); goto again; } } } return count; } int valid_copy(char *data, int count, char expects) { int i = 0; for (i = 0; i \u0026lt; count; i++) { if (data[i] != expects) { log_err(\u0026quot;[%d] %c != %c\u0026quot;, i, data[i], expects); return 0; } } return 1; } int main(int argc, char *argv[]) { char from[1003] = { 'a' }; char to[1003] = { 'c' }; int rc = 0; // setup the from to have some stuff memset(from, 'x', 1003); // set it to a failure mode memset(to, 'y', 1003); check(valid_copy(to, 1003, 'y'), \u0026quot;Not initialized right.\u0026quot;); // use normal copy to rc = normal_copy(from, to, 1003); check(rc == 1003, \u0026quot;Normal copy failed: %d\u0026quot;, rc); check(valid_copy(to, 1003, 'x'), \u0026quot;Normal copy failed.\u0026quot;); // reset memset(to, 'y', 1003); // duffs version rc = duffs_device(from, to, 1003); check(rc == 1003, \u0026quot;Duff's device failed: %d\u0026quot;, rc); check(valid_copy(to, 1003, 'x'), \u0026quot;Duff's device failed copy.\u0026quot;); // reset memset(to, 'y', 1003); // my version rc = zeds_device(from, to, 1003); check(rc == 1003, \u0026quot;Zed's device failed: %d\u0026quot;, rc); check(valid_copy(to, 1003, 'x'), \u0026quot;Zed's device failed copy.\u0026quot;); return 0; error: return 1; }  Remember that this is bad code. It\u0026rsquo;s very interesting though, so struggle with it.\nThe Analysis\nBefore you continue, try to figure out what this does. Consider it a debugging problem.\nClues\n Print this code out so that you can write on some paper. Write each of the variables in a table as they look when they get initialized right before the switch-statement. Follow the logic to the switch, then do the jump to the right case. Update the variables, including the to, from, and the arrays they point at.  Clues\n When you get to the while part or my goto alternative, check your variables, and then follow the logic either back to the top of the do-while or to where the again label is located. Follow through this manual tracing, updating the variables, until you\u0026rsquo;re sure you see how this flows.  Pause!\nI will then show you the solution so pause if you do NOT want to see it yet.\nSolving It\nWatch me walk through how this works to see if it matches what you did.\nExtra Credit\n Never use this again. Go look at the Wikipedia entry for Duff\u0026rsquo;s device and see if you can spot the error. Read the article, compare it to the version I have here, and try to understand why the Wikipedia code won\u0026rsquo;t work for you but worked for Tom Duff. Create a set of macros that lets you create any length of device like this. For example, what if you wanted to have 32 case statements and didn\u0026rsquo;t want to write out all of them? Can you do a macro that lays down eight at a time?  Extra Credit\n Change the main to conduct some speed tests to see which one is really the fastest. Read about memcpy, memmove, and memset, and also compare their speed. Never use this again!  Exercise 24 Input, Output, Files The Plan\n Learn the basics of working with files in C. Get an initial list of the \u0026ldquo;f-functions\u0026rdquo;.  The Code\n.\\ex24\\ex24.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; #define MAX_DATA 100 typedef enum EyeColor { BLUE_EYES, GREEN_EYES, BROWN_EYES, BLACK_EYES, OTHER_EYES } EyeColor; const char *EYE_COLOR_NAMES[] = { \u0026quot;Blue\u0026quot;, \u0026quot;Green\u0026quot;, \u0026quot;Brown\u0026quot;, \u0026quot;Black\u0026quot;, \u0026quot;Other\u0026quot; }; typedef struct Person { int age; char first_name[MAX_DATA]; char last_name[MAX_DATA]; EyeColor eyes; float income; } Person; int main(int argc, char *argv[]) { Person you = {.age = 0 }; int i = 0; char *in = NULL; printf(\u0026quot;What's your First Name? \u0026quot;); in = fgets(you.first_name, MAX_DATA - 1, stdin); check(in != NULL, \u0026quot;Failed to read first name.\u0026quot;); printf(\u0026quot;What's your Last Name? \u0026quot;); in = fgets(you.last_name, MAX_DATA - 1, stdin); check(in != NULL, \u0026quot;Failed to read last name.\u0026quot;); printf(\u0026quot;How old are you? \u0026quot;); int rc = fscanf(stdin, \u0026quot;%d\u0026quot;, \u0026amp;you.age); check(rc \u0026gt; 0, \u0026quot;You have to enter a number.\u0026quot;); printf(\u0026quot;What color are your eyes:\\n\u0026quot;); for (i = 0; i \u0026lt;= OTHER_EYES; i++) { printf(\u0026quot;%d) %s\\n\u0026quot;, i + 1, EYE_COLOR_NAMES[i]); } printf(\u0026quot;\u0026gt; \u0026quot;); int eyes = -1; rc = fscanf(stdin, \u0026quot;%d\u0026quot;, \u0026amp;eyes); check(rc \u0026gt; 0, \u0026quot;You have to enter a number.\u0026quot;); you.eyes = eyes - 1; check(you.eyes \u0026lt;= OTHER_EYES \u0026amp;\u0026amp; you.eyes \u0026gt;= 0, \u0026quot;Do it right, that's not an option.\u0026quot;); printf(\u0026quot;How much do you make an hour? \u0026quot;); rc = fscanf(stdin, \u0026quot;%f\u0026quot;, \u0026amp;you.income); check(rc \u0026gt; 0, \u0026quot;Enter a floating point number.\u0026quot;); printf(\u0026quot;----- RESULTS -----\\n\u0026quot;); printf(\u0026quot;First Name: %s\u0026quot;, you.first_name); printf(\u0026quot;Last Name: %s\u0026quot;, you.last_name); printf(\u0026quot;Age: %d\\n\u0026quot;, you.age); printf(\u0026quot;Eyes: %s\\n\u0026quot;, EYE_COLOR_NAMES[you.eyes]); printf(\u0026quot;Income: %f\\n\u0026quot;, you.income); return 0; error: return -1; }  The Analysis\nBreaking It\n Trying out fgets and the problems with gets. Feed it /dev/urandom to give it garbage.  Extra Credit\n Rewrite this to not use fscanf at all. You\u0026rsquo;ll need to use functions like atoi to convert the input strings to numbers. Change this to use plain scanf instead of fscanf to see what the difference is. Fix it so that their input names get stripped of the trailing newline characters and any whites pace.  Extra Credit\n Use scanf to write a function that reads one character at a time and files in the names but doesn\u0026rsquo;t go past the end. Make this function generic so it can take a size for the string, but just make sure you end the string with '\\0' no matter what.  Exercise 25 Variable Argument Functions The Plan\n Use variable argument functions. Write our own simple version of scanf.  The Code\n.\\ex25\\ex25.c\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdarg.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; #define MAX_DATA 100 int read_string(char **out_string, int max_buffer) { *out_string = calloc(1, max_buffer + 1); check_mem(*out_string); char *result = fgets(*out_string, max_buffer, stdin); check(result != NULL, \u0026quot;Input error.\u0026quot;); return 0; error: if (*out_string) free(*out_string); *out_string = NULL; return -1; } int read_int(int *out_int) { char *input = NULL; int rc = read_string(\u0026amp;input, MAX_DATA); check(rc == 0, \u0026quot;Failed to read number.\u0026quot;); *out_int = atoi(input); free(input); return 0; error: if (input) free(input); return -1; } int read_scan(const char *fmt, ...) { int i = 0; int rc = 0; int *out_int = NULL; char *out_char = NULL; char **out_string = NULL; int max_buffer = 0; va_list argp; va_start(argp, fmt); for (i = 0; fmt[i] != '\\0'; i++) { if (fmt[i] == '%') { i++; switch (fmt[i]) { case '\\0': sentinel(\u0026quot;Invalid format, you ended with %%.\u0026quot;); break; case 'd': out_int = va_arg(argp, int *); rc = read_int(out_int); check(rc == 0, \u0026quot;Failed to read int.\u0026quot;); break; case 'c': out_char = va_arg(argp, char *); *out_char = fgetc(stdin); break; case 's': max_buffer = va_arg(argp, int); out_string = va_arg(argp, char **); rc = read_string(out_string, max_buffer); check(rc == 0, \u0026quot;Failed to read string.\u0026quot;); break; default: sentinel(\u0026quot;Invalid format.\u0026quot;); } } else { fgetc(stdin); } check(!feof(stdin) \u0026amp;\u0026amp; !ferror(stdin), \u0026quot;Input error.\u0026quot;); } va_end(argp); return 0; error: va_end(argp); return -1; } int main(int argc, char *argv[]) { char *first_name = NULL; char initial = ' '; char *last_name = NULL; int age = 0; printf(\u0026quot;What's your first name? \u0026quot;); int rc = read_scan(\u0026quot;%s\u0026quot;, MAX_DATA, \u0026amp;first_name); check(rc == 0, \u0026quot;Failed first name.\u0026quot;); printf(\u0026quot;What's your initial? \u0026quot;); rc = read_scan(\u0026quot;%c\\n\u0026quot;, \u0026amp;initial); check(rc == 0, \u0026quot;Failed initial.\u0026quot;); printf(\u0026quot;What's your last name? \u0026quot;); rc = read_scan(\u0026quot;%s\u0026quot;, MAX_DATA, \u0026amp;last_name); check(rc == 0, \u0026quot;Failed last name.\u0026quot;); printf(\u0026quot;How old are you? \u0026quot;); rc = read_scan(\u0026quot;%d\u0026quot;, \u0026amp;age); printf(\u0026quot;---- RESULTS ----\\n\u0026quot;); printf(\u0026quot;First Name: %s\u0026quot;, first_name); printf(\u0026quot;Initial: '%c'\\n\u0026quot;, initial); printf(\u0026quot;Last Name: %s\u0026quot;, last_name); printf(\u0026quot;Age: %d\\n\u0026quot;, age); free(first_name); free(last_name); return 0; error: return -1; }  The Analysis\nBreaking It\n Change the code so that you forget to pass in the initial size for \u0026lsquo;%s\u0026rsquo; formats. Give it more data than MAX_DATA, and then see how omitting calloc in read_string changes how it works. There\u0026rsquo;s a problem where fgets eats the newlines, so try to fix that using fgetc but leave out the \\0 that ends the string.  Extra Credit\n Make double and triple sure that you know what each of the out_ variables are doing. Most importantly, you should know what is out_string is and how it\u0026rsquo;s a pointer to a pointer, , so that you understand when you\u0026rsquo;re setting the pointer versus the contents is important. Break down each of the  Extra Credit\n Write a similar function to printf that uses the varargs system, and rewrite main to use it. As usual, read the man page on all of this so that you know what it does on your platform. Some platforms will use macros, others will use functions, and some will have these do nothing. It all depends on the compiler and the platform you use.  Exercise 26 Project logfind The Plan\nAttempt your first project!\nlogfind\nHow Projects Work\nThe projects in this book are designed to make you apply what you know so far to something \u0026ldquo;real world\u0026rdquo;.\n I will tell you when to pause so you can try to solve it yourself. You will be given the challenge. Pause! You will be given clues. Pause! Finally the solution. Then I try to break my own solution.  The Code\nlogfind.1\n.\\ex26\\logfind.1\\logfind.c\n#include \u0026quot;dbg.h\u0026quot; int main(int argc, char *argv[]) { check(argc \u0026gt; 2, \u0026quot;USAGE: logfind word word word\u0026quot;); return 0; error: return 1; }  .\\ex26\\logfind.1\\Makefile\nCFLAGS=-Wall -g all: logfind ./logfind || true ./logfind test test test  logfind.2\n.\\ex26\\logfind.2\\logfind.c\n#include \u0026quot;dbg.h\u0026quot; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; const size_t MAX_LINE = 1024; int scan_file(const char *filename, int search_len, char *search_for[]) { char *line = calloc(MAX_LINE, 1); FILE *file = fopen(filename, \u0026quot;r\u0026quot;); char *found = NULL; int i = 0; check_mem(line); check(file, \u0026quot;Failed to open file: %s\u0026quot;, filename); // read each line of the file and search that line for the contents while(fgets(line, MAX_LINE-1, file) != NULL \u0026amp;\u0026amp; found == NULL) { for(i = 0; i \u0026lt; search_len \u0026amp;\u0026amp; found == NULL; i++) { found = strcasestr(line, search_for[i]); if(found) { printf(\u0026quot;%s\\n\u0026quot;, filename); } } } free(line); fclose(file); return 0; error: if(line) free(line); if(file) fclose(file); return -1; } int main(int argc, char *argv[]) { check(argc \u0026gt; 1, \u0026quot;USAGE: logfind word word word\u0026quot;); scan_file(\u0026quot;logfind.c\u0026quot;, argc, argv); return 0; error: return 1; }  .\\ex26\\logfind.2\\Makefile\nCFLAGS=-Wall -g all: logfind ./logfind || true ./logfind error clean: rm -f logfind  logfind.3\n.\\ex26\\logfind.3\\logfind.c\n#include \u0026quot;dbg.h\u0026quot; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;glob.h\u0026gt; const size_t MAX_LINE = 1024; int list_files(glob_t *pglob) { char *line = calloc(MAX_LINE, 1); FILE *file = fopen(\u0026quot;.logfind\u0026quot;, \u0026quot;r\u0026quot;); int glob_flags = GLOB_TILDE; int i = 0; int rc = -1; check(pglob != NULL, \u0026quot;Invalid glob_t given.\u0026quot;); check_mem(line); check(file, \u0026quot;Failed to open .logfind. Make that first.\u0026quot;); rc = glob(\u0026quot;*.h\u0026quot;, glob_flags, NULL, pglob); check(rc == 0, \u0026quot;Failed to glob.\u0026quot;); rc = glob(\u0026quot;*.c\u0026quot;, glob_flags | GLOB_APPEND, NULL, pglob); check(rc == 0, \u0026quot;Failed to glob.\u0026quot;); for(i = 0; i \u0026lt; pglob-\u0026gt;gl_pathc; i++) { debug(\u0026quot;Matched file: %s\u0026quot;, pglob-\u0026gt;gl_pathv[i]); } rc = 0; // all good error: // fallthrough if(line) free(line); return rc; } int scan_file(const char *filename, int search_len, char *search_for[]) { char *line = calloc(MAX_LINE, 1); FILE *file = fopen(filename, \u0026quot;r\u0026quot;); char *found = NULL; int i = 0; check_mem(line); check(file, \u0026quot;Failed to open file: %s\u0026quot;, filename); // read each line of the file and search that line for the contents while(fgets(line, MAX_LINE-1, file) != NULL \u0026amp;\u0026amp; found == NULL) { for(i = 0; i \u0026lt; search_len \u0026amp;\u0026amp; found == NULL; i++) { found = strcasestr(line, search_for[i]); if(found) { printf(\u0026quot;%s\\n\u0026quot;, filename); } } } free(line); fclose(file); return 0; error: if(line) free(line); if(file) fclose(file); return -1; } int main(int argc, char *argv[]) { int i = 0; glob_t files_found; check(argc \u0026gt; 1, \u0026quot;USAGE: logfind word word word\u0026quot;); check(list_files(\u0026amp;files_found) == 0, \u0026quot;Failed to list files.\u0026quot;); for(i = 0; i \u0026lt; files_found.gl_pathc; i++) { scan_file(files_found.gl_pathv[i], argc, argv); } globfree(\u0026amp;files_found); return 0; error: return 1; }  .\\ex26\\logfind.3\\Makefile\nCFLAGS=-Wall -g all: logfind ./logfind || true ./logfind error clean: rm -f logfind  logfind.4\n.\\ex26\\logfind.4\\logfind.c\n#define NDEBUG #include \u0026quot;dbg.h\u0026quot; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;glob.h\u0026gt; const size_t MAX_LINE = 1024; int list_files(glob_t *pglob) { char *line = calloc(MAX_LINE, 1); FILE *file = fopen(\u0026quot;.logfind\u0026quot;, \u0026quot;r\u0026quot;); int glob_flags = GLOB_TILDE; int i = 0; int rc = -1; check(pglob != NULL, \u0026quot;Invalid glob_t given.\u0026quot;); check_mem(line); check(file, \u0026quot;Failed to open .logfind. Make that first.\u0026quot;); while(fgets(line, MAX_LINE-1, file) != NULL) { line[strlen(line) - 1] = '\\0'; // drop the \\n ending debug(\u0026quot;Globbing %s\u0026quot;, line); rc = glob(line, glob_flags, NULL, pglob); check(rc == 0 || rc == GLOB_NOMATCH, \u0026quot;Failed to glob.\u0026quot;); // dumb work around to a stupid design in glob if(glob_flags == GLOB_TILDE) glob_flags |= GLOB_APPEND; } for(i = 0; i \u0026lt; pglob-\u0026gt;gl_pathc; i++) { debug(\u0026quot;Matched file: %s\u0026quot;, pglob-\u0026gt;gl_pathv[i]); } rc = 0; // all good error: // fallthrough if(line) free(line); return rc; } int scan_file(const char *filename, int search_len, char *search_for[]) { char *line = calloc(MAX_LINE, 1); FILE *file = fopen(filename, \u0026quot;r\u0026quot;); char *found = NULL; int i = 0; check_mem(line); check(file, \u0026quot;Failed to open file: %s\u0026quot;, filename); // read each line of the file and search that line for the contents while(fgets(line, MAX_LINE-1, file) != NULL \u0026amp;\u0026amp; found == NULL) { for(i = 0; i \u0026lt; search_len \u0026amp;\u0026amp; found == NULL; i++) { found = strcasestr(line, search_for[i]); if(found) { printf(\u0026quot;%s\\n\u0026quot;, filename); } } } free(line); fclose(file); return 0; error: if(line) free(line); if(file) fclose(file); return -1; } int main(int argc, char *argv[]) { int i = 0; glob_t files_found; check(argc \u0026gt; 1, \u0026quot;USAGE: logfind word word word\u0026quot;); check(list_files(\u0026amp;files_found) == 0, \u0026quot;Failed to list files.\u0026quot;); for(i = 0; i \u0026lt; files_found.gl_pathc; i++) { scan_file(files_found.gl_pathv[i], argc, argv); } globfree(\u0026amp;files_found); return 0; error: return 1; }  .\\ex26\\logfind.4\\Makefile\nCFLAGS=-Wall -g all: logfind ./logfind || true ./logfind MAX_LINE clean: rm -f logfind  logfind.5\n.\\ex26\\logfind.5\\logfind.c\n#define NDEBUG #include \u0026quot;dbg.h\u0026quot; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;glob.h\u0026gt; const size_t MAX_LINE = 1024; int list_files(glob_t *pglob) { char *line = calloc(MAX_LINE, 1); FILE *file = fopen(\u0026quot;.logfind\u0026quot;, \u0026quot;r\u0026quot;); int glob_flags = GLOB_TILDE; int i = 0; int rc = -1; check(pglob != NULL, \u0026quot;Invalid glob_t given.\u0026quot;); check_mem(line); check(file, \u0026quot;Failed to open .logfind. Make that first.\u0026quot;); while(fgets(line, MAX_LINE-1, file) != NULL) { line[strlen(line) - 1] = '\\0'; // drop the \\n ending debug(\u0026quot;Globbing %s\u0026quot;, line); rc = glob(line, glob_flags, NULL, pglob); check(rc == 0 || rc == GLOB_NOMATCH, \u0026quot;Failed to glob.\u0026quot;); // dumb work around to a stupid design in glob if(glob_flags == GLOB_TILDE) glob_flags |= GLOB_APPEND; } for(i = 0; i \u0026lt; pglob-\u0026gt;gl_pathc; i++) { debug(\u0026quot;Matched file: %s\u0026quot;, pglob-\u0026gt;gl_pathv[i]); } rc = 0; // all good error: // fallthrough if(line) free(line); return rc; } int found_it(int use_or, int found_count, int search_len) { debug(\u0026quot;use_or: %d, found_count: %d, search_len: %d\u0026quot;, use_or, found_count, search_len); if(use_or \u0026amp;\u0026amp; found_count \u0026gt; 0) { return 1; } else if(!use_or \u0026amp;\u0026amp; found_count == search_len) { return 1; } else { return 0; } } int scan_file(const char *filename, int use_or, int search_len, char *search_for[]) { char *line = calloc(MAX_LINE, 1); FILE *file = fopen(filename, \u0026quot;r\u0026quot;); int found_count = 0; int i = 0; check_mem(line); check(file, \u0026quot;Failed to open file: %s\u0026quot;, filename); // read each line of the file and search that line for the contents while(fgets(line, MAX_LINE-1, file) != NULL) { for(i = 0; i \u0026lt; search_len; i++) { if(strcasestr(line, search_for[i]) != NULL) { debug(\u0026quot;file: %s, line: %s, search: %s\u0026quot;, filename, line, search_for[i]); found_count++; } } if(found_it(use_or, found_count, search_len)) { printf(\u0026quot;%s\\n\u0026quot;, filename); break; } else { found_count = 0; } } free(line); fclose(file); return 0; error: if(line) free(line); if(file) fclose(file); return -1; } int parse_args(int *use_or, int *argc, char **argv[]) { (*argc)--; (*argv)++; if(strcmp((*argv)[0], \u0026quot;-o\u0026quot;) == 0) { *use_or = 1; (*argc)--; // skip the -o (*argv)++; check(*argc \u0026gt; 1, \u0026quot;You need words after -o.\u0026quot;); } else { use_or = 0; } return 0; error: return -1; } int main(int argc, char *argv[]) { int i = 0; int use_or = 0; glob_t files_found; check(argc \u0026gt; 1, \u0026quot;USAGE: logfind [-o] words\u0026quot;); check(parse_args(\u0026amp;use_or, \u0026amp;argc, \u0026amp;argv) == 0, \u0026quot;USAGE: logfind [-o] words\u0026quot;); check(list_files(\u0026amp;files_found) == 0, \u0026quot;Failed to list files.\u0026quot;); for(i = 0; i \u0026lt; files_found.gl_pathc; i++) { scan_file(files_found.gl_pathv[i], use_or, argc, argv); } globfree(\u0026amp;files_found); return 0; error: return 1; }  .\\ex26\\logfind.5\\Makefile\nCFLAGS=-Wall -g all: logfind ./logfind || true ./logfind MAX_LINE ./logfind error MAX LINE ./logfind -o error MAX LINE clean: rm -f logfind  If you ever get super stuck, you can visit:\nTo get all of the code for this book.\nThe Challenge\nI want a tool called logfind that let\u0026rsquo;s me search through log files for text. This tool is a specialized version of another tool called grep, but designed only for log files on a system.\nThe Challenge\n This tool takes any sequence of words and assumes I mean \u0026ldquo;and\u0026rdquo; for them. So logfind zedshaw smart guy will find all files that have zedshaw and smart and guy in them. It takes an optional argument of -o if the parameters are meant to be or logic. It loads the list of allowed log files from ~/.logfind.  The Challenge\n The list of file names can be anything that the glob function allows. Refer to man 3 glob to see how this works. I suggest starting with just a flat list of exact files, and then add glob functionality. You should output the matching lines as you scan, and try to match them as fast as possible.  Demo\nHere is a demo of me using the one I wrote.\nPause!\nNow it\u0026rsquo;s time for you to attempt to solve it from just this idea.\nThe Clues\n Remember to solve it a piece at a time. Start with just getting the arguments. Then figure out how to open files and just open the ones in this directory. Then figure out how to read the files. Then find out how to find the arguments in the files. Then figure out how glob works. Then use glob to find the files and open them.  It helps to do each of these in main() then \u0026ldquo;carve\u0026rdquo; them out into their own functions.\nPause!\nThe Solution\nBreaking It\nExercise 27 Creative and Defensive Programming logfind.5\n.\\ex27\\logfind.5\\logfind.c\n#define NDEBUG #include \u0026quot;dbg.h\u0026quot; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;glob.h\u0026gt; #include \u0026lt;assert.h\u0026gt; const size_t MAX_LINE = 1024; int list_files(glob_t *pglob) { char *line = calloc(MAX_LINE, 1); FILE *file = fopen(\u0026quot;.logfind\u0026quot;, \u0026quot;r\u0026quot;); int glob_flags = GLOB_TILDE; int i = 0; int rc = -1; check(pglob != NULL, \u0026quot;Invalid glob_t given.\u0026quot;); check_mem(line); check(file, \u0026quot;Failed to open .logfind. Make that first.\u0026quot;); while(fgets(line, MAX_LINE-1, file) != NULL) { size_t line_length = strnlen(line, MAX_LINE - 1); assert(line_length \u0026lt; MAX_LINE \u0026amp;\u0026amp; \u0026quot;Got a line length too long.\u0026quot;); line[line_length] = '\\0'; // drop the \\n ending debug(\u0026quot;Globbing %s\u0026quot;, line); rc = glob(line, glob_flags, NULL, pglob); check(rc == 0 || rc == GLOB_NOMATCH, \u0026quot;Failed to glob.\u0026quot;); // dumb work around to a stupid design in glob if(glob_flags == GLOB_TILDE) glob_flags |= GLOB_APPEND; } for(i = 0; i \u0026lt; pglob-\u0026gt;gl_pathc; i++) { debug(\u0026quot;Matched file: %s\u0026quot;, pglob-\u0026gt;gl_pathv[i]); } rc = 0; // all good error: // fallthrough if(line) free(line); return rc; } int found_it(int use_or, int found_count, int search_len) { debug(\u0026quot;use_or: %d, found_count: %d, search_len: %d\u0026quot;, use_or, found_count, search_len); if(use_or \u0026amp;\u0026amp; found_count \u0026gt; 0) { return 1; } else if(!use_or \u0026amp;\u0026amp; found_count == search_len) { return 1; } else { return 0; } } int scan_file(const char *filename, int use_or, int search_len, char *search_for[]) { char *line = calloc(MAX_LINE, 1); FILE *file = fopen(filename, \u0026quot;r\u0026quot;); int found_count = 0; int i = 0; check_mem(line); check(file, \u0026quot;Failed to open file: %s\u0026quot;, filename); // read each line of the file and search that line for the contents while(fgets(line, MAX_LINE-1, file) != NULL) { for(i = 0; i \u0026lt; search_len; i++) { if(strcasestr(line, search_for[i]) != NULL) { debug(\u0026quot;file: %s, line: %s, search: %s\u0026quot;, filename, line, search_for[i]); found_count++; } } if(found_it(use_or, found_count, search_len)) { printf(\u0026quot;%s\\n\u0026quot;, filename); break; } else { found_count = 0; } } free(line); fclose(file); return 0; error: if(line) free(line); if(file) fclose(file); return -1; } int parse_args(int *use_or, int *argc, char **argv[]) { (*argc)--; (*argv)++; if(strcmp((*argv)[0], \u0026quot;-o\u0026quot;) == 0) { *use_or = 1; (*argc)--; // skip the -o (*argv)++; check(*argc \u0026gt; 1, \u0026quot;You need words after -o.\u0026quot;); } else { *use_or = 0; } return 0; error: return -1; } int main(int argc, char *argv[]) { int i = 0; int use_or = 1; glob_t files_found; check(argc \u0026gt; 1, \u0026quot;USAGE: logfind [-o] words\u0026quot;); check(parse_args(\u0026amp;use_or, \u0026amp;argc, \u0026amp;argv) == 0, \u0026quot;USAGE: logfind [-o] words\u0026quot;); check(list_files(\u0026amp;files_found) == 0, \u0026quot;Failed to list files.\u0026quot;); for(i = 0; i \u0026lt; files_found.gl_pathc; i++) { scan_file(files_found.gl_pathv[i], use_or, argc, argv); } globfree(\u0026amp;files_found); return 0; error: return 1; }  .\\ex27\\logfind.5\\Makefile\nCFLAGS=-Wall -g all: logfind ./logfind || true ./logfind MAX_LINE ./logfind error MAX LINE ./logfind -o error MAX LINE clean: rm -f logfind  logfind.5\n.\\ex27\\logfind.5\\logfind.c\n#define NDEBUG #include \u0026quot;dbg.h\u0026quot; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;glob.h\u0026gt; #include \u0026lt;assert.h\u0026gt; const size_t MAX_LINE = 1024; int list_files(glob_t *pglob) { char *line = calloc(MAX_LINE, 1); FILE *file = fopen(\u0026quot;.logfind\u0026quot;, \u0026quot;r\u0026quot;); int glob_flags = GLOB_TILDE; int i = 0; int rc = -1; check(pglob != NULL, \u0026quot;Invalid glob_t given.\u0026quot;); check_mem(line); check(file, \u0026quot;Failed to open .logfind. Make that first.\u0026quot;); while(fgets(line, MAX_LINE-1, file) != NULL) { size_t line_length = strnlen(line, MAX_LINE - 1); assert(line_length \u0026lt; MAX_LINE \u0026amp;\u0026amp; \u0026quot;Got a line length too long.\u0026quot;); line[line_length] = '\\0'; // drop the \\n ending debug(\u0026quot;Globbing %s\u0026quot;, line); rc = glob(line, glob_flags, NULL, pglob); check(rc == 0 || rc == GLOB_NOMATCH, \u0026quot;Failed to glob.\u0026quot;); // dumb work around to a stupid design in glob if(glob_flags == GLOB_TILDE) glob_flags |= GLOB_APPEND; } for(i = 0; i \u0026lt; pglob-\u0026gt;gl_pathc; i++) { debug(\u0026quot;Matched file: %s\u0026quot;, pglob-\u0026gt;gl_pathv[i]); } rc = 0; // all good error: // fallthrough if(line) free(line); return rc; } int found_it(int use_or, int found_count, int search_len) { debug(\u0026quot;use_or: %d, found_count: %d, search_len: %d\u0026quot;, use_or, found_count, search_len); if(use_or \u0026amp;\u0026amp; found_count \u0026gt; 0) { return 1; } else if(!use_or \u0026amp;\u0026amp; found_count == search_len) { return 1; } else { return 0; } } int scan_file(const char *filename, int use_or, int search_len, char *search_for[]) { char *line = calloc(MAX_LINE, 1); FILE *file = fopen(filename, \u0026quot;r\u0026quot;); int found_count = 0; int i = 0; check_mem(line); check(file, \u0026quot;Failed to open file: %s\u0026quot;, filename); // read each line of the file and search that line for the contents while(fgets(line, MAX_LINE-1, file) != NULL) { for(i = 0; i \u0026lt; search_len; i++) { if(strcasestr(line, search_for[i]) != NULL) { debug(\u0026quot;file: %s, line: %s, search: %s\u0026quot;, filename, line, search_for[i]); found_count++; } } if(found_it(use_or, found_count, search_len)) { printf(\u0026quot;%s\\n\u0026quot;, filename); break; } else { found_count = 0; } } free(line); fclose(file); return 0; error: if(line) free(line); if(file) fclose(file); return -1; } int parse_args(int *use_or, int *argc, char **argv[]) { (*argc)--; (*argv)++; if(strcmp((*argv)[0], \u0026quot;-o\u0026quot;) == 0) { *use_or = 1; (*argc)--; // skip the -o (*argv)++; check(*argc \u0026gt; 1, \u0026quot;You need words after -o.\u0026quot;); } else { *use_or = 0; } return 0; error: return -1; } int main(int argc, char *argv[]) { int i = 0; int use_or = 1; glob_t files_found; check(argc \u0026gt; 1, \u0026quot;USAGE: logfind [-o] words\u0026quot;); check(parse_args(\u0026amp;use_or, \u0026amp;argc, \u0026amp;argv) == 0, \u0026quot;USAGE: logfind [-o] words\u0026quot;); check(list_files(\u0026amp;files_found) == 0, \u0026quot;Failed to list files.\u0026quot;); for(i = 0; i \u0026lt; files_found.gl_pathc; i++) { scan_file(files_found.gl_pathv[i], use_or, argc, argv); } globfree(\u0026amp;files_found); return 0; error: return 1; }  .\\ex27\\logfind.5\\Makefile\nCFLAGS=-Wall -g all: logfind ./logfind || true ./logfind MAX_LINE ./logfind error MAX LINE ./logfind -o error MAX LINE clean: rm -f logfind  Read The Book\nThis video is a demonstration of the concepts in the book.\nGo read the book.\nDemonstration\nI will demonstrate each of the following:\n Fail early and openly. Document assumptions. Prevention over documentation. Automate everything. Simplify and clarify. Question authority.  Fail Early and Openly\nDocument Assumptions\nPrevention over Documentation\nAutomate Everything\nSimplify and Clarify\nQuestion Authority\nBonus: Assume Nothing\nExercise 28 Intermediate Makefiles The Plan\n Learn how to create a project skeleton to make starting easier. Learn more advanced GNU make tricks.  The Skeleton\n.\\ex28\\c-skeleton\n.\\ex28\\c-skeleton\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex28\\c-skeleton\\src\\libex29.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; int print_a_message(const char *msg) { printf(\u0026quot;A STRING: %s\\n\u0026quot;, msg); return 0; } int uppercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, toupper(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int lowercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, tolower(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int fail_on_purpose(const char *msg) { return 1; }  .\\ex28\\c-skeleton\\tests\\libex29_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; typedef int (*lib_function) (const char *data); char *lib_file = \u0026quot;build/libYOUR_LIBRARY.so\u0026quot;; void *lib = NULL; int check_function(const char *func_to_run, const char *data, int expected) { lib_function func = dlsym(lib, func_to_run); check(func != NULL, \u0026quot;Did not find %s function in the library %s: %s\u0026quot;, func_to_run, lib_file, dlerror()); int rc = func(data); check(rc == expected, \u0026quot;Function %s return %d for data: %s\u0026quot;, func_to_run, rc, data); return 1; error: return 0; } char *test_dlopen() { lib = dlopen(lib_file, RTLD_NOW); mu_assert(lib != NULL, \u0026quot;Failed to open the library to test.\u0026quot;); return NULL; } char *test_functions() { mu_assert(check_function(\u0026quot;print_a_message\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;print_a_message failed.\u0026quot;); mu_assert(check_function(\u0026quot;uppercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;uppercase failed.\u0026quot;); mu_assert(check_function(\u0026quot;lowercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;lowercase failed.\u0026quot;); return NULL; } char *test_failures() { mu_assert(check_function(\u0026quot;fail_on_purpose\u0026quot;, \u0026quot;Hello\u0026quot;, 1), \u0026quot;fail_on_purpose should fail.\u0026quot;); return NULL; } char *test_dlclose() { int rc = dlclose(lib); mu_assert(rc == 0, \u0026quot;Failed to close lib.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_dlopen); mu_run_test(test_functions); mu_run_test(test_failures); mu_run_test(test_dlclose); return NULL; } RUN_TESTS(all_tests);  The video is probably easier to follow than the book. Watch me do this.\nUsing The Skeleton\n.\\ex28\\c-skeleton\n.\\ex28\\c-skeleton\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex28\\c-skeleton\\src\\libex29.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; int print_a_message(const char *msg) { printf(\u0026quot;A STRING: %s\\n\u0026quot;, msg); return 0; } int uppercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, toupper(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int lowercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, tolower(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int fail_on_purpose(const char *msg) { return 1; }  .\\ex28\\c-skeleton\\tests\\libex29_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; typedef int (*lib_function) (const char *data); char *lib_file = \u0026quot;build/libYOUR_LIBRARY.so\u0026quot;; void *lib = NULL; int check_function(const char *func_to_run, const char *data, int expected) { lib_function func = dlsym(lib, func_to_run); check(func != NULL, \u0026quot;Did not find %s function in the library %s: %s\u0026quot;, func_to_run, lib_file, dlerror()); int rc = func(data); check(rc == expected, \u0026quot;Function %s return %d for data: %s\u0026quot;, func_to_run, rc, data); return 1; error: return 0; } char *test_dlopen() { lib = dlopen(lib_file, RTLD_NOW); mu_assert(lib != NULL, \u0026quot;Failed to open the library to test.\u0026quot;); return NULL; } char *test_functions() { mu_assert(check_function(\u0026quot;print_a_message\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;print_a_message failed.\u0026quot;); mu_assert(check_function(\u0026quot;uppercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;uppercase failed.\u0026quot;); mu_assert(check_function(\u0026quot;lowercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;lowercase failed.\u0026quot;); return NULL; } char *test_failures() { mu_assert(check_function(\u0026quot;fail_on_purpose\u0026quot;, \u0026quot;Hello\u0026quot;, 1), \u0026quot;fail_on_purpose should fail.\u0026quot;); return NULL; } char *test_dlclose() { int rc = dlclose(lib); mu_assert(rc == 0, \u0026quot;Failed to close lib.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_dlopen); mu_run_test(test_functions); mu_run_test(test_failures); mu_run_test(test_dlclose); return NULL; } RUN_TESTS(all_tests);  Now I\u0026rsquo;ll use the skeleton to start a simple project for the next exercise.\nThe Analysis\nLet\u0026rsquo;s look at Makefile in depth.\nExtra Credit\nExercise 29 Libraries and Linking The Plan\n Learn about libraries and how to link against them. Learn how to load a dynamic library from inside C.  The Code\n.\\ex29\\ex29.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; typedef int (*lib_function) (const char *data); int main(int argc, char *argv[]) { int rc = 0; check(argc == 4, \u0026quot;USAGE: ex29 libex29.so function data\u0026quot;); char *lib_file = argv[1]; char *func_to_run = argv[2]; char *data = argv[3]; void *lib = dlopen(lib_file, RTLD_NOW); check(lib != NULL, \u0026quot;Failed to open the library %s: %s\u0026quot;, lib_file, dlerror()); lib_function func = dlsym(lib, func_to_run); check(func != NULL, \u0026quot;Did not find %s function in the library %s: %s\u0026quot;, func_to_run, lib_file, dlerror()); rc = func(data); check(rc == 0, \u0026quot;Function %s return %d for data: %s\u0026quot;, func_to_run, rc, data); rc = dlclose(lib); check(rc == 0, \u0026quot;Failed to close %s\u0026quot;, lib_file); return 0; error: return 1; }  .\\ex29\\libex29.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; int print_a_message(const char *msg) { printf(\u0026quot;A STRING: %s\\n\u0026quot;, msg); return 0; } int uppercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, toupper(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int lowercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, tolower(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int fail_on_purpose(const char *msg) { return 1; }  I\u0026rsquo;ll use the project I started from the previous exercise. This covers some of the extra credit.\nThe Analysis\nThis analysis might take a while, but be sure you know Exercise 28 well.\nBreaking It\n Wreck the libex29.so file.  Extra Credit\n Were you paying attention to the bad code I have in the libex29.c functions? Do you see how, even though I use a for-loop they still check for '\\0' endings? Fix this so that the functions always take a length for the string to work with inside the function. Read the man dlopen documentation and read about all of the related functions. Try some of the other options to dlopen beside RTLD_NOW.  Exercise 30 Automated Testing The Plan\nContinue the Exercise 28-29 project and add automated tests to it.\nWhy Automate Tests\nYou are a programmer. Your job is automating.\nEVERYTHING\nThe Code\n.\\ex30\\ex30.c\n#include \u0026quot;minunit.h\u0026quot; char *test_dlopen(int stuff) { return NULL; } char *test_functions() { return NULL; } char *test_failures() { return NULL; } char *test_dlclose() { return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_dlopen); mu_run_test(test_functions); mu_run_test(test_failures); mu_run_test(test_dlclose); return NULL; } RUN_TESTS(all_tests);  Adding It To libex29\nBreaking It\n Making tests fail first is useful.  Extra Credit\n This works but it\u0026rsquo;s probably a bit messy. Clean the c-skeleton directory up so that it has all of these files, but remove any of the code related to Exercise 29. You should be able to copy this directory over and kick-start new projects without much editing. Study the runtests.sh, and then go read about bash syntax so you know what it does. Do you think you could write a C version of this script?  Exercise 31 Common Undefined Behavior The Plan\nReview the issues around Undefined and Unspecified Behavior (UB).\nRead The Book\nThe book lists many of the UB and discusses why they are important to know about.\nThe Code\n.\\ex31\\ex31.c\n#include \u0026lt;unistd.h\u0026gt; int main(int argc, char *argv[]) { int i = 0; while (i \u0026lt; 100) { usleep(3000); } return 0; }  There is no code for this exercise, just a quick discussion for the book.\nUndefined Behavior\n Compiler writers can do whatever they want. This means even nothing, which will ruin you silently. It\u0026rsquo;s best to avoid it.  Unspecified Behavior\n For practical purposes unspecified is the same as undefined.  Handy Tools\n Clang\u0026rsquo;s UB helpful flags. Lint tools and static analyzers.  Extra Credit\nSpend a day reading through as much of the UB as you can and find examples of each. Expect lots of frustration and failure when you do this.\n"
},
{
	"uri": "/coding/c/lcthw-lectures.2/",
	"title": "C Lecture - 2",
	"tags": ["c"],
	"description": "Exercise 32 ~ 40",
	"content": " Author: Zed A. Shaw\nAll content comes from Zed\u0026rsquo;s Lecture Repository and Libraries Repository. All credit goes to Zed.\nExercise 32 Double Linked Lists The Plan\nLearn about your very first data structure:\nDouble Linked Lists\nCreating A liblcthw Project\nWe\u0026rsquo;ll need a project for the rest of the book called liblcthw.\nAlgorithms and Data Structures\nA big step in going from amateur to professional is learning about data structures and algorithms.\nA double linked list is the easiest one.\nDouble Linked Lists Visually\nI\u0026rsquo;ll quickly draw some diagrams to show you how they work.\nAutomated Testing Demo\nYou can enter the code just fine, but watch me write the test.\nCode Reviews\n.\\ex32\\list.h\n#ifndef lcthw_List_h #define lcthw_List_h #include \u0026lt;stdlib.h\u0026gt; struct ListNode; typedef struct ListNode { struct ListNode *next; struct ListNode *prev; void *value; } ListNode; typedef struct List { int count; ListNode *first; ListNode *last; } List; List *List_create(); void List_destroy(List * list); void List_clear(List * list); void List_clear_destroy(List * list); #define List_count(A) ((A)-\u0026gt;count) #define List_first(A) ((A)-\u0026gt;first != NULL ? (A)-\u0026gt;first-\u0026gt;value : NULL) #define List_last(A) ((A)-\u0026gt;last != NULL ? (A)-\u0026gt;last-\u0026gt;value : NULL) void List_push(List * list, void *value); void *List_pop(List * list); void List_unshift(List * list, void *value); void *List_shift(List * list); void *List_remove(List * list, ListNode * node); #define LIST_FOREACH(L, S, M, V) ListNode *_node = NULL;\\ ListNode *V = NULL;\\ for(V = _node = L-\u0026gt;S; _node != NULL; V = _node = _node-\u0026gt;M) #endif  .\\ex32\\list.c\n#include \u0026lt;lcthw/list.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; List *List_create() { return calloc(1, sizeof(List)); } void List_destroy(List * list) { LIST_FOREACH(list, first, next, cur) { if (cur-\u0026gt;prev) { free(cur-\u0026gt;prev); } } free(list-\u0026gt;last); free(list); } void List_clear(List * list) { LIST_FOREACH(list, first, next, cur) { free(cur-\u0026gt;value); } } void List_clear_destroy(List * list) { List_clear(list); List_destroy(list); } void List_push(List * list, void *value) { ListNode *node = calloc(1, sizeof(ListNode)); check_mem(node); node-\u0026gt;value = value; if (list-\u0026gt;last == NULL) { list-\u0026gt;first = node; list-\u0026gt;last = node; } else { list-\u0026gt;last-\u0026gt;next = node; node-\u0026gt;prev = list-\u0026gt;last; list-\u0026gt;last = node; } list-\u0026gt;count++; error: return; } void *List_pop(List * list) { ListNode *node = list-\u0026gt;last; return node != NULL ? List_remove(list, node) : NULL; } void List_unshift(List * list, void *value) { ListNode *node = calloc(1, sizeof(ListNode)); check_mem(node); node-\u0026gt;value = value; if (list-\u0026gt;first == NULL) { list-\u0026gt;first = node; list-\u0026gt;last = node; } else { node-\u0026gt;next = list-\u0026gt;first; list-\u0026gt;first-\u0026gt;prev = node; list-\u0026gt;first = node; } list-\u0026gt;count++; error: return; } void *List_shift(List * list) { ListNode *node = list-\u0026gt;first; return node != NULL ? List_remove(list, node) : NULL; } void *List_remove(List * list, ListNode * node) { void *result = NULL; check(list-\u0026gt;first \u0026amp;\u0026amp; list-\u0026gt;last, \u0026quot;List is empty.\u0026quot;); check(node, \u0026quot;node can't be NULL\u0026quot;); if (node == list-\u0026gt;first \u0026amp;\u0026amp; node == list-\u0026gt;last) { list-\u0026gt;first = NULL; list-\u0026gt;last = NULL; } else if (node == list-\u0026gt;first) { list-\u0026gt;first = node-\u0026gt;next; check(list-\u0026gt;first != NULL, \u0026quot;Invalid list, somehow got a first that is NULL.\u0026quot;); list-\u0026gt;first-\u0026gt;prev = NULL; } else if (node == list-\u0026gt;last) { list-\u0026gt;last = node-\u0026gt;prev; check(list-\u0026gt;last != NULL, \u0026quot;Invalid list, somehow got a next that is NULL.\u0026quot;); list-\u0026gt;last-\u0026gt;next = NULL; } else { ListNode *after = node-\u0026gt;next; ListNode *before = node-\u0026gt;prev; after-\u0026gt;prev = before; before-\u0026gt;next = after; } list-\u0026gt;count--; result = node-\u0026gt;value; free(node); error: return result; }  .\\ex32\\list_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/list.h\u0026gt; #include \u0026lt;assert.h\u0026gt; static List *list = NULL; char *test1 = \u0026quot;test1 data\u0026quot;; char *test2 = \u0026quot;test2 data\u0026quot;; char *test3 = \u0026quot;test3 data\u0026quot;; char *test_create() { list = List_create(); mu_assert(list != NULL, \u0026quot;Failed to create list.\u0026quot;); return NULL; } char *test_destroy() { List_clear_destroy(list); return NULL; } char *test_push_pop() { List_push(list, test1); mu_assert(List_last(list) == test1, \u0026quot;Wrong last value.\u0026quot;); List_push(list, test2); mu_assert(List_last(list) == test2, \u0026quot;Wrong last value\u0026quot;); List_push(list, test3); mu_assert(List_last(list) == test3, \u0026quot;Wrong last value.\u0026quot;); mu_assert(List_count(list) == 3, \u0026quot;Wrong count on push.\u0026quot;); char *val = List_pop(list); mu_assert(val == test3, \u0026quot;Wrong value on pop.\u0026quot;); val = List_pop(list); mu_assert(val == test2, \u0026quot;Wrong value on pop.\u0026quot;); val = List_pop(list); mu_assert(val == test1, \u0026quot;Wrong value on pop.\u0026quot;); mu_assert(List_count(list) == 0, \u0026quot;Wrong count after pop.\u0026quot;); return NULL; } char *test_unshift() { List_unshift(list, test1); mu_assert(List_first(list) == test1, \u0026quot;Wrong first value.\u0026quot;); List_unshift(list, test2); mu_assert(List_first(list) == test2, \u0026quot;Wrong first value\u0026quot;); List_unshift(list, test3); mu_assert(List_first(list) == test3, \u0026quot;Wrong last value.\u0026quot;); mu_assert(List_count(list) == 3, \u0026quot;Wrong count on unshift.\u0026quot;); return NULL; } char *test_remove() { // we only need to test the middle remove case since push/shift // already tests the other cases char *val = List_remove(list, list-\u0026gt;first-\u0026gt;next); mu_assert(val == test2, \u0026quot;Wrong removed element.\u0026quot;); mu_assert(List_count(list) == 2, \u0026quot;Wrong count after remove.\u0026quot;); mu_assert(List_first(list) == test3, \u0026quot;Wrong first after remove.\u0026quot;); mu_assert(List_last(list) == test1, \u0026quot;Wrong last after remove.\u0026quot;); return NULL; } char *test_shift() { mu_assert(List_count(list) != 0, \u0026quot;Wrong count before shift.\u0026quot;); char *val = List_shift(list); mu_assert(val == test3, \u0026quot;Wrong value on shift.\u0026quot;); val = List_shift(list); mu_assert(val == test1, \u0026quot;Wrong value on shift.\u0026quot;); mu_assert(List_count(list) == 0, \u0026quot;Wrong count after shift.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_create); mu_run_test(test_push_pop); mu_run_test(test_unshift); mu_run_test(test_remove); mu_run_test(test_shift); mu_run_test(test_destroy); return NULL; } RUN_TESTS(all_tests);  Later videos will demonstrate how to code review to make code solid.\nImproving It\n You can make List_clear_destroy more efficient by using LIST_FOREACH and doing both free calls inside one loop. You can add asserts for preconditions so that the program isn\u0026rsquo;t given a NULL value for the List *list parameters.  Improving It\n You can add invariants that check that the list\u0026rsquo;s contents are always correct, such as count is never \u0026lt; 0, and if count \u0026gt; 0, then first isn\u0026rsquo;t NULL. You can add documentation to the header file in the form of comments before each struct, function, and macro that describes what it does.  Extra Credit\n Research doubly vs. singly linked lists and when one is preferred over the other. Research the limitations of a doubly linked list. For example, while they are efficient for inserting and deleting elements, they are very slow for iterating over them all. What operations are missing that you can imagine needing? Some examples are copying, joining, and splitting. Implement these operations and write the unit tests for them.  Exercise 33 Linked List Algorithms The Plan\nLearn two sorting algorithms for double linked lists.\nWatch how to conduct a simple code review.\nThe Code\n.\\ex33\\list_algos.h\n#ifndef lcthw_List_algos_h #define lcthw_List_algos_h #include \u0026lt;lcthw/list.h\u0026gt; typedef int (*List_compare) (const void *a, const void *b); int List_bubble_sort(List * list, List_compare cmp); List *List_merge_sort(List * list, List_compare cmp); #endif  .\\ex33\\list_algos.c\n#include \u0026lt;lcthw/list_algos.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; inline void ListNode_swap(ListNode * a, ListNode * b) { void *temp = a-\u0026gt;value; a-\u0026gt;value = b-\u0026gt;value; b-\u0026gt;value = temp; } int List_bubble_sort(List * list, List_compare cmp) { int sorted = 1; if (List_count(list) \u0026lt;= 1) { return 0; // already sorted } do { sorted = 1; LIST_FOREACH(list, first, next, cur) { if (cur-\u0026gt;next) { if (cmp(cur-\u0026gt;value, cur-\u0026gt;next-\u0026gt;value) \u0026gt; 0) { ListNode_swap(cur, cur-\u0026gt;next); sorted = 0; } } } } while (!sorted); return 0; } inline List *List_merge(List * left, List * right, List_compare cmp) { List *result = List_create(); void *val = NULL; while (List_count(left) \u0026gt; 0 || List_count(right) \u0026gt; 0) { if (List_count(left) \u0026gt; 0 \u0026amp;\u0026amp; List_count(right) \u0026gt; 0) { if (cmp(List_first(left), List_first(right)) \u0026lt;= 0) { val = List_shift(left); } else { val = List_shift(right); } List_push(result, val); } else if (List_count(left) \u0026gt; 0) { val = List_shift(left); List_push(result, val); } else if (List_count(right) \u0026gt; 0) { val = List_shift(right); List_push(result, val); } } return result; } List *List_merge_sort(List * list, List_compare cmp) { List *result = NULL; if (List_count(list) \u0026lt;= 1) { return list; } List *left = List_create(); List *right = List_create(); int middle = List_count(list) / 2; LIST_FOREACH(list, first, next, cur) { if (middle \u0026gt; 0) { List_push(left, cur-\u0026gt;value); } else { List_push(right, cur-\u0026gt;value); } middle--; } List *sort_left = List_merge_sort(left, cmp); List *sort_right = List_merge_sort(right, cmp); if (sort_left != left) List_destroy(left); if (sort_right != right) List_destroy(right); result = List_merge(sort_left, sort_right, cmp); List_destroy(sort_left); List_destroy(sort_right); return result; }  .\\ex33\\list_algos_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/list_algos.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;string.h\u0026gt; char *values[] = { \u0026quot;XXXX\u0026quot;, \u0026quot;1234\u0026quot;, \u0026quot;abcd\u0026quot;, \u0026quot;xjvef\u0026quot;, \u0026quot;NDSS\u0026quot; }; #define NUM_VALUES 5 List *create_words() { int i = 0; List *words = List_create(); for (i = 0; i \u0026lt; NUM_VALUES; i++) { List_push(words, values[i]); } return words; } int is_sorted(List * words) { LIST_FOREACH(words, first, next, cur) { if (cur-\u0026gt;next \u0026amp;\u0026amp; strcmp(cur-\u0026gt;value, cur-\u0026gt;next-\u0026gt;value) \u0026gt; 0) { debug(\u0026quot;%s %s\u0026quot;, (char *)cur-\u0026gt;value, (char *)cur-\u0026gt;next-\u0026gt;value); return 0; } } return 1; } char *test_bubble_sort() { List *words = create_words(); // should work on a list that needs sorting int rc = List_bubble_sort(words, (List_compare) strcmp); mu_assert(rc == 0, \u0026quot;Bubble sort failed.\u0026quot;); mu_assert(is_sorted(words), \u0026quot;Words are not sorted after bubble sort.\u0026quot;); // should work on an already sorted list rc = List_bubble_sort(words, (List_compare) strcmp); mu_assert(rc == 0, \u0026quot;Bubble sort of already sorted failed.\u0026quot;); mu_assert(is_sorted(words), \u0026quot;Words should be sort if already bubble sorted.\u0026quot;); List_destroy(words); // should work on an empty list words = List_create(words); rc = List_bubble_sort(words, (List_compare) strcmp); mu_assert(rc == 0, \u0026quot;Bubble sort failed on empty list.\u0026quot;); mu_assert(is_sorted(words), \u0026quot;Words should be sorted if empty.\u0026quot;); List_destroy(words); return NULL; } char *test_merge_sort() { List *words = create_words(); // should work on a list that needs sorting List *res = List_merge_sort(words, (List_compare) strcmp); mu_assert(is_sorted(res), \u0026quot;Words are not sorted after merge sort.\u0026quot;); List *res2 = List_merge_sort(res, (List_compare) strcmp); mu_assert(is_sorted(res), \u0026quot;Should still be sorted after merge sort.\u0026quot;); List_destroy(res2); List_destroy(res); List_destroy(words); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_bubble_sort); mu_run_test(test_merge_sort); return NULL; } RUN_TESTS(all_tests);  You should be able to create this and figure out how it works.\nI will assume you\u0026rsquo;ve done that, and now to code review.\nBubble Sort\nCode review of bubble sort.\nStart with the unit test and move from there.\nMerge Sort\nCode review of merge sort.\nImproving It\n The merge sort does a crazy amount of copying and creating lists, so find ways to reduce this. The bubble sort description in Wikipedia mentions a few optimizations. Try to implement them. Can you use the List_split and List_join (if you implemented them) to improve merge sort? Go through of all the defensive programming checks and improve the robustness of this implementation, protecting against bad NULL pointers, and then create an optional debug level invariant that works like is_sorted does after a sort.  Breaking It\n Overload the data structure to hit the worst case time complexity. Give it a bad data structure.  Extra Credit\n Create a unit test that compares the performance of the two algorithms. You\u0026rsquo;ll want to look at man 3 time for a basic timer function, and run enough iterations to at least have a few seconds of samples. Play with the amount of data in the lists that need to be sorted and see if that changes your timing. Find a way to simulate filling different sized random lists, measuring how long they take. Then, graph the result to see how it compares to the description of the algorithm.  Extra Credit\n Try to explain why sorting linked lists is a really bad idea. Implement a List_insert_sorted that will take a given value, and using the List_compare, insert the element at the right position so that the list is always sorted. How does using this method compare to sorting a list after you\u0026rsquo;ve built it? Try implementing the bottom-up merge sort described on the Wikipedia page. The code there is already C, so it should be easy to recreate, but try to understand how it\u0026rsquo;s working compared to the slower one I have here.  Exercise 34 Dynamic Array The Plan\nLearn about dynamic arrays, a very useful datastructure.\nCode Review\n.\\ex34\\darray.h\n#ifndef _DArray_h #define _DArray_h #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; typedef struct DArray { int end; int max; size_t element_size; size_t expand_rate; void **contents; } DArray; DArray *DArray_create(size_t element_size, size_t initial_max); void DArray_destroy(DArray * array); void DArray_clear(DArray * array); int DArray_expand(DArray * array); int DArray_contract(DArray * array); int DArray_push(DArray * array, void *el); void *DArray_pop(DArray * array); void DArray_clear_destroy(DArray * array); #define DArray_last(A) ((A)-\u0026gt;contents[(A)-\u0026gt;end - 1]) #define DArray_first(A) ((A)-\u0026gt;contents[0]) #define DArray_end(A) ((A)-\u0026gt;end) #define DArray_count(A) DArray_end(A) #define DArray_max(A) ((A)-\u0026gt;max) #define DEFAULT_EXPAND_RATE 300 static inline void DArray_set(DArray * array, int i, void *el) { check(i \u0026lt; array-\u0026gt;max, \u0026quot;darray attempt to set past max\u0026quot;); if (i \u0026gt; array-\u0026gt;end) array-\u0026gt;end = i; array-\u0026gt;contents[i] = el; error: return; } static inline void *DArray_get(DArray * array, int i) { check(i \u0026lt; array-\u0026gt;max, \u0026quot;darray attempt to get past max\u0026quot;); return array-\u0026gt;contents[i]; error: return NULL; } static inline void *DArray_remove(DArray * array, int i) { void *el = array-\u0026gt;contents[i]; array-\u0026gt;contents[i] = NULL; return el; } static inline void *DArray_new(DArray * array) { check(array-\u0026gt;element_size \u0026gt; 0, \u0026quot;Can't use DArray_new on 0 size darrays.\u0026quot;); return calloc(1, array-\u0026gt;element_size); error: return NULL; } #define DArray_free(E) free((E)) #endif  .\\ex34\\darray.c\n#include \u0026lt;lcthw/darray.h\u0026gt; #include \u0026lt;assert.h\u0026gt; DArray *DArray_create(size_t element_size, size_t initial_max) { DArray *array = malloc(sizeof(DArray)); check_mem(array); array-\u0026gt;max = initial_max; check(array-\u0026gt;max \u0026gt; 0, \u0026quot;You must set an initial_max \u0026gt; 0.\u0026quot;); array-\u0026gt;contents = calloc(initial_max, sizeof(void *)); check_mem(array-\u0026gt;contents); array-\u0026gt;end = 0; array-\u0026gt;element_size = element_size; array-\u0026gt;expand_rate = DEFAULT_EXPAND_RATE; return array; error: if (array) free(array); return NULL; } void DArray_clear(DArray * array) { int i = 0; if (array-\u0026gt;element_size \u0026gt; 0) { for (i = 0; i \u0026lt; array-\u0026gt;max; i++) { if (array-\u0026gt;contents[i] != NULL) { free(array-\u0026gt;contents[i]); } } } } static inline int DArray_resize(DArray * array, size_t newsize) { array-\u0026gt;max = newsize; check(array-\u0026gt;max \u0026gt; 0, \u0026quot;The newsize must be \u0026gt; 0.\u0026quot;); void *contents = realloc( array-\u0026gt;contents, array-\u0026gt;max * sizeof(void *)); // check contents and assume realloc doesn't harm the original on error check_mem(contents); array-\u0026gt;contents = contents; return 0; error: return -1; } int DArray_expand(DArray * array) { size_t old_max = array-\u0026gt;max; check(DArray_resize(array, array-\u0026gt;max + array-\u0026gt;expand_rate) == 0, \u0026quot;Failed to expand array to new size: %d\u0026quot;, array-\u0026gt;max + (int)array-\u0026gt;expand_rate); memset(array-\u0026gt;contents + old_max, 0, array-\u0026gt;expand_rate + 1); return 0; error: return -1; } int DArray_contract(DArray * array) { int new_size = array-\u0026gt;end \u0026lt; (int)array-\u0026gt;expand_rate ? (int)array-\u0026gt;expand_rate : array-\u0026gt;end; return DArray_resize(array, new_size + 1); } void DArray_destroy(DArray * array) { if (array) { if (array-\u0026gt;contents) free(array-\u0026gt;contents); free(array); } } void DArray_clear_destroy(DArray * array) { DArray_clear(array); DArray_destroy(array); } int DArray_push(DArray * array, void *el) { array-\u0026gt;contents[array-\u0026gt;end] = el; array-\u0026gt;end++; if (DArray_end(array) \u0026gt;= DArray_max(array)) { return DArray_expand(array); } else { return 0; } } void *DArray_pop(DArray * array) { check(array-\u0026gt;end - 1 \u0026gt;= 0, \u0026quot;Attempt to pop from empty array.\u0026quot;); void *el = DArray_remove(array, array-\u0026gt;end - 1); array-\u0026gt;end--; if (DArray_end(array) \u0026gt; (int)array-\u0026gt;expand_rate \u0026amp;\u0026amp; DArray_end(array) % array-\u0026gt;expand_rate) { DArray_contract(array); } return el; error: return NULL; }  .\\ex34\\darray_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/darray.h\u0026gt; static DArray *array = NULL; static int *val1 = NULL; static int *val2 = NULL; char *test_create() { array = DArray_create(sizeof(int), 100); mu_assert(array != NULL, \u0026quot;DArray_create failed.\u0026quot;); mu_assert(array-\u0026gt;contents != NULL, \u0026quot;contents are wrong in darray\u0026quot;); mu_assert(array-\u0026gt;end == 0, \u0026quot;end isn't at the right spot\u0026quot;); mu_assert(array-\u0026gt;element_size == sizeof(int), \u0026quot;element size is wrong.\u0026quot;); mu_assert(array-\u0026gt;max == 100, \u0026quot;wrong max length on initial size\u0026quot;); return NULL; } char *test_destroy() { DArray_destroy(array); return NULL; } char *test_new() { val1 = DArray_new(array); mu_assert(val1 != NULL, \u0026quot;failed to make a new element\u0026quot;); val2 = DArray_new(array); mu_assert(val2 != NULL, \u0026quot;failed to make a new element\u0026quot;); return NULL; } char *test_set() { DArray_set(array, 0, val1); DArray_set(array, 1, val2); return NULL; } char *test_get() { mu_assert(DArray_get(array, 0) == val1, \u0026quot;Wrong first value.\u0026quot;); mu_assert(DArray_get(array, 1) == val2, \u0026quot;Wrong second value.\u0026quot;); return NULL; } char *test_remove() { int *val_check = DArray_remove(array, 0); mu_assert(val_check != NULL, \u0026quot;Should not get NULL.\u0026quot;); mu_assert(*val_check == *val1, \u0026quot;Should get the first value.\u0026quot;); mu_assert(DArray_get(array, 0) == NULL, \u0026quot;Should be gone.\u0026quot;); DArray_free(val_check); val_check = DArray_remove(array, 1); mu_assert(val_check != NULL, \u0026quot;Should not get NULL.\u0026quot;); mu_assert(*val_check == *val2, \u0026quot;Should get the first value.\u0026quot;); mu_assert(DArray_get(array, 1) == NULL, \u0026quot;Should be gone.\u0026quot;); DArray_free(val_check); return NULL; } char *test_expand_contract() { int old_max = array-\u0026gt;max; DArray_expand(array); mu_assert((unsigned int)array-\u0026gt;max == old_max + array-\u0026gt;expand_rate, \u0026quot;Wrong size after expand.\u0026quot;); DArray_contract(array); mu_assert((unsigned int)array-\u0026gt;max == array-\u0026gt;expand_rate + 1, \u0026quot;Should stay at the expand_rate at least.\u0026quot;); DArray_contract(array); mu_assert((unsigned int)array-\u0026gt;max == array-\u0026gt;expand_rate + 1, \u0026quot;Should stay at the expand_rate at least.\u0026quot;); return NULL; } char *test_push_pop() { int i = 0; for (i = 0; i \u0026lt; 1000; i++) { int *val = DArray_new(array); *val = i * 333; DArray_push(array, val); } mu_assert(array-\u0026gt;max == 1201, \u0026quot;Wrong max size.\u0026quot;); for (i = 999; i \u0026gt;= 0; i--) { int *val = DArray_pop(array); mu_assert(val != NULL, \u0026quot;Shouldn't get a NULL.\u0026quot;); mu_assert(*val == i * 333, \u0026quot;Wrong value.\u0026quot;); DArray_free(val); } return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_create); mu_run_test(test_new); mu_run_test(test_set); mu_run_test(test_get); mu_run_test(test_remove); mu_run_test(test_expand_contract); mu_run_test(test_push_pop); mu_run_test(test_destroy); return NULL; } RUN_TESTS(all_tests);  Starting with the header file to implement, then the test, then the implementation.\nThe Analysis\nDArray Advantages\n Iteration: You can just use a basic for-loop and DArray_count with DArray_get, and you\u0026rsquo;re done. No special macros needed, and it\u0026rsquo;s faster because you aren\u0026rsquo;t walking through pointers. Indexing: You can use DArray_get and DArray_set to access any element at random, but with a List you have to go through N elements to get to N+1. Destroying: You can just free the struct and the contents in two operations. A List requires a series of free calls and walking every element.  DArray Advantages\n Cloning: You can also clone it in just two operations (plus whatever it\u0026rsquo;s storing) by copying the struct and contents. A list again requires walking through the whole thing and copying every ListNode plus its value. Sorting: As you saw, List is horrible if you need to keep the data sorted. A DArray opens up a whole class of great sorting algorithms, because now you can access elements randomly. Large Data: If you need to keep around a lot of data, then a DArray wins since its base, contents, takes up less memory than the same number of ListNode structs.  DArray Disadvantages\n Insert and remove on the front (what I called shift). A DArray needs special treatment to be able to do this efficiently, and usually it has to do some copying. Splitting or joining: A List can just copy some pointers and it\u0026rsquo;s done, but with a DArray, you have copy all of the arrays involved.  DArray Disadvantages\n Small Data. If you only need to store a few elements, then typically the storage will be less in a List than a generic DArray. This is because the DArray needs to expand the backing store to accommodate future inserts, while a List only makes what it needs.  Breaking It\n Forget to check the return value from malloc and then use the buffer. Getting the end and start count of the buffer wrong. Easy to do an off-by-one here. Exploit the insert and delete costs to cause a denial of service.  Extra Credit\n Improve the unit tests to cover more of the operations, and test them using a for-loop to ensure that they work. Research what it would take to implement bubble sort and merge sort for DArray, but don\u0026rsquo;t do it yet. I\u0026rsquo;ll be implementing DArray algorithms next, so you\u0026rsquo;ll do this then.  Extra Credit\n Write some performance tests for common operations and compare them to the same operations in List. You did some of this already, but this time, write a unit test that repeatedly does the operation in question, and then in the main runner, do the timing.  Extra Credit\n Look at how the DArray_expand is implemented using a constant increase (size + 300). Typically, dynamic arrays are implemented with a multiplicative increase (size * 2), but I\u0026rsquo;ve found this to cost needless memory for no real performance gain. Test my assertion and see when you\u0026rsquo;d want a multiplicative increase instead of a constant increase.  Exercise 35 Sorting and Searching The Plan\n Make a simple DArray sorting library using existing functions. Implement a new structure and algorithm called a \u0026ldquo;Radix Map\u0026rdquo;. Create a binary search algorithm for the RadixMap.  The DArray Code\n.\\ex35\\darray_algos.h\n#ifndef darray_algos_h #define darray_algos_h #include \u0026lt;lcthw/darray.h\u0026gt; typedef int (*DArray_compare) (const void *a, const void *b); int DArray_qsort(DArray * array, DArray_compare cmp); int DArray_heapsort(DArray * array, DArray_compare cmp); int DArray_mergesort(DArray * array, DArray_compare cmp); #endif  .\\ex35\\darray_algos.c\n#include \u0026lt;lcthw/darray_algos.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int DArray_qsort(DArray * array, DArray_compare cmp) { qsort(array-\u0026gt;contents, DArray_count(array), sizeof(void *), cmp); return 0; } int DArray_heapsort(DArray * array, DArray_compare cmp) { return heapsort(array-\u0026gt;contents, DArray_count(array), sizeof(void *), cmp); } int DArray_mergesort(DArray * array, DArray_compare cmp) { return mergesort(array-\u0026gt;contents, DArray_count(array), sizeof(void *), cmp); }  .\\ex35\\darray_algos_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/darray_algos.h\u0026gt; int testcmp(char **a, char **b) { return strcmp(*a, *b); } DArray *create_words() { DArray *result = DArray_create(0, 5); char *words[] = { \u0026quot;asdfasfd\u0026quot;, \u0026quot;werwar\u0026quot;, \u0026quot;13234\u0026quot;, \u0026quot;asdfasfd\u0026quot;, \u0026quot;oioj\u0026quot; }; int i = 0; for (i = 0; i \u0026lt; 5; i++) { DArray_push(result, words[i]); } return result; } int is_sorted(DArray * array) { int i = 0; for (i = 0; i \u0026lt; DArray_count(array) - 1; i++) { if (strcmp(DArray_get(array, i), DArray_get(array, i + 1)) \u0026gt; 0) { return 0; } } return 1; } char *run_sort_test(int (*func) (DArray *, DArray_compare), const char *name) { DArray *words = create_words(); mu_assert(!is_sorted(words), \u0026quot;Words should start not sorted.\u0026quot;); debug(\u0026quot;--- Testing %s sorting algorithm\u0026quot;, name); int rc = func(words, (DArray_compare) testcmp); mu_assert(rc == 0, \u0026quot;sort failed\u0026quot;); mu_assert(is_sorted(words), \u0026quot;didn't sort it\u0026quot;); DArray_destroy(words); return NULL; } char *test_qsort() { return run_sort_test(DArray_qsort, \u0026quot;qsort\u0026quot;); } char *test_heapsort() { return run_sort_test(DArray_heapsort, \u0026quot;heapsort\u0026quot;); } char *test_mergesort() { return run_sort_test(DArray_mergesort, \u0026quot;mergesort\u0026quot;); } char *all_tests() { mu_suite_start(); mu_run_test(test_qsort); mu_run_test(test_heapsort); mu_run_test(test_mergesort); return NULL; } RUN_TESTS(all_tests);  Continuing the code review method with a part of DArray.\nThe RadixMap Code\n.\\ex35\\radixmap.h\n#ifndef _radixmap_h #include \u0026lt;stdint.h\u0026gt; typedef union RMElement { uint64_t raw; struct { uint32_t key; uint32_t value; } data; } RMElement; typedef struct RadixMap { size_t max; size_t end; uint32_t counter; RMElement *contents; RMElement *temp; } RadixMap; RadixMap *RadixMap_create(size_t max); void RadixMap_destroy(RadixMap * map); void RadixMap_sort(RadixMap * map); RMElement *RadixMap_find(RadixMap * map, uint32_t key); int RadixMap_add(RadixMap * map, uint32_t key, uint32_t value); int RadixMap_delete(RadixMap * map, RMElement * el); #endif  .\\ex35\\radixmap.c\n/* * Based on code by Andre Reinald then heavily modified by Zed A. Shaw. */ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;lcthw/radixmap.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; RadixMap *RadixMap_create(size_t max) { RadixMap *map = calloc(sizeof(RadixMap), 1); check_mem(map); map-\u0026gt;contents = calloc(sizeof(RMElement), max + 1); check_mem(map-\u0026gt;contents); map-\u0026gt;temp = calloc(sizeof(RMElement), max + 1); check_mem(map-\u0026gt;temp); map-\u0026gt;max = max; map-\u0026gt;end = 0; return map; error: return NULL; } void RadixMap_destroy(RadixMap * map) { if (map) { free(map-\u0026gt;contents); free(map-\u0026gt;temp); free(map); } } #define ByteOf(x,y) (((uint8_t *)x)[(y)]) static inline void radix_sort(short offset, uint64_t max, uint64_t * source, uint64_t * dest) { uint64_t count[256] = { 0 }; uint64_t *cp = NULL; uint64_t *sp = NULL; uint64_t *end = NULL; uint64_t s = 0; uint64_t c = 0; // count occurences of every byte value for (sp = source, end = source + max; sp \u0026lt; end; sp++) { count[ByteOf(sp, offset)]++; } // transform count into index by summing // elements and storing into same array for (s = 0, cp = count, end = count + 256; cp \u0026lt; end; cp++) { c = *cp; *cp = s; s += c; } // fill dest with the right values in the right place for (sp = source, end = source + max; sp \u0026lt; end; sp++) { cp = count + ByteOf(sp, offset); dest[*cp] = *sp; ++(*cp); } } void RadixMap_sort(RadixMap * map) { uint64_t *source = \u0026amp;map-\u0026gt;contents[0].raw; uint64_t *temp = \u0026amp;map-\u0026gt;temp[0].raw; radix_sort(0, map-\u0026gt;end, source, temp); radix_sort(1, map-\u0026gt;end, temp, source); radix_sort(2, map-\u0026gt;end, source, temp); radix_sort(3, map-\u0026gt;end, temp, source); } RMElement *RadixMap_find(RadixMap * map, uint32_t to_find) { int low = 0; int high = map-\u0026gt;end - 1; RMElement *data = map-\u0026gt;contents; while (low \u0026lt;= high) { int middle = low + (high - low) / 2; uint32_t key = data[middle].data.key; if (to_find \u0026lt; key) { high = middle - 1; } else if (to_find \u0026gt; key) { low = middle + 1; } else { return \u0026amp;data[middle]; } } return NULL; } int RadixMap_add(RadixMap * map, uint32_t key, uint32_t value) { check(key \u0026lt; UINT32_MAX, \u0026quot;Key can't be equal to UINT32_MAX.\u0026quot;); RMElement element = {.data = {.key = key,.value = value} }; check(map-\u0026gt;end + 1 \u0026lt; map-\u0026gt;max, \u0026quot;RadixMap is full.\u0026quot;); map-\u0026gt;contents[map-\u0026gt;end++] = element; RadixMap_sort(map); return 0; error: return -1; } int RadixMap_delete(RadixMap * map, RMElement * el) { check(map-\u0026gt;end \u0026gt; 0, \u0026quot;There is nothing to delete.\u0026quot;); check(el != NULL, \u0026quot;Can't delete a NULL element.\u0026quot;); el-\u0026gt;data.key = UINT32_MAX; if (map-\u0026gt;end \u0026gt; 1) { // don't bother resorting a map of 1 length RadixMap_sort(map); } map-\u0026gt;end--; return 0; error: return -1; }  .\\ex35\\radixmap_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/radixmap.h\u0026gt; #include \u0026lt;time.h\u0026gt; static int make_random(RadixMap * map) { size_t i = 0; for (i = 0; i \u0026lt; map-\u0026gt;max - 1; i++) { uint32_t key = (uint32_t) (rand() | (rand() \u0026lt;\u0026lt; 16)); check(RadixMap_add(map, key, i) == 0, \u0026quot;Failed to add key %u.\u0026quot;, key); } return i; error: return 0; } static int check_order(RadixMap * map) { RMElement d1, d2; unsigned int i = 0; // only signal errors if any (should not be) for (i = 0; map-\u0026gt;end \u0026gt; 0 \u0026amp;\u0026amp; i \u0026lt; map-\u0026gt;end - 1; i++) { d1 = map-\u0026gt;contents[i]; d2 = map-\u0026gt;contents[i + 1]; if (d1.data.key \u0026gt; d2.data.key) { debug(\u0026quot;FAIL:i=%u, key: %u, value: %u, equals max? %d\\n\u0026quot;, i, d1.data.key, d1.data.value, d2.data.key == UINT32_MAX); return 0; } } return 1; } static int test_search(RadixMap * map) { unsigned i = 0; RMElement *d = NULL; RMElement *found = NULL; for (i = map-\u0026gt;end / 2; i \u0026lt; map-\u0026gt;end; i++) { d = \u0026amp;map-\u0026gt;contents[i]; found = RadixMap_find(map, d-\u0026gt;data.key); check(found != NULL, \u0026quot;Didn't find %u at %u.\u0026quot;, d-\u0026gt;data.key, i); check(found-\u0026gt;data.key == d-\u0026gt;data.key, \u0026quot;Got the wrong result: %p:%u looking for %u at %u\u0026quot;, found, found-\u0026gt;data.key, d-\u0026gt;data.key, i); } return 1; error: return 0; } // test for big number of elements static char *test_operations() { size_t N = 200; RadixMap *map = RadixMap_create(N); mu_assert(map != NULL, \u0026quot;Failed to make the map.\u0026quot;); mu_assert(make_random(map), \u0026quot;Didn't make a random fake radix map.\u0026quot;); RadixMap_sort(map); mu_assert(check_order(map), \u0026quot;Failed to properly sort the RadixMap.\u0026quot;); mu_assert(test_search(map), \u0026quot;Failed the search test.\u0026quot;); mu_assert(check_order(map), \u0026quot;RadixMap didn't stay sorted after search.\u0026quot;); while (map-\u0026gt;end \u0026gt; 0) { RMElement *el = RadixMap_find(map, map-\u0026gt;contents[map-\u0026gt;end / 2].data.key); mu_assert(el != NULL, \u0026quot;Should get a result.\u0026quot;); size_t old_end = map-\u0026gt;end; mu_assert(RadixMap_delete(map, el) == 0, \u0026quot;Didn't delete it.\u0026quot;); mu_assert(old_end - 1 == map-\u0026gt;end, \u0026quot;Wrong size after delete.\u0026quot;); // test that the end is now the old value, // but uint32 max so it trails off mu_assert(check_order(map), \u0026quot;RadixMap didn't stay sorted after delete.\u0026quot;); } RadixMap_destroy(map); return NULL; } char *all_tests() { mu_suite_start(); srand(time(NULL)); mu_run_test(test_operations); return NULL; } RUN_TESTS(all_tests);  Code review this code next.\nThe Binary Search Code\nFinally, code review of the BSTree code.\nImproving It\n Use a binary search to find the minimum position for the new element, then only sort from there to the end. You find the minimum, put the new element on the end, and then just sort from the minimum on. This will cut your sort space down considerably most of the time. Keep track of the biggest key currently being used, and then only sort enough digits to handle that key. You can also keep track of the smallest number, and then only sort the digits necessary for the range. To do this, you\u0026rsquo;ll have to start caring about CPU integer ordering (endianness).  Extra Credit\n Implement quicksort, heapsort, and merge sort and then provide a #define that lets you pick between the two, or create a second set of functions you can call. Use the technique I taught you to read the Wikipedia page for the algorithm, and then implement it with the psuedo-code. Compare the performance of your optimizations to the original implementations.  Extra Credit\n Use these sorting functions to create a DArray_sort_add that adds elements to the DArray but sorts the array after. Write a DArray_find that uses the binary search algorithm from RadixMap_find and the DArray_compare to find elements in a sorted DArray.  Exercise 36 Safer Strings .\\ex36\\ex36.c\nvoid copy(char to[], char from[]) { int i = 0; // while loop will not end if from isn't '\\0' terminated while ((to[i] = from[i]) != '\\0') { ++i; } } int safercopy(int from_len, char *from, int to_len, char *to) { int i = 0; int max = from_len \u0026gt; to_len - 1 ? to_len - 1 : from_len; // to_len must have at least 1 byte if (from_len \u0026lt; 0 || to_len \u0026lt;= 0) return -1; for (i = 0; i \u0026lt; max; i++) { to[i] = from[i]; } to[to_len - 1] = '\\0'; return i; }  .\\ex36\\ex36.c\nvoid copy(char to[], char from[]) { int i = 0; // while loop will not end if from isn't '\\0' terminated while ((to[i] = from[i]) != '\\0') { ++i; } } int safercopy(int from_len, char *from, int to_len, char *to) { int i = 0; int max = from_len \u0026gt; to_len - 1 ? to_len - 1 : from_len; // to_len must have at least 1 byte if (from_len \u0026lt; 0 || to_len \u0026lt;= 0) return -1; for (i = 0; i \u0026lt; max; i++) { to[i] = from[i]; } to[to_len - 1] = '\\0'; return i; }  The Plan\nLearn about an alternative string implementation to avoid most C string problems.\nC Strings Suck\nIt is impossible to safely process strings in C.\nThe bstrling Library\nAn alternative is a library that provides alternative APIs for working with C strings.\nThe Common Functions\nbfromcstr Create a bstring from a C style constant. blk2bstr Do the same thing, but give the length of the buffer. bstrcpy Copy a bstring. bassign Set one bstring to another. bassigncstr Set a bstring to a C string's contents. bassignblk Set a bstring to a C string but give the length. bdestroy Destroy a bstring. bconcat Concatenate one bstring onto another. bstricmp Compare two bstrings returning the same result as strcmp. biseq Tests if two bstrings are equal.  The Common Functions\nbinstr Tells if one bstring is in another. bfindreplace Find one bstring in another, then replace it with a third. bsplit Split a bstring into a bstrList. bformat Do a format string, which is super handy. blength Get the length of a bstring. bdata Get the data from a bstring. bchar Get a char from a bstring.  Extra Credit\nThere is only one extra credit and that\u0026rsquo;s to write a tests/bstr_tests.c file that tests all of these functions. The bstrlib comes with a test that you can reference it if needed.\nExercise 37 Hashmaps The Plan\nImplement a Hashmap in C. In Python these are called Dictionaries.\nHashmaps Visually\nHashmaps are very intuitive once you know how a DArray works. It\u0026rsquo;s all about the hashing function used.\nCode Review\n.\\ex37\\hashmap.h\n#ifndef _lcthw_Hashmap_h #define _lcthw_Hashmap_h #include \u0026lt;stdint.h\u0026gt; #include \u0026lt;lcthw/darray.h\u0026gt; #define DEFAULT_NUMBER_OF_BUCKETS 100 typedef int (*Hashmap_compare) (void *a, void *b); typedef uint32_t(*Hashmap_hash) (void *key); typedef struct Hashmap { DArray *buckets; Hashmap_compare compare; Hashmap_hash hash; } Hashmap; typedef struct HashmapNode { void *key; void *data; uint32_t hash; } HashmapNode; typedef int (*Hashmap_traverse_cb) (HashmapNode * node); Hashmap *Hashmap_create(Hashmap_compare compare, Hashmap_hash); void Hashmap_destroy(Hashmap * map); int Hashmap_set(Hashmap * map, void *key, void *data); void *Hashmap_get(Hashmap * map, void *key); int Hashmap_traverse(Hashmap * map, Hashmap_traverse_cb traverse_cb); void *Hashmap_delete(Hashmap * map, void *key); #endif  .\\ex37\\hashmap.c\n#undef NDEBUG #include \u0026lt;stdint.h\u0026gt; #include \u0026lt;lcthw/hashmap.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;lcthw/bstrlib.h\u0026gt; static int default_compare(void *a, void *b) { return bstrcmp((bstring) a, (bstring) b); } /** * Simple Bob Jenkins's hash algorithm taken from the * wikipedia description. */ static uint32_t default_hash(void *a) { size_t len = blength((bstring) a); char *key = bdata((bstring) a); uint32_t hash = 0; uint32_t i = 0; for (hash = i = 0; i \u0026lt; len; ++i) { hash += key[i]; hash += (hash \u0026lt;\u0026lt; 10); hash ^= (hash \u0026gt;\u0026gt; 6); } hash += (hash \u0026lt;\u0026lt; 3); hash ^= (hash \u0026gt;\u0026gt; 11); hash += (hash \u0026lt;\u0026lt; 15); return hash; } Hashmap *Hashmap_create(Hashmap_compare compare, Hashmap_hash hash) { Hashmap *map = calloc(1, sizeof(Hashmap)); check_mem(map); map-\u0026gt;compare = compare == NULL ? default_compare : compare; map-\u0026gt;hash = hash == NULL ? default_hash : hash; map-\u0026gt;buckets = DArray_create( sizeof(DArray *), DEFAULT_NUMBER_OF_BUCKETS); map-\u0026gt;buckets-\u0026gt;end = map-\u0026gt;buckets-\u0026gt;max; // fake out expanding it check_mem(map-\u0026gt;buckets); return map; error: if (map) { Hashmap_destroy(map); } return NULL; } void Hashmap_destroy(Hashmap * map) { int i = 0; int j = 0; if (map) { if (map-\u0026gt;buckets) { for (i = 0; i \u0026lt; DArray_count(map-\u0026gt;buckets); i++) { DArray *bucket = DArray_get(map-\u0026gt;buckets, i); if (bucket) { for (j = 0; j \u0026lt; DArray_count(bucket); j++) { free(DArray_get(bucket, j)); } DArray_destroy(bucket); } } DArray_destroy(map-\u0026gt;buckets); } free(map); } } static inline HashmapNode *Hashmap_node_create(int hash, void *key, void *data) { HashmapNode *node = calloc(1, sizeof(HashmapNode)); check_mem(node); node-\u0026gt;key = key; node-\u0026gt;data = data; node-\u0026gt;hash = hash; return node; error: return NULL; } static inline DArray *Hashmap_find_bucket(Hashmap * map, void *key, int create, uint32_t * hash_out) { uint32_t hash = map-\u0026gt;hash(key); int bucket_n = hash % DEFAULT_NUMBER_OF_BUCKETS; check(bucket_n \u0026gt;= 0, \u0026quot;Invalid bucket found: %d\u0026quot;, bucket_n); // store it for the return so the caller can use it *hash_out = hash; DArray *bucket = DArray_get(map-\u0026gt;buckets, bucket_n); if (!bucket \u0026amp;\u0026amp; create) { // new bucket, set it up bucket = DArray_create( sizeof(void *), DEFAULT_NUMBER_OF_BUCKETS); check_mem(bucket); DArray_set(map-\u0026gt;buckets, bucket_n, bucket); } return bucket; error: return NULL; } int Hashmap_set(Hashmap * map, void *key, void *data) { uint32_t hash = 0; DArray *bucket = Hashmap_find_bucket(map, key, 1, \u0026amp;hash); check(bucket, \u0026quot;Error can't create bucket.\u0026quot;); HashmapNode *node = Hashmap_node_create(hash, key, data); check_mem(node); DArray_push(bucket, node); return 0; error: return -1; } static inline int Hashmap_get_node(Hashmap * map, uint32_t hash, DArray * bucket, void *key) { int i = 0; for (i = 0; i \u0026lt; DArray_end(bucket); i++) { debug(\u0026quot;TRY: %d\u0026quot;, i); HashmapNode *node = DArray_get(bucket, i); if (node-\u0026gt;hash == hash \u0026amp;\u0026amp; map-\u0026gt;compare(node-\u0026gt;key, key) == 0) { return i; } } return -1; } void *Hashmap_get(Hashmap * map, void *key) { uint32_t hash = 0; DArray *bucket = Hashmap_find_bucket(map, key, 0, \u0026amp;hash); if (!bucket) return NULL; int i = Hashmap_get_node(map, hash, bucket, key); if (i == -1) return NULL; HashmapNode *node = DArray_get(bucket, i); check(node != NULL, \u0026quot;Failed to get node from bucket when it should exist.\u0026quot;); return node-\u0026gt;data; error: // fallthrough return NULL; } int Hashmap_traverse(Hashmap * map, Hashmap_traverse_cb traverse_cb) { int i = 0; int j = 0; int rc = 0; for (i = 0; i \u0026lt; DArray_count(map-\u0026gt;buckets); i++) { DArray *bucket = DArray_get(map-\u0026gt;buckets, i); if (bucket) { for (j = 0; j \u0026lt; DArray_count(bucket); j++) { HashmapNode *node = DArray_get(bucket, j); rc = traverse_cb(node); if (rc != 0) return rc; } } } return 0; } void *Hashmap_delete(Hashmap * map, void *key) { uint32_t hash = 0; DArray *bucket = Hashmap_find_bucket(map, key, 0, \u0026amp;hash); if (!bucket) return NULL; int i = Hashmap_get_node(map, hash, bucket, key); if (i == -1) return NULL; HashmapNode *node = DArray_get(bucket, i); void *data = node-\u0026gt;data; free(node); HashmapNode *ending = DArray_pop(bucket); if (ending != node) { // alright looks like it's not the last one, swap it DArray_set(bucket, i, ending); } return data; }  Conducting a review of Hashmap by following the test.\nImproving It\n You can use a sort on each bucket so that they\u0026rsquo;re always sorted. This increases your insert time but decreases your find time, because you can then use a binary search to find each node. Right now, it\u0026rsquo;s looping through all of the nodes in a bucket just to find one. You can dynamically size the number of buckets, or let the caller specify the number for each Hashmap created. You can use a better default_hash. There are tons of them.  Improving It\n This (and nearly every Hashmap) is vulnerable to someone picking keys that will fill only one bucket, and then tricking your program into processing them. This then makes your program run slower because it changes from processing a Hashmap to effectively processing a single DArray. If you sort the nodes in the bucket, this helps, but you can also use better hashing functions, and for the really paranoid programmer, add a random salt so that keys can\u0026rsquo;t be predicted.  Improving It\n You could have it delete buckets that are empty of nodes to save space, or put empty buckets into a cache so you can save on time lost creating and destroying them. Right now, it just adds elements even if they already exist. Write an alternative set method that only adds an element if it isn\u0026rsquo;t set already.  Extra Credit\n Research the Hashmap implementation in your favorite programming language to see what features it has. Find out what the major disadvantages of a Hashmap are and how to avoid them. For example, it doesn\u0026rsquo;t preserve order without special changes, nor does it work when you need to find things based on parts of keys. Write a unit test that demonstrates the defect of filling a Hashmap with keys that land in the same bucket, then test how this impacts performance. A good way to do this is to just reduce the number of buckets to something stupid, like five.  Exercise 38 Hashmap Algorithms The Plan\nLearn three different string hashing algorithms and make them dynamically available to the Hashmap.\nCode Review\n.\\ex38\\hashmap_algos.h\n#ifndef hashmap_algos_h #define hashmap_algos_h #include \u0026lt;stdint.h\u0026gt; uint32_t Hashmap_fnv1a_hash(void *data); uint32_t Hashmap_adler32_hash(void *data); uint32_t Hashmap_djb_hash(void *data); #endif  .\\ex38\\hashmap_algos.c\n#include \u0026lt;lcthw/hashmap_algos.h\u0026gt; #include \u0026lt;lcthw/bstrlib.h\u0026gt; // settings taken from // http://www.isthe.com/chongo/tech/comp/fnv/index.html#FNV-param const uint32_t FNV_PRIME = 16777619; const uint32_t FNV_OFFSET_BASIS = 2166136261; uint32_t Hashmap_fnv1a_hash(void *data) { bstring s = (bstring) data; uint32_t hash = FNV_OFFSET_BASIS; int i = 0; for (i = 0; i \u0026lt; blength(s); i++) { hash ^= bchare(s, i, 0); hash *= FNV_PRIME; } return hash; } const int MOD_ADLER = 65521; uint32_t Hashmap_adler32_hash(void *data) { bstring s = (bstring) data; uint32_t a = 1, b = 0; int i = 0; for (i = 0; i \u0026lt; blength(s); i++) { a = (a + bchare(s, i, 0)) % MOD_ADLER; b = (b + a) % MOD_ADLER; } return (b \u0026lt;\u0026lt; 16) | a; } uint32_t Hashmap_djb_hash(void *data) { bstring s = (bstring) data; uint32_t hash = 5381; int i = 0; for (i = 0; i \u0026lt; blength(s); i++) { hash = ((hash \u0026lt;\u0026lt; 5) + hash) + bchare(s, i, 0); /* hash * 33 + c */ } return hash; }  The default is the Jenkin\u0026rsquo;s hash.\nYou added the FNV1a, Adler32, and DJB hashing algorithms.\nReview the code for FNV1a vs. DJB.\nBreaking It\nIn this exercise you will attempt to write the worst hashing function that can pass for a real one. Try to make one that either looks complicated but statistically is way off, or is a discrete change to an existing one that is a bad change.\nExtra Credit\n Take the default_hash out of the hashmap.c, make it one of the algorithms in hashmap_algos.c, and then make all of the tests work again. Add the default_hash to the hashmap_algos_tests.c test and compare its statistics to the other hash functions. Find a few more hash functions and add them, too. You can never have too many hash functions!  Exercise 39 String Algorithms The Plan\nDevelop a formal code review procedure.\nThe Code\n.\\ex39\\string_algos.h\n#ifndef string_algos_h #define string_algos_h #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;lcthw/darray.h\u0026gt; typedef struct StringScanner { bstring in; const unsigned char *haystack; ssize_t hlen; const unsigned char *needle; ssize_t nlen; size_t skip_chars[UCHAR_MAX + 1]; } StringScanner; int String_find(bstring in, bstring what); StringScanner *StringScanner_create(bstring in); int StringScanner_scan(StringScanner * scan, bstring tofind); void StringScanner_destroy(StringScanner * scan); #endif  .\\ex39\\string_algos.c\n#include \u0026lt;lcthw/string_algos.h\u0026gt; #include \u0026lt;limits.h\u0026gt; static inline void String_setup_skip_chars(size_t * skip_chars, const unsigned char *needle, ssize_t nlen) { size_t i = 0; size_t last = nlen - 1; for (i = 0; i \u0026lt; UCHAR_MAX + 1; i++) { skip_chars[i] = nlen; } for (i = 0; i \u0026lt; last; i++) { skip_chars[needle[i]] = last - i; } } static inline const unsigned char *String_base_search(const unsigned char *haystack, ssize_t hlen, const unsigned char *needle, ssize_t nlen, size_t * skip_chars) { size_t i = 0; size_t last = nlen - 1; assert(haystack != NULL \u0026amp;\u0026amp; \u0026quot;Given bad haystack to search.\u0026quot;); assert(needle != NULL \u0026amp;\u0026amp; \u0026quot;Given bad needle to search for.\u0026quot;); check(nlen \u0026gt; 0, \u0026quot;nlen can't be \u0026lt;= 0\u0026quot;); check(hlen \u0026gt; 0, \u0026quot;hlen can't be \u0026lt;= 0\u0026quot;); while (hlen \u0026gt;= nlen) { for (i = last; haystack[i] == needle[i]; i--) { if (i == 0) { return haystack; } } hlen -= skip_chars[haystack[last]]; haystack += skip_chars[haystack[last]]; } error: // fallthrough return NULL; } int String_find(bstring in, bstring what) { const unsigned char *found = NULL; const unsigned char *haystack = (const unsigned char *)bdata(in); ssize_t hlen = blength(in); const unsigned char *needle = (const unsigned char *)bdata(what); ssize_t nlen = blength(what); size_t skip_chars[UCHAR_MAX + 1] = { 0 }; String_setup_skip_chars(skip_chars, needle, nlen); found = String_base_search(haystack, hlen, needle, nlen, skip_chars); return found != NULL ? found - haystack : -1; } StringScanner *StringScanner_create(bstring in) { StringScanner *scan = calloc(1, sizeof(StringScanner)); check_mem(scan); scan-\u0026gt;in = in; scan-\u0026gt;haystack = (const unsigned char *)bdata(in); scan-\u0026gt;hlen = blength(in); assert(scan != NULL \u0026amp;\u0026amp; \u0026quot;fuck\u0026quot;); return scan; error: free(scan); return NULL; } static inline void StringScanner_set_needle(StringScanner * scan, bstring tofind) { scan-\u0026gt;needle = (const unsigned char *)bdata(tofind); scan-\u0026gt;nlen = blength(tofind); String_setup_skip_chars(scan-\u0026gt;skip_chars, scan-\u0026gt;needle, scan-\u0026gt;nlen); } static inline void StringScanner_reset(StringScanner * scan) { scan-\u0026gt;haystack = (const unsigned char *)bdata(scan-\u0026gt;in); scan-\u0026gt;hlen = blength(scan-\u0026gt;in); } int StringScanner_scan(StringScanner * scan, bstring tofind) { const unsigned char *found = NULL; ssize_t found_at = 0; if (scan-\u0026gt;hlen \u0026lt;= 0) { StringScanner_reset(scan); return -1; } if ((const unsigned char *)bdata(tofind) != scan-\u0026gt;needle) { StringScanner_set_needle(scan, tofind); } found = String_base_search(scan-\u0026gt;haystack, scan-\u0026gt;hlen, scan-\u0026gt;needle, scan-\u0026gt;nlen, scan-\u0026gt;skip_chars); if (found) { found_at = found - (const unsigned char *)bdata(scan-\u0026gt;in); scan-\u0026gt;haystack = found + scan-\u0026gt;nlen; scan-\u0026gt;hlen -= found_at - scan-\u0026gt;nlen; } else { // done, reset the setup StringScanner_reset(scan); found_at = -1; } return found_at; } void StringScanner_destroy(StringScanner * scan) { if (scan) { free(scan); } }  .\\ex39\\string_algos_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/string_algos.h\u0026gt; #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; struct tagbstring IN_STR = bsStatic( \u0026quot;I have ALPHA beta ALPHA and oranges ALPHA\u0026quot;); struct tagbstring ALPHA = bsStatic(\u0026quot;ALPHA\u0026quot;); const int TEST_TIME = 1; char *test_find_and_scan() { StringScanner *scan = StringScanner_create(\u0026amp;IN_STR); mu_assert(scan != NULL, \u0026quot;Failed to make the scanner.\u0026quot;); int find_i = String_find(\u0026amp;IN_STR, \u0026amp;ALPHA); mu_assert(find_i \u0026gt; 0, \u0026quot;Failed to find 'ALPHA' in test string.\u0026quot;); int scan_i = StringScanner_scan(scan, \u0026amp;ALPHA); mu_assert(scan_i \u0026gt; 0, \u0026quot;Failed to find 'ALPHA' with scan.\u0026quot;); mu_assert(scan_i == find_i, \u0026quot;find and scan don't match\u0026quot;); scan_i = StringScanner_scan(scan, \u0026amp;ALPHA); mu_assert(scan_i \u0026gt; find_i, \u0026quot;should find another ALPHA after the first\u0026quot;); scan_i = StringScanner_scan(scan, \u0026amp;ALPHA); mu_assert(scan_i \u0026gt; find_i, \u0026quot;should find another ALPHA after the first\u0026quot;); mu_assert(StringScanner_scan(scan, \u0026amp;ALPHA) == -1, \u0026quot;shouldn't find it\u0026quot;); StringScanner_destroy(scan); return NULL; } char *test_binstr_performance() { int i = 0; int found_at = 0; unsigned long find_count = 0; time_t elapsed = 0; time_t start = time(NULL); do { for (i = 0; i \u0026lt; 1000; i++) { found_at = binstr(\u0026amp;IN_STR, 0, \u0026amp;ALPHA); mu_assert(found_at != BSTR_ERR, \u0026quot;Failed to find!\u0026quot;); find_count++; } elapsed = time(NULL) - start; } while (elapsed \u0026lt;= TEST_TIME); debug(\u0026quot;BINSTR COUNT: %lu, END TIME: %d, OPS: %f\u0026quot;, find_count, (int)elapsed, (double)find_count / elapsed); return NULL; } char *test_find_performance() { int i = 0; int found_at = 0; unsigned long find_count = 0; time_t elapsed = 0; time_t start = time(NULL); do { for (i = 0; i \u0026lt; 1000; i++) { found_at = String_find(\u0026amp;IN_STR, \u0026amp;ALPHA); find_count++; } elapsed = time(NULL) - start; } while (elapsed \u0026lt;= TEST_TIME); debug(\u0026quot;FIND COUNT: %lu, END TIME: %d, OPS: %f\u0026quot;, find_count, (int)elapsed, (double)find_count / elapsed); return NULL; } char *test_scan_performance() { int i = 0; int found_at = 0; unsigned long find_count = 0; time_t elapsed = 0; StringScanner *scan = StringScanner_create(\u0026amp;IN_STR); time_t start = time(NULL); do { for (i = 0; i \u0026lt; 1000; i++) { found_at = 0; do { found_at = StringScanner_scan(scan, \u0026amp;ALPHA); find_count++; } while (found_at != -1); } elapsed = time(NULL) - start; } while (elapsed \u0026lt;= TEST_TIME); debug(\u0026quot;SCAN COUNT: %lu, END TIME: %d, OPS: %f\u0026quot;, find_count, (int)elapsed, (double)find_count / elapsed); StringScanner_destroy(scan); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_find_and_scan); // this is an idiom for commenting out sections of code #if 0 mu_run_test(test_scan_performance); mu_run_test(test_find_performance); mu_run_test(test_binstr_performance); #endif return NULL; } RUN_TESTS(all_tests);  The code is easy to implement so should be no problem for you at this point. Focus on getting the unit test right.\nCode Review Process\n Start at the entry point for a piece of code that has changed. For each function, confirm that its calling parameters are correct. Enter that function, and confirm each line\u0026rsquo;s correctness. When you encounter a function, repeat up to #2 until you go no further. As you exit functions, confirm the return values and their usage. Continue until you are back where you started at the entry point. Do a diff on your changes, and confirm any missed calls to changed functions.  Code Review Key Points\n Check your pointer dereferences and defend against NULL. Check if-statements and while loops for exiting. Check return values are going to be valid. Check that memory allocated is freed and other resources freed. Confirm all system call parameters are correct with man pages.  Record Your Code Review\nI want you to try to record yourself coding and reviewing your code. What do you learn from this experience?\nWhat if you kept track of the number of mistakes you found in your code reviews and analyzed the data?\nExtra Credit\n See if you can make the Scan_find faster. Why is my implementation here slow? Try some different scan times and see if you get different numbers. What impact does the length of time that you run the test have on the scan times? What can you say about that result? Alter the unit test so that it runs each function for a short burst in the beginning to clear out any warm up period, and then start the timing portion. Does that change the dependence on the length of time the test runs? Does it change how many operations per second are possible?  Extra Credit\n Make the unit test randomize the strings to find and then measure the performance you get. One way to do this is to use the bsplit function from bstrlib.h to split the IN_STR on spaces. Then, you can use the bstrList struct that you get to access each string it returns. This will also teach you how to use bstrList operations for string processing. Try some runs with the tests in different orders to see if you get different results.  Exercise 40 Binary Search Trees The Plan\nImplement a Binary Search Tree, a competitor to the Hashmap.\nBinary Search Trees Visually\nThe Code\n.\\ex40\\bstree.h\n#ifndef _lcthw_BSTree_h #define _lcthw_BSTree_h typedef int (*BSTree_compare) (void *a, void *b); typedef struct BSTreeNode { void *key; void *data; struct BSTreeNode *left; struct BSTreeNode *right; struct BSTreeNode *parent; } BSTreeNode; typedef struct BSTree { int count; BSTree_compare compare; BSTreeNode *root; } BSTree; typedef int (*BSTree_traverse_cb) (BSTreeNode * node); BSTree *BSTree_create(BSTree_compare compare); void BSTree_destroy(BSTree * map); int BSTree_set(BSTree * map, void *key, void *data); void *BSTree_get(BSTree * map, void *key); int BSTree_traverse(BSTree * map, BSTree_traverse_cb traverse_cb); void *BSTree_delete(BSTree * map, void *key); #endif  .\\ex40\\bstree.c\n#include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;lcthw/bstree.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;lcthw/bstrlib.h\u0026gt; static int default_compare(void *a, void *b) { return bstrcmp((bstring) a, (bstring) b); } BSTree *BSTree_create(BSTree_compare compare) { BSTree *map = calloc(1, sizeof(BSTree)); check_mem(map); map-\u0026gt;compare = compare == NULL ? default_compare : compare; return map; error: if (map) { BSTree_destroy(map); } return NULL; } static int BSTree_destroy_cb(BSTreeNode * node) { free(node); return 0; } void BSTree_destroy(BSTree * map) { if (map) { BSTree_traverse(map, BSTree_destroy_cb); free(map); } } static inline BSTreeNode *BSTreeNode_create(BSTreeNode * parent, void *key, void *data) { BSTreeNode *node = calloc(1, sizeof(BSTreeNode)); check_mem(node); node-\u0026gt;key = key; node-\u0026gt;data = data; node-\u0026gt;parent = parent; return node; error: return NULL; } static inline void BSTree_setnode(BSTree * map, BSTreeNode * node, void *key, void *data) { int cmp = map-\u0026gt;compare(node-\u0026gt;key, key); if (cmp \u0026lt;= 0) { if (node-\u0026gt;left) { BSTree_setnode(map, node-\u0026gt;left, key, data); } else { node-\u0026gt;left = BSTreeNode_create(node, key, data); } } else { if (node-\u0026gt;right) { BSTree_setnode(map, node-\u0026gt;right, key, data); } else { node-\u0026gt;right = BSTreeNode_create(node, key, data); } } } int BSTree_set(BSTree * map, void *key, void *data) { if (map-\u0026gt;root == NULL) { // first so just make it and get out map-\u0026gt;root = BSTreeNode_create(NULL, key, data); check_mem(map-\u0026gt;root); } else { BSTree_setnode(map, map-\u0026gt;root, key, data); } return 0; error: return -1; } static inline BSTreeNode *BSTree_getnode(BSTree * map, BSTreeNode * node, void *key) { int cmp = map-\u0026gt;compare(node-\u0026gt;key, key); if (cmp == 0) { return node; } else if (cmp \u0026lt; 0) { if (node-\u0026gt;left) { return BSTree_getnode(map, node-\u0026gt;left, key); } else { return NULL; } } else { if (node-\u0026gt;right) { return BSTree_getnode(map, node-\u0026gt;right, key); } else { return NULL; } } } void *BSTree_get(BSTree * map, void *key) { if (map-\u0026gt;root == NULL) { return NULL; } else { BSTreeNode *node = BSTree_getnode(map, map-\u0026gt;root, key); return node == NULL ? NULL : node-\u0026gt;data; } } static inline int BSTree_traverse_nodes(BSTreeNode * node, BSTree_traverse_cb traverse_cb) { int rc = 0; if (node-\u0026gt;left) { rc = BSTree_traverse_nodes(node-\u0026gt;left, traverse_cb); if (rc != 0) return rc; } if (node-\u0026gt;right) { rc = BSTree_traverse_nodes(node-\u0026gt;right, traverse_cb); if (rc != 0) return rc; } return traverse_cb(node); } int BSTree_traverse(BSTree * map, BSTree_traverse_cb traverse_cb) { if (map-\u0026gt;root) { return BSTree_traverse_nodes(map-\u0026gt;root, traverse_cb); } return 0; } static inline BSTreeNode *BSTree_find_min(BSTreeNode * node) { while (node-\u0026gt;left) { node = node-\u0026gt;left; } return node; } static inline void BSTree_replace_node_in_parent(BSTree * map, BSTreeNode * node, BSTreeNode * new_value) { if (node-\u0026gt;parent) { if (node == node-\u0026gt;parent-\u0026gt;left) { node-\u0026gt;parent-\u0026gt;left = new_value; } else { node-\u0026gt;parent-\u0026gt;right = new_value; } } else { // this is the root so gotta change it map-\u0026gt;root = new_value; } if (new_value) { new_value-\u0026gt;parent = node-\u0026gt;parent; } } static inline void BSTree_swap(BSTreeNode * a, BSTreeNode * b) { void *temp = NULL; temp = b-\u0026gt;key; b-\u0026gt;key = a-\u0026gt;key; a-\u0026gt;key = temp; temp = b-\u0026gt;data; b-\u0026gt;data = a-\u0026gt;data; a-\u0026gt;data = temp; } static inline BSTreeNode *BSTree_node_delete(BSTree * map, BSTreeNode * node, void *key) { int cmp = map-\u0026gt;compare(node-\u0026gt;key, key); if (cmp \u0026lt; 0) { if (node-\u0026gt;left) { return BSTree_node_delete(map, node-\u0026gt;left, key); } else { // not found return NULL; } } else if (cmp \u0026gt; 0) { if (node-\u0026gt;right) { return BSTree_node_delete(map, node-\u0026gt;right, key); } else { // not found return NULL; } } else { if (node-\u0026gt;left \u0026amp;\u0026amp; node-\u0026gt;right) { // swap this node for the smallest node that is bigger than us BSTreeNode *successor = BSTree_find_min(node-\u0026gt;right); BSTree_swap(successor, node); // this leaves the old successor with possibly a right child // so replace it with that right child BSTree_replace_node_in_parent(map, successor, successor-\u0026gt;right); // finally it's swapped, so return successor instead of node return successor; } else if (node-\u0026gt;left) { BSTree_replace_node_in_parent(map, node, node-\u0026gt;left); } else if (node-\u0026gt;right) { BSTree_replace_node_in_parent(map, node, node-\u0026gt;right); } else { BSTree_replace_node_in_parent(map, node, NULL); } return node; } } void *BSTree_delete(BSTree * map, void *key) { void *data = NULL; if (map-\u0026gt;root) { BSTreeNode *node = BSTree_node_delete(map, map-\u0026gt;root, key); if (node) { data = node-\u0026gt;data; free(node); } } return data; }  .\\ex40\\bstree_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/bstree.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; BSTree *map = NULL; static int traverse_called = 0; struct tagbstring test1 = bsStatic(\u0026quot;test data 1\u0026quot;); struct tagbstring test2 = bsStatic(\u0026quot;test data 2\u0026quot;); struct tagbstring test3 = bsStatic(\u0026quot;xest data 3\u0026quot;); struct tagbstring expect1 = bsStatic(\u0026quot;THE VALUE 1\u0026quot;); struct tagbstring expect2 = bsStatic(\u0026quot;THE VALUE 2\u0026quot;); struct tagbstring expect3 = bsStatic(\u0026quot;THE VALUE 3\u0026quot;); static int traverse_good_cb(BSTreeNode * node) { debug(\u0026quot;KEY: %s\u0026quot;, bdata((bstring) node-\u0026gt;key)); traverse_called++; return 0; } static int traverse_fail_cb(BSTreeNode * node) { debug(\u0026quot;KEY: %s\u0026quot;, bdata((bstring) node-\u0026gt;key)); traverse_called++; if (traverse_called == 2) { return 1; } else { return 0; } } char *test_create() { map = BSTree_create(NULL); mu_assert(map != NULL, \u0026quot;Failed to create map.\u0026quot;); return NULL; } char *test_destroy() { BSTree_destroy(map); return NULL; } char *test_get_set() { int rc = BSTree_set(map, \u0026amp;test1, \u0026amp;expect1); mu_assert(rc == 0, \u0026quot;Failed to set \u0026amp;test1\u0026quot;); bstring result = BSTree_get(map, \u0026amp;test1); mu_assert(result == \u0026amp;expect1, \u0026quot;Wrong value for test1.\u0026quot;); rc = BSTree_set(map, \u0026amp;test2, \u0026amp;expect2); mu_assert(rc == 0, \u0026quot;Failed to set test2\u0026quot;); result = BSTree_get(map, \u0026amp;test2); mu_assert(result == \u0026amp;expect2, \u0026quot;Wrong value for test2.\u0026quot;); rc = BSTree_set(map, \u0026amp;test3, \u0026amp;expect3); mu_assert(rc == 0, \u0026quot;Failed to set test3\u0026quot;); result = BSTree_get(map, \u0026amp;test3); mu_assert(result == \u0026amp;expect3, \u0026quot;Wrong value for test3.\u0026quot;); return NULL; } char *test_traverse() { int rc = BSTree_traverse(map, traverse_good_cb); mu_assert(rc == 0, \u0026quot;Failed to traverse.\u0026quot;); mu_assert(traverse_called == 3, \u0026quot;Wrong count traverse.\u0026quot;); traverse_called = 0; rc = BSTree_traverse(map, traverse_fail_cb); mu_assert(rc == 1, \u0026quot;Failed to traverse.\u0026quot;); mu_assert(traverse_called == 2, \u0026quot;Wrong count traverse for fail.\u0026quot;); return NULL; } char *test_delete() { bstring deleted = (bstring) BSTree_delete(map, \u0026amp;test1); mu_assert(deleted != NULL, \u0026quot;Got NULL on delete.\u0026quot;); mu_assert(deleted == \u0026amp;expect1, \u0026quot;Should get test1\u0026quot;); bstring result = BSTree_get(map, \u0026amp;test1); mu_assert(result == NULL, \u0026quot;Should delete.\u0026quot;); deleted = (bstring) BSTree_delete(map, \u0026amp;test1); mu_assert(deleted == NULL, \u0026quot;Should get NULL on delete\u0026quot;); deleted = (bstring) BSTree_delete(map, \u0026amp;test2); mu_assert(deleted != NULL, \u0026quot;Got NULL on delete.\u0026quot;); mu_assert(deleted == \u0026amp;expect2, \u0026quot;Should get test2\u0026quot;); result = BSTree_get(map, \u0026amp;test2); mu_assert(result == NULL, \u0026quot;Should delete.\u0026quot;); deleted = (bstring) BSTree_delete(map, \u0026amp;test3); mu_assert(deleted != NULL, \u0026quot;Got NULL on delete.\u0026quot;); mu_assert(deleted == \u0026amp;expect3, \u0026quot;Should get test3\u0026quot;); result = BSTree_get(map, \u0026amp;test3); mu_assert(result == NULL, \u0026quot;Should delete.\u0026quot;); // test deleting non-existent stuff deleted = (bstring) BSTree_delete(map, \u0026amp;test3); mu_assert(deleted == NULL, \u0026quot;Should get NULL\u0026quot;); return NULL; } char *test_fuzzing() { BSTree *store = BSTree_create(NULL); int i = 0; int j = 0; bstring numbers[100] = { NULL }; bstring data[100] = { NULL }; srand((unsigned int)time(NULL)); for (i = 0; i \u0026lt; 100; i++) { int num = rand(); numbers[i] = bformat(\u0026quot;%d\u0026quot;, num); data[i] = bformat(\u0026quot;data %d\u0026quot;, num); BSTree_set(store, numbers[i], data[i]); } for (i = 0; i \u0026lt; 100; i++) { bstring value = BSTree_delete(store, numbers[i]); mu_assert(value == data[i], \u0026quot;Failed to delete the right number.\u0026quot;); mu_assert(BSTree_delete(store, numbers[i]) == NULL, \u0026quot;Should get nothing.\u0026quot;); for (j = i + 1; j \u0026lt; 99 - i; j++) { bstring value = BSTree_get(store, numbers[j]); mu_assert(value == data[j], \u0026quot;Failed to get the right number.\u0026quot;); } bdestroy(value); bdestroy(numbers[i]); } BSTree_destroy(store); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_create); mu_run_test(test_get_set); mu_run_test(test_traverse); mu_run_test(test_delete); mu_run_test(test_destroy); mu_run_test(test_fuzzing); return NULL; } RUN_TESTS(all_tests);  There\u0026rsquo;s nothing new in the code, but make sure you read the book carefully.\nCode Review\n.\\ex40\\bstree.h\n#ifndef _lcthw_BSTree_h #define _lcthw_BSTree_h typedef int (*BSTree_compare) (void *a, void *b); typedef struct BSTreeNode { void *key; void *data; struct BSTreeNode *left; struct BSTreeNode *right; struct BSTreeNode *parent; } BSTreeNode; typedef struct BSTree { int count; BSTree_compare compare; BSTreeNode *root; } BSTree; typedef int (*BSTree_traverse_cb) (BSTreeNode * node); BSTree *BSTree_create(BSTree_compare compare); void BSTree_destroy(BSTree * map); int BSTree_set(BSTree * map, void *key, void *data); void *BSTree_get(BSTree * map, void *key); int BSTree_traverse(BSTree * map, BSTree_traverse_cb traverse_cb); void *BSTree_delete(BSTree * map, void *key); #endif  .\\ex40\\bstree.c\n#include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;lcthw/bstree.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;lcthw/bstrlib.h\u0026gt; static int default_compare(void *a, void *b) { return bstrcmp((bstring) a, (bstring) b); } BSTree *BSTree_create(BSTree_compare compare) { BSTree *map = calloc(1, sizeof(BSTree)); check_mem(map); map-\u0026gt;compare = compare == NULL ? default_compare : compare; return map; error: if (map) { BSTree_destroy(map); } return NULL; } static int BSTree_destroy_cb(BSTreeNode * node) { free(node); return 0; } void BSTree_destroy(BSTree * map) { if (map) { BSTree_traverse(map, BSTree_destroy_cb); free(map); } } static inline BSTreeNode *BSTreeNode_create(BSTreeNode * parent, void *key, void *data) { BSTreeNode *node = calloc(1, sizeof(BSTreeNode)); check_mem(node); node-\u0026gt;key = key; node-\u0026gt;data = data; node-\u0026gt;parent = parent; return node; error: return NULL; } static inline void BSTree_setnode(BSTree * map, BSTreeNode * node, void *key, void *data) { int cmp = map-\u0026gt;compare(node-\u0026gt;key, key); if (cmp \u0026lt;= 0) { if (node-\u0026gt;left) { BSTree_setnode(map, node-\u0026gt;left, key, data); } else { node-\u0026gt;left = BSTreeNode_create(node, key, data); } } else { if (node-\u0026gt;right) { BSTree_setnode(map, node-\u0026gt;right, key, data); } else { node-\u0026gt;right = BSTreeNode_create(node, key, data); } } } int BSTree_set(BSTree * map, void *key, void *data) { if (map-\u0026gt;root == NULL) { // first so just make it and get out map-\u0026gt;root = BSTreeNode_create(NULL, key, data); check_mem(map-\u0026gt;root); } else { BSTree_setnode(map, map-\u0026gt;root, key, data); } return 0; error: return -1; } static inline BSTreeNode *BSTree_getnode(BSTree * map, BSTreeNode * node, void *key) { int cmp = map-\u0026gt;compare(node-\u0026gt;key, key); if (cmp == 0) { return node; } else if (cmp \u0026lt; 0) { if (node-\u0026gt;left) { return BSTree_getnode(map, node-\u0026gt;left, key); } else { return NULL; } } else { if (node-\u0026gt;right) { return BSTree_getnode(map, node-\u0026gt;right, key); } else { return NULL; } } } void *BSTree_get(BSTree * map, void *key) { if (map-\u0026gt;root == NULL) { return NULL; } else { BSTreeNode *node = BSTree_getnode(map, map-\u0026gt;root, key); return node == NULL ? NULL : node-\u0026gt;data; } } static inline int BSTree_traverse_nodes(BSTreeNode * node, BSTree_traverse_cb traverse_cb) { int rc = 0; if (node-\u0026gt;left) { rc = BSTree_traverse_nodes(node-\u0026gt;left, traverse_cb); if (rc != 0) return rc; } if (node-\u0026gt;right) { rc = BSTree_traverse_nodes(node-\u0026gt;right, traverse_cb); if (rc != 0) return rc; } return traverse_cb(node); } int BSTree_traverse(BSTree * map, BSTree_traverse_cb traverse_cb) { if (map-\u0026gt;root) { return BSTree_traverse_nodes(map-\u0026gt;root, traverse_cb); } return 0; } static inline BSTreeNode *BSTree_find_min(BSTreeNode * node) { while (node-\u0026gt;left) { node = node-\u0026gt;left; } return node; } static inline void BSTree_replace_node_in_parent(BSTree * map, BSTreeNode * node, BSTreeNode * new_value) { if (node-\u0026gt;parent) { if (node == node-\u0026gt;parent-\u0026gt;left) { node-\u0026gt;parent-\u0026gt;left = new_value; } else { node-\u0026gt;parent-\u0026gt;right = new_value; } } else { // this is the root so gotta change it map-\u0026gt;root = new_value; } if (new_value) { new_value-\u0026gt;parent = node-\u0026gt;parent; } } static inline void BSTree_swap(BSTreeNode * a, BSTreeNode * b) { void *temp = NULL; temp = b-\u0026gt;key; b-\u0026gt;key = a-\u0026gt;key; a-\u0026gt;key = temp; temp = b-\u0026gt;data; b-\u0026gt;data = a-\u0026gt;data; a-\u0026gt;data = temp; } static inline BSTreeNode *BSTree_node_delete(BSTree * map, BSTreeNode * node, void *key) { int cmp = map-\u0026gt;compare(node-\u0026gt;key, key); if (cmp \u0026lt; 0) { if (node-\u0026gt;left) { return BSTree_node_delete(map, node-\u0026gt;left, key); } else { // not found return NULL; } } else if (cmp \u0026gt; 0) { if (node-\u0026gt;right) { return BSTree_node_delete(map, node-\u0026gt;right, key); } else { // not found return NULL; } } else { if (node-\u0026gt;left \u0026amp;\u0026amp; node-\u0026gt;right) { // swap this node for the smallest node that is bigger than us BSTreeNode *successor = BSTree_find_min(node-\u0026gt;right); BSTree_swap(successor, node); // this leaves the old successor with possibly a right child // so replace it with that right child BSTree_replace_node_in_parent(map, successor, successor-\u0026gt;right); // finally it's swapped, so return successor instead of node return successor; } else if (node-\u0026gt;left) { BSTree_replace_node_in_parent(map, node, node-\u0026gt;left); } else if (node-\u0026gt;right) { BSTree_replace_node_in_parent(map, node, node-\u0026gt;right); } else { BSTree_replace_node_in_parent(map, node, NULL); } return node; } } void *BSTree_delete(BSTree * map, void *key) { void *data = NULL; if (map-\u0026gt;root) { BSTreeNode *node = BSTree_node_delete(map, map-\u0026gt;root, key); if (node) { data = node-\u0026gt;data; free(node); } } return data; }  .\\ex40\\bstree_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/bstree.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; BSTree *map = NULL; static int traverse_called = 0; struct tagbstring test1 = bsStatic(\u0026quot;test data 1\u0026quot;); struct tagbstring test2 = bsStatic(\u0026quot;test data 2\u0026quot;); struct tagbstring test3 = bsStatic(\u0026quot;xest data 3\u0026quot;); struct tagbstring expect1 = bsStatic(\u0026quot;THE VALUE 1\u0026quot;); struct tagbstring expect2 = bsStatic(\u0026quot;THE VALUE 2\u0026quot;); struct tagbstring expect3 = bsStatic(\u0026quot;THE VALUE 3\u0026quot;); static int traverse_good_cb(BSTreeNode * node) { debug(\u0026quot;KEY: %s\u0026quot;, bdata((bstring) node-\u0026gt;key)); traverse_called++; return 0; } static int traverse_fail_cb(BSTreeNode * node) { debug(\u0026quot;KEY: %s\u0026quot;, bdata((bstring) node-\u0026gt;key)); traverse_called++; if (traverse_called == 2) { return 1; } else { return 0; } } char *test_create() { map = BSTree_create(NULL); mu_assert(map != NULL, \u0026quot;Failed to create map.\u0026quot;); return NULL; } char *test_destroy() { BSTree_destroy(map); return NULL; } char *test_get_set() { int rc = BSTree_set(map, \u0026amp;test1, \u0026amp;expect1); mu_assert(rc == 0, \u0026quot;Failed to set \u0026amp;test1\u0026quot;); bstring result = BSTree_get(map, \u0026amp;test1); mu_assert(result == \u0026amp;expect1, \u0026quot;Wrong value for test1.\u0026quot;); rc = BSTree_set(map, \u0026amp;test2, \u0026amp;expect2); mu_assert(rc == 0, \u0026quot;Failed to set test2\u0026quot;); result = BSTree_get(map, \u0026amp;test2); mu_assert(result == \u0026amp;expect2, \u0026quot;Wrong value for test2.\u0026quot;); rc = BSTree_set(map, \u0026amp;test3, \u0026amp;expect3); mu_assert(rc == 0, \u0026quot;Failed to set test3\u0026quot;); result = BSTree_get(map, \u0026amp;test3); mu_assert(result == \u0026amp;expect3, \u0026quot;Wrong value for test3.\u0026quot;); return NULL; } char *test_traverse() { int rc = BSTree_traverse(map, traverse_good_cb); mu_assert(rc == 0, \u0026quot;Failed to traverse.\u0026quot;); mu_assert(traverse_called == 3, \u0026quot;Wrong count traverse.\u0026quot;); traverse_called = 0; rc = BSTree_traverse(map, traverse_fail_cb); mu_assert(rc == 1, \u0026quot;Failed to traverse.\u0026quot;); mu_assert(traverse_called == 2, \u0026quot;Wrong count traverse for fail.\u0026quot;); return NULL; } char *test_delete() { bstring deleted = (bstring) BSTree_delete(map, \u0026amp;test1); mu_assert(deleted != NULL, \u0026quot;Got NULL on delete.\u0026quot;); mu_assert(deleted == \u0026amp;expect1, \u0026quot;Should get test1\u0026quot;); bstring result = BSTree_get(map, \u0026amp;test1); mu_assert(result == NULL, \u0026quot;Should delete.\u0026quot;); deleted = (bstring) BSTree_delete(map, \u0026amp;test1); mu_assert(deleted == NULL, \u0026quot;Should get NULL on delete\u0026quot;); deleted = (bstring) BSTree_delete(map, \u0026amp;test2); mu_assert(deleted != NULL, \u0026quot;Got NULL on delete.\u0026quot;); mu_assert(deleted == \u0026amp;expect2, \u0026quot;Should get test2\u0026quot;); result = BSTree_get(map, \u0026amp;test2); mu_assert(result == NULL, \u0026quot;Should delete.\u0026quot;); deleted = (bstring) BSTree_delete(map, \u0026amp;test3); mu_assert(deleted != NULL, \u0026quot;Got NULL on delete.\u0026quot;); mu_assert(deleted == \u0026amp;expect3, \u0026quot;Should get test3\u0026quot;); result = BSTree_get(map, \u0026amp;test3); mu_assert(result == NULL, \u0026quot;Should delete.\u0026quot;); // test deleting non-existent stuff deleted = (bstring) BSTree_delete(map, \u0026amp;test3); mu_assert(deleted == NULL, \u0026quot;Should get NULL\u0026quot;); return NULL; } char *test_fuzzing() { BSTree *store = BSTree_create(NULL); int i = 0; int j = 0; bstring numbers[100] = { NULL }; bstring data[100] = { NULL }; srand((unsigned int)time(NULL)); for (i = 0; i \u0026lt; 100; i++) { int num = rand(); numbers[i] = bformat(\u0026quot;%d\u0026quot;, num); data[i] = bformat(\u0026quot;data %d\u0026quot;, num); BSTree_set(store, numbers[i], data[i]); } for (i = 0; i \u0026lt; 100; i++) { bstring value = BSTree_delete(store, numbers[i]); mu_assert(value == data[i], \u0026quot;Failed to delete the right number.\u0026quot;); mu_assert(BSTree_delete(store, numbers[i]) == NULL, \u0026quot;Should get nothing.\u0026quot;); for (j = i + 1; j \u0026lt; 99 - i; j++) { bstring value = BSTree_get(store, numbers[j]); mu_assert(value == data[j], \u0026quot;Failed to get the right number.\u0026quot;); } bdestroy(value); bdestroy(numbers[i]); } BSTree_destroy(store); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_create); mu_run_test(test_get_set); mu_run_test(test_traverse); mu_run_test(test_delete); mu_run_test(test_destroy); mu_run_test(test_fuzzing); return NULL; } RUN_TESTS(all_tests);  I\u0026rsquo;ll walk through the implementation and compare it to Hashmaps for features.\nImproving It\n As usual, you should go through all of the defensive programming checks and add *assert*s for conditions that shouldn\u0026rsquo;t happen. For example, you shouldn\u0026rsquo;t be getting NULL values for the recursion functions, so assert that. The traverse function walks through the tree in order by traversing left, then right, and then the current node. You can create traverse functions for the reverse order, as well.  Improving It\n It does a full string compare on every node, but I could use the Hashmap hashing functions to speed this up. I could hash the keys, and then keep the hash in the BSTreeNode. Then, in each of the set up functions, I can hash the key ahead of time, and pass it down to the recursive function. Using this hash, I can then compare each node much quicker in a way that\u0026rsquo;s similar to what I do in Hashmap.  Breaking It\nA big flaw in this is the use of recursion. An attacker could choose data to cause a stack overflow.\nExtra Credit\n There\u0026rsquo;s an alternative way to do this data structure without using recursion. The Wikipedia page shows alternatives that don\u0026rsquo;t use recursion but do the same thing. Why would this be better or worse? Read up on all of the different but similar trees you can find. There are AVL trees (named after Georgy Adelson-Velsky and E.M. Landis), red-black trees, and some non-tree structures like skip lists.  "
},
{
	"uri": "/coding/c/lcthw-lectures.3/",
	"title": "C Lecture - 3",
	"tags": ["c"],
	"description": "Exercise 41~ 48",
	"content": " Author: Zed A. Shaw\nAll content comes from Zed\u0026rsquo;s Lecture Repository and Libraries Repository. All credit goes to Zed.\nExercise 41 Project devpkg .\\ex41\\devpkg\n.\\ex41\\devpkg\\commands.c\n#include \u0026lt;apr_uri.h\u0026gt; #include \u0026lt;apr_fnmatch.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026quot;commands.h\u0026quot; #include \u0026quot;dbg.h\u0026quot; #include \u0026quot;bstrlib.h\u0026quot; #include \u0026quot;db.h\u0026quot; #include \u0026quot;shell.h\u0026quot; int Command_depends(apr_pool_t * p, const char *path) { FILE *in = NULL; bstring line = NULL; in = fopen(path, \u0026quot;r\u0026quot;); check(in != NULL, \u0026quot;Failed to open downloaded depends: %s\u0026quot;, path); for (line = bgets((bNgetc) fgetc, in, '\\n'); line != NULL; line = bgets((bNgetc) fgetc, in, '\\n')) { btrimws(line); log_info(\u0026quot;Processing depends: %s\u0026quot;, bdata(line)); int rc = Command_install(p, bdata(line), NULL, NULL, NULL); check(rc == 0, \u0026quot;Failed to install: %s\u0026quot;, bdata(line)); bdestroy(line); } fclose(in); return 0; error: if (line) bdestroy(line); if (in) fclose(in); return -1; } int Command_fetch(apr_pool_t * p, const char *url, int fetch_only) { apr_uri_t info = {.port = 0 }; int rc = 0; const char *depends_file = NULL; apr_status_t rv = apr_uri_parse(p, url, \u0026amp;info); check(rv == APR_SUCCESS, \u0026quot;Failed to parse URL: %s\u0026quot;, url); if (apr_fnmatch(GIT_PAT, info.path, 0) == APR_SUCCESS) { rc = Shell_exec(GIT_SH, \u0026quot;URL\u0026quot;, url, NULL); check(rc == 0, \u0026quot;git failed.\u0026quot;); } else if (apr_fnmatch(DEPEND_PAT, info.path, 0) == APR_SUCCESS) { check(!fetch_only, \u0026quot;No point in fetching a DEPENDS file.\u0026quot;); if (info.scheme) { depends_file = DEPENDS_PATH; rc = Shell_exec(CURL_SH, \u0026quot;URL\u0026quot;, url, \u0026quot;TARGET\u0026quot;, depends_file, NULL); check(rc == 0, \u0026quot;Curl failed.\u0026quot;); } else { depends_file = info.path; } // recursively process the devpkg list log_info(\u0026quot;Building according to DEPENDS: %s\u0026quot;, url); rv = Command_depends(p, depends_file); check(rv == 0, \u0026quot;Failed to process the DEPENDS: %s\u0026quot;, url); // this indicates that nothing needs to be done return 0; } else if (apr_fnmatch(TAR_GZ_PAT, info.path, 0) == APR_SUCCESS) { if (info.scheme) { rc = Shell_exec(CURL_SH, \u0026quot;URL\u0026quot;, url, \u0026quot;TARGET\u0026quot;, TAR_GZ_SRC, NULL); check(rc == 0, \u0026quot;Failed to curl source: %s\u0026quot;, url); } rv = apr_dir_make_recursive(BUILD_DIR, APR_UREAD | APR_UWRITE | APR_UEXECUTE, p); check(rv == APR_SUCCESS, \u0026quot;Failed to make directory %s\u0026quot;, BUILD_DIR); rc = Shell_exec(TAR_SH, \u0026quot;FILE\u0026quot;, TAR_GZ_SRC, NULL); check(rc == 0, \u0026quot;Failed to untar %s\u0026quot;, TAR_GZ_SRC); } else if (apr_fnmatch(TAR_BZ2_PAT, info.path, 0) == APR_SUCCESS) { if (info.scheme) { rc = Shell_exec(CURL_SH, \u0026quot;URL\u0026quot;, url, \u0026quot;TARGET\u0026quot;, TAR_BZ2_SRC, NULL); check(rc == 0, \u0026quot;Curl failed.\u0026quot;); } apr_status_t rc = apr_dir_make_recursive(BUILD_DIR, APR_UREAD | APR_UWRITE | APR_UEXECUTE, p); check(rc == 0, \u0026quot;Failed to make directory %s\u0026quot;, BUILD_DIR); rc = Shell_exec(TAR_SH, \u0026quot;FILE\u0026quot;, TAR_BZ2_SRC, NULL); check(rc == 0, \u0026quot;Failed to untar %s\u0026quot;, TAR_BZ2_SRC); } else { sentinel(\u0026quot;Don't now how to handle %s\u0026quot;, url); } // indicates that an install needs to actually run return 1; error: return -1; } int Command_build(apr_pool_t * p, const char *url, const char *configure_opts, const char *make_opts, const char *install_opts) { int rc = 0; check(access(BUILD_DIR, X_OK | R_OK | W_OK) == 0, \u0026quot;Build directory doesn't exist: %s\u0026quot;, BUILD_DIR); // actually do an install if (access(CONFIG_SCRIPT, X_OK) == 0) { log_info(\u0026quot;Has a configure script, running it.\u0026quot;); rc = Shell_exec(CONFIGURE_SH, \u0026quot;OPTS\u0026quot;, configure_opts, NULL); check(rc == 0, \u0026quot;Failed to configure.\u0026quot;); } rc = Shell_exec(MAKE_SH, \u0026quot;OPTS\u0026quot;, make_opts, NULL); check(rc == 0, \u0026quot;Failed to build.\u0026quot;); rc = Shell_exec(INSTALL_SH, \u0026quot;TARGET\u0026quot;, install_opts ? install_opts : \u0026quot;install\u0026quot;, NULL); check(rc == 0, \u0026quot;Failed to install.\u0026quot;); rc = Shell_exec(CLEANUP_SH, NULL); check(rc == 0, \u0026quot;Failed to cleanup after build.\u0026quot;); rc = DB_update(url); check(rc == 0, \u0026quot;Failed to add this package to the database.\u0026quot;); return 0; error: return -1; } int Command_install(apr_pool_t * p, const char *url, const char *configure_opts, const char *make_opts, const char *install_opts) { int rc = 0; check(Shell_exec(CLEANUP_SH, NULL) == 0, \u0026quot;Failed to cleanup before building.\u0026quot;); rc = DB_find(url); check(rc != -1, \u0026quot;Error checking the install database.\u0026quot;); if (rc == 1) { log_info(\u0026quot;Package %s already installed.\u0026quot;, url); return 0; } rc = Command_fetch(p, url, 0); if (rc == 1) { rc = Command_build(p, url, configure_opts, make_opts, install_opts); check(rc == 0, \u0026quot;Failed to build: %s\u0026quot;, url); } else if (rc == 0) { // no install needed log_info(\u0026quot;Depends successfully installed: %s\u0026quot;, url); } else { // had an error sentinel(\u0026quot;Install failed: %s\u0026quot;, url); } Shell_exec(CLEANUP_SH, NULL); return 0; error: Shell_exec(CLEANUP_SH, NULL); return -1; }  .\\ex41\\devpkg\\commands.h\n#ifndef _commands_h #define _commands_h #include \u0026lt;apr_pools.h\u0026gt; #define DEPENDS_PATH \u0026quot;/tmp/DEPENDS\u0026quot; #define TAR_GZ_SRC \u0026quot;/tmp/pkg-src.tar.gz\u0026quot; #define TAR_BZ2_SRC \u0026quot;/tmp/pkg-src.tar.bz2\u0026quot; #define BUILD_DIR \u0026quot;/tmp/pkg-build\u0026quot; #define GIT_PAT \u0026quot;*.git\u0026quot; #define DEPEND_PAT \u0026quot;*DEPENDS\u0026quot; #define TAR_GZ_PAT \u0026quot;*.tar.gz\u0026quot; #define TAR_BZ2_PAT \u0026quot;*.tar.bz2\u0026quot; #define CONFIG_SCRIPT \u0026quot;/tmp/pkg-build/configure\u0026quot; enum CommandType { COMMAND_NONE, COMMAND_INSTALL, COMMAND_LIST, COMMAND_FETCH, COMMAND_INIT, COMMAND_BUILD }; int Command_fetch(apr_pool_t * p, const char *url, int fetch_only); int Command_install(apr_pool_t * p, const char *url, const char *configure_opts, const char *make_opts, const char *install_opts); int Command_depends(apr_pool_t * p, const char *path); int Command_build(apr_pool_t * p, const char *url, const char *configure_opts, const char *make_opts, const char *install_opts); #endif  .\\ex41\\devpkg\\db.c\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;apr_errno.h\u0026gt; #include \u0026lt;apr_file_io.h\u0026gt; #include \u0026quot;db.h\u0026quot; #include \u0026quot;bstrlib.h\u0026quot; #include \u0026quot;dbg.h\u0026quot; static FILE *DB_open(const char *path, const char *mode) { return fopen(path, mode); } static void DB_close(FILE * db) { fclose(db); } static bstring DB_load() { FILE *db = NULL; bstring data = NULL; db = DB_open(DB_FILE, \u0026quot;r\u0026quot;); check(db, \u0026quot;Failed to open database: %s\u0026quot;, DB_FILE); data = bread((bNread) fread, db); check(data, \u0026quot;Failed to read from db file: %s\u0026quot;, DB_FILE); DB_close(db); return data; error: if (db) DB_close(db); if (data) bdestroy(data); return NULL; } int DB_update(const char *url) { if (DB_find(url)) { log_info(\u0026quot;Already recorded as installed: %s\u0026quot;, url); } FILE *db = DB_open(DB_FILE, \u0026quot;a+\u0026quot;); check(db, \u0026quot;Failed to open DB file: %s\u0026quot;, DB_FILE); bstring line = bfromcstr(url); bconchar(line, '\\n'); int rc = fwrite(line-\u0026gt;data, blength(line), 1, db); check(rc == 1, \u0026quot;Failed to append to the db.\u0026quot;); return 0; error: if (db) DB_close(db); return -1; } int DB_find(const char *url) { bstring data = NULL; bstring line = bfromcstr(url); int res = -1; data = DB_load(); check(data, \u0026quot;Failed to load: %s\u0026quot;, DB_FILE); if (binstr(data, 0, line) == BSTR_ERR) { res = 0; } else { res = 1; } error: // fallthrough if (data) bdestroy(data); if (line) bdestroy(line); return res; } int DB_init() { apr_pool_t *p = NULL; apr_pool_initialize(); apr_pool_create(\u0026amp;p, NULL); if (access(DB_DIR, W_OK | X_OK) == -1) { apr_status_t rc = apr_dir_make_recursive(DB_DIR, APR_UREAD | APR_UWRITE | APR_UEXECUTE | APR_GREAD | APR_GWRITE | APR_GEXECUTE, p); check(rc == APR_SUCCESS, \u0026quot;Failed to make database dir: %s\u0026quot;, DB_DIR); } if (access(DB_FILE, W_OK) == -1) { FILE *db = DB_open(DB_FILE, \u0026quot;w\u0026quot;); check(db, \u0026quot;Cannot open database: %s\u0026quot;, DB_FILE); DB_close(db); } apr_pool_destroy(p); return 0; error: apr_pool_destroy(p); return -1; } int DB_list() { bstring data = DB_load(); check(data, \u0026quot;Failed to read load: %s\u0026quot;, DB_FILE); printf(\u0026quot;%s\u0026quot;, bdata(data)); bdestroy(data); return 0; error: return -1; }  .\\ex41\\devpkg\\db.h\n#ifndef _db_h #define _db_h #define DB_FILE \u0026quot;/usr/local/.devpkg/db\u0026quot; #define DB_DIR \u0026quot;/usr/local/.devpkg\u0026quot; int DB_init(); int DB_list(); int DB_update(const char *url); int DB_find(const char *url); #endif  .\\ex41\\devpkg\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex41\\devpkg\\devpkg.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;apr_general.h\u0026gt; #include \u0026lt;apr_getopt.h\u0026gt; #include \u0026lt;apr_strings.h\u0026gt; #include \u0026lt;apr_lib.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; #include \u0026quot;db.h\u0026quot; #include \u0026quot;commands.h\u0026quot; int main(int argc, const char *argv[]) { apr_pool_t *p = NULL; apr_pool_initialize(); apr_pool_create(\u0026amp;p, NULL); apr_getopt_t *opt; apr_status_t rv; char ch = '\\0'; const char *optarg = NULL; const char *config_opts = NULL; const char *install_opts = NULL; const char *make_opts = NULL; const char *url = NULL; enum CommandType request = COMMAND_NONE; rv = apr_getopt_init(\u0026amp;opt, p, argc, argv); while (apr_getopt(opt, \u0026quot;I:Lc:m:i:d:SF:B:\u0026quot;, \u0026amp;ch, \u0026amp;optarg) == APR_SUCCESS) { switch (ch) { case 'I': request = COMMAND_INSTALL; url = optarg; break; case 'L': request = COMMAND_LIST; break; case 'c': config_opts = optarg; break; case 'm': make_opts = optarg; break; case 'i': install_opts = optarg; break; case 'S': request = COMMAND_INIT; break; case 'F': request = COMMAND_FETCH; url = optarg; break; case 'B': request = COMMAND_BUILD; url = optarg; break; } } switch (request) { case COMMAND_INSTALL: check(url, \u0026quot;You must at least give a URL.\u0026quot;); Command_install(p, url, config_opts, make_opts, install_opts); break; case COMMAND_LIST: DB_list(); break; case COMMAND_FETCH: check(url != NULL, \u0026quot;You must give a URL.\u0026quot;); Command_fetch(p, url, 1); log_info(\u0026quot;Downloaded to %s and in /tmp/\u0026quot;, BUILD_DIR); break; case COMMAND_BUILD: check(url, \u0026quot;You must at least give a URL.\u0026quot;); Command_build(p, url, config_opts, make_opts, install_opts); break; case COMMAND_INIT: rv = DB_init(); check(rv == 0, \u0026quot;Failed to make the database.\u0026quot;); break; default: sentinel(\u0026quot;Invalid command given.\u0026quot;); } return 0; error: return 1; }  .\\ex41\\devpkg\\shell.c\n#include \u0026quot;shell.h\u0026quot; #include \u0026quot;dbg.h\u0026quot; #include \u0026lt;stdarg.h\u0026gt; int Shell_exec(Shell template, ...) { apr_pool_t *p = NULL; int rc = -1; apr_status_t rv = APR_SUCCESS; va_list argp; const char *key = NULL; const char *arg = NULL; int i = 0; rv = apr_pool_create(\u0026amp;p, NULL); check(rv == APR_SUCCESS, \u0026quot;Failed to create pool.\u0026quot;); va_start(argp, template); for (key = va_arg(argp, const char *); key != NULL; key = va_arg(argp, const char *)) { arg = va_arg(argp, const char *); for (i = 0; template.args[i] != NULL; i++) { if (strcmp(template.args[i], key) == 0) { template.args[i] = arg; break; // found it } } } rc = Shell_run(p, \u0026amp;template); apr_pool_destroy(p); va_end(argp); return rc; error: if (p) { apr_pool_destroy(p); } return rc; } int Shell_run(apr_pool_t * p, Shell * cmd) { apr_procattr_t *attr; apr_status_t rv; apr_proc_t newproc; rv = apr_procattr_create(\u0026amp;attr, p); check(rv == APR_SUCCESS, \u0026quot;Failed to create proc attr.\u0026quot;); rv = apr_procattr_io_set(attr, APR_NO_PIPE, APR_NO_PIPE, APR_NO_PIPE); check(rv == APR_SUCCESS, \u0026quot;Failed to set IO of command.\u0026quot;); rv = apr_procattr_dir_set(attr, cmd-\u0026gt;dir); check(rv == APR_SUCCESS, \u0026quot;Failed to set root to %s\u0026quot;, cmd-\u0026gt;dir); rv = apr_procattr_cmdtype_set(attr, APR_PROGRAM_PATH); check(rv == APR_SUCCESS, \u0026quot;Failed to set cmd type.\u0026quot;); rv = apr_proc_create(\u0026amp;newproc, cmd-\u0026gt;exe, cmd-\u0026gt;args, NULL, attr, p); check(rv == APR_SUCCESS, \u0026quot;Failed to run command.\u0026quot;); rv = apr_proc_wait(\u0026amp;newproc, \u0026amp;cmd-\u0026gt;exit_code, \u0026amp;cmd-\u0026gt;exit_why, APR_WAIT); check(rv == APR_CHILD_DONE, \u0026quot;Failed to wait.\u0026quot;); check(cmd-\u0026gt;exit_code == 0, \u0026quot;%s exited badly.\u0026quot;, cmd-\u0026gt;exe); check(cmd-\u0026gt;exit_why == APR_PROC_EXIT, \u0026quot;%s was killed or crashed\u0026quot;, cmd-\u0026gt;exe); return 0; error: return -1; } Shell CLEANUP_SH = { .exe = \u0026quot;rm\u0026quot;, .dir = \u0026quot;/tmp\u0026quot;, .args = {\u0026quot;rm\u0026quot;, \u0026quot;-rf\u0026quot;, \u0026quot;/tmp/pkg-build\u0026quot;, \u0026quot;/tmp/pkg-src.tar.gz\u0026quot;, \u0026quot;/tmp/pkg-src.tar.bz2\u0026quot;, \u0026quot;/tmp/DEPENDS\u0026quot;, NULL} }; Shell GIT_SH = { .dir = \u0026quot;/tmp\u0026quot;, .exe = \u0026quot;git\u0026quot;, .args = {\u0026quot;git\u0026quot;, \u0026quot;clone\u0026quot;, \u0026quot;URL\u0026quot;, \u0026quot;pkg-build\u0026quot;, NULL} }; Shell TAR_SH = { .dir = \u0026quot;/tmp/pkg-build\u0026quot;, .exe = \u0026quot;tar\u0026quot;, .args = {\u0026quot;tar\u0026quot;, \u0026quot;-xzf\u0026quot;, \u0026quot;FILE\u0026quot;, \u0026quot;--strip-components\u0026quot;, \u0026quot;1\u0026quot;, NULL} }; Shell CURL_SH = { .dir = \u0026quot;/tmp\u0026quot;, .exe = \u0026quot;curl\u0026quot;, .args = {\u0026quot;curl\u0026quot;, \u0026quot;-L\u0026quot;, \u0026quot;-o\u0026quot;, \u0026quot;TARGET\u0026quot;, \u0026quot;URL\u0026quot;, NULL} }; Shell CONFIGURE_SH = { .exe = \u0026quot;./configure\u0026quot;, .dir = \u0026quot;/tmp/pkg-build\u0026quot;, .args = {\u0026quot;configure\u0026quot;, \u0026quot;OPTS\u0026quot;, NULL} , }; Shell MAKE_SH = { .exe = \u0026quot;make\u0026quot;, .dir = \u0026quot;/tmp/pkg-build\u0026quot;, .args = {\u0026quot;make\u0026quot;, \u0026quot;OPTS\u0026quot;, NULL} }; Shell INSTALL_SH = { .exe = \u0026quot;sudo\u0026quot;, .dir = \u0026quot;/tmp/pkg-build\u0026quot;, .args = {\u0026quot;sudo\u0026quot;, \u0026quot;make\u0026quot;, \u0026quot;TARGET\u0026quot;, NULL} };  .\\ex41\\devpkg\\shell.h\n#ifndef _shell_h #define _shell_h #define MAX_COMMAND_ARGS 100 #include \u0026lt;apr_thread_proc.h\u0026gt; typedef struct Shell { const char *dir; const char *exe; apr_procattr_t *attr; apr_proc_t proc; apr_exit_why_e exit_why; int exit_code; const char *args[MAX_COMMAND_ARGS]; } Shell; int Shell_run(apr_pool_t * p, Shell * cmd); int Shell_exec(Shell cmd, ...); extern Shell CLEANUP_SH; extern Shell GIT_SH; extern Shell TAR_SH; extern Shell CURL_SH; extern Shell CONFIGURE_SH; extern Shell MAKE_SH; extern Shell INSTALL_SH; #endif  .\\ex41\\ex41.1.sh\nset -e ## go somewhere safe cd /tmp ## get the source to base APR 1.5.2 curl -L -O http://archive.apache.org/dist/apr/apr-1.5.2.tar.gz ## extract it and go into the source tar -xzvf apr-1.5.2.tar.gz cd apr-1.5.2 ## you need this on OSX Yosemite touch libtoolT ## configure, make, make install ./configure make sudo make install ## reset and cleanup cd /tmp rm -rf apr-1.5.2 apr-1.5.2.tar.gz ## do the same with apr-util curl -L -O http://archive.apache.org/dist/apr/apr-util-1.5.4.tar.gz ## extract tar -xzvf apr-util-1.5.4.tar.gz cd apr-util-1.5.4 ## you need this on OSX Yosemite touch libtoolT ## configure, make, make install ./configure --with-apr=/usr/local/apr ## you need that extra parameter to configure because ## apr-util can't really find it because...who knows. make sudo make install #cleanup cd /tmp rm -rf apr-util-1.5.4* apr-1.5.2*  .\\ex41\\ex41.2.sh\nmkdir devpkg cd devpkg touch README Makefile  .\\ex41\\devpkg\n.\\ex41\\devpkg\\commands.c\n#include \u0026lt;apr_uri.h\u0026gt; #include \u0026lt;apr_fnmatch.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026quot;commands.h\u0026quot; #include \u0026quot;dbg.h\u0026quot; #include \u0026quot;bstrlib.h\u0026quot; #include \u0026quot;db.h\u0026quot; #include \u0026quot;shell.h\u0026quot; int Command_depends(apr_pool_t * p, const char *path) { FILE *in = NULL; bstring line = NULL; in = fopen(path, \u0026quot;r\u0026quot;); check(in != NULL, \u0026quot;Failed to open downloaded depends: %s\u0026quot;, path); for (line = bgets((bNgetc) fgetc, in, '\\n'); line != NULL; line = bgets((bNgetc) fgetc, in, '\\n')) { btrimws(line); log_info(\u0026quot;Processing depends: %s\u0026quot;, bdata(line)); int rc = Command_install(p, bdata(line), NULL, NULL, NULL); check(rc == 0, \u0026quot;Failed to install: %s\u0026quot;, bdata(line)); bdestroy(line); } fclose(in); return 0; error: if (line) bdestroy(line); if (in) fclose(in); return -1; } int Command_fetch(apr_pool_t * p, const char *url, int fetch_only) { apr_uri_t info = {.port = 0 }; int rc = 0; const char *depends_file = NULL; apr_status_t rv = apr_uri_parse(p, url, \u0026amp;info); check(rv == APR_SUCCESS, \u0026quot;Failed to parse URL: %s\u0026quot;, url); if (apr_fnmatch(GIT_PAT, info.path, 0) == APR_SUCCESS) { rc = Shell_exec(GIT_SH, \u0026quot;URL\u0026quot;, url, NULL); check(rc == 0, \u0026quot;git failed.\u0026quot;); } else if (apr_fnmatch(DEPEND_PAT, info.path, 0) == APR_SUCCESS) { check(!fetch_only, \u0026quot;No point in fetching a DEPENDS file.\u0026quot;); if (info.scheme) { depends_file = DEPENDS_PATH; rc = Shell_exec(CURL_SH, \u0026quot;URL\u0026quot;, url, \u0026quot;TARGET\u0026quot;, depends_file, NULL); check(rc == 0, \u0026quot;Curl failed.\u0026quot;); } else { depends_file = info.path; } // recursively process the devpkg list log_info(\u0026quot;Building according to DEPENDS: %s\u0026quot;, url); rv = Command_depends(p, depends_file); check(rv == 0, \u0026quot;Failed to process the DEPENDS: %s\u0026quot;, url); // this indicates that nothing needs to be done return 0; } else if (apr_fnmatch(TAR_GZ_PAT, info.path, 0) == APR_SUCCESS) { if (info.scheme) { rc = Shell_exec(CURL_SH, \u0026quot;URL\u0026quot;, url, \u0026quot;TARGET\u0026quot;, TAR_GZ_SRC, NULL); check(rc == 0, \u0026quot;Failed to curl source: %s\u0026quot;, url); } rv = apr_dir_make_recursive(BUILD_DIR, APR_UREAD | APR_UWRITE | APR_UEXECUTE, p); check(rv == APR_SUCCESS, \u0026quot;Failed to make directory %s\u0026quot;, BUILD_DIR); rc = Shell_exec(TAR_SH, \u0026quot;FILE\u0026quot;, TAR_GZ_SRC, NULL); check(rc == 0, \u0026quot;Failed to untar %s\u0026quot;, TAR_GZ_SRC); } else if (apr_fnmatch(TAR_BZ2_PAT, info.path, 0) == APR_SUCCESS) { if (info.scheme) { rc = Shell_exec(CURL_SH, \u0026quot;URL\u0026quot;, url, \u0026quot;TARGET\u0026quot;, TAR_BZ2_SRC, NULL); check(rc == 0, \u0026quot;Curl failed.\u0026quot;); } apr_status_t rc = apr_dir_make_recursive(BUILD_DIR, APR_UREAD | APR_UWRITE | APR_UEXECUTE, p); check(rc == 0, \u0026quot;Failed to make directory %s\u0026quot;, BUILD_DIR); rc = Shell_exec(TAR_SH, \u0026quot;FILE\u0026quot;, TAR_BZ2_SRC, NULL); check(rc == 0, \u0026quot;Failed to untar %s\u0026quot;, TAR_BZ2_SRC); } else { sentinel(\u0026quot;Don't now how to handle %s\u0026quot;, url); } // indicates that an install needs to actually run return 1; error: return -1; } int Command_build(apr_pool_t * p, const char *url, const char *configure_opts, const char *make_opts, const char *install_opts) { int rc = 0; check(access(BUILD_DIR, X_OK | R_OK | W_OK) == 0, \u0026quot;Build directory doesn't exist: %s\u0026quot;, BUILD_DIR); // actually do an install if (access(CONFIG_SCRIPT, X_OK) == 0) { log_info(\u0026quot;Has a configure script, running it.\u0026quot;); rc = Shell_exec(CONFIGURE_SH, \u0026quot;OPTS\u0026quot;, configure_opts, NULL); check(rc == 0, \u0026quot;Failed to configure.\u0026quot;); } rc = Shell_exec(MAKE_SH, \u0026quot;OPTS\u0026quot;, make_opts, NULL); check(rc == 0, \u0026quot;Failed to build.\u0026quot;); rc = Shell_exec(INSTALL_SH, \u0026quot;TARGET\u0026quot;, install_opts ? install_opts : \u0026quot;install\u0026quot;, NULL); check(rc == 0, \u0026quot;Failed to install.\u0026quot;); rc = Shell_exec(CLEANUP_SH, NULL); check(rc == 0, \u0026quot;Failed to cleanup after build.\u0026quot;); rc = DB_update(url); check(rc == 0, \u0026quot;Failed to add this package to the database.\u0026quot;); return 0; error: return -1; } int Command_install(apr_pool_t * p, const char *url, const char *configure_opts, const char *make_opts, const char *install_opts) { int rc = 0; check(Shell_exec(CLEANUP_SH, NULL) == 0, \u0026quot;Failed to cleanup before building.\u0026quot;); rc = DB_find(url); check(rc != -1, \u0026quot;Error checking the install database.\u0026quot;); if (rc == 1) { log_info(\u0026quot;Package %s already installed.\u0026quot;, url); return 0; } rc = Command_fetch(p, url, 0); if (rc == 1) { rc = Command_build(p, url, configure_opts, make_opts, install_opts); check(rc == 0, \u0026quot;Failed to build: %s\u0026quot;, url); } else if (rc == 0) { // no install needed log_info(\u0026quot;Depends successfully installed: %s\u0026quot;, url); } else { // had an error sentinel(\u0026quot;Install failed: %s\u0026quot;, url); } Shell_exec(CLEANUP_SH, NULL); return 0; error: Shell_exec(CLEANUP_SH, NULL); return -1; }  .\\ex41\\devpkg\\commands.h\n#ifndef _commands_h #define _commands_h #include \u0026lt;apr_pools.h\u0026gt; #define DEPENDS_PATH \u0026quot;/tmp/DEPENDS\u0026quot; #define TAR_GZ_SRC \u0026quot;/tmp/pkg-src.tar.gz\u0026quot; #define TAR_BZ2_SRC \u0026quot;/tmp/pkg-src.tar.bz2\u0026quot; #define BUILD_DIR \u0026quot;/tmp/pkg-build\u0026quot; #define GIT_PAT \u0026quot;*.git\u0026quot; #define DEPEND_PAT \u0026quot;*DEPENDS\u0026quot; #define TAR_GZ_PAT \u0026quot;*.tar.gz\u0026quot; #define TAR_BZ2_PAT \u0026quot;*.tar.bz2\u0026quot; #define CONFIG_SCRIPT \u0026quot;/tmp/pkg-build/configure\u0026quot; enum CommandType { COMMAND_NONE, COMMAND_INSTALL, COMMAND_LIST, COMMAND_FETCH, COMMAND_INIT, COMMAND_BUILD }; int Command_fetch(apr_pool_t * p, const char *url, int fetch_only); int Command_install(apr_pool_t * p, const char *url, const char *configure_opts, const char *make_opts, const char *install_opts); int Command_depends(apr_pool_t * p, const char *path); int Command_build(apr_pool_t * p, const char *url, const char *configure_opts, const char *make_opts, const char *install_opts); #endif  .\\ex41\\devpkg\\db.c\n#include \u0026lt;unistd.h\u0026gt; #include \u0026lt;apr_errno.h\u0026gt; #include \u0026lt;apr_file_io.h\u0026gt; #include \u0026quot;db.h\u0026quot; #include \u0026quot;bstrlib.h\u0026quot; #include \u0026quot;dbg.h\u0026quot; static FILE *DB_open(const char *path, const char *mode) { return fopen(path, mode); } static void DB_close(FILE * db) { fclose(db); } static bstring DB_load() { FILE *db = NULL; bstring data = NULL; db = DB_open(DB_FILE, \u0026quot;r\u0026quot;); check(db, \u0026quot;Failed to open database: %s\u0026quot;, DB_FILE); data = bread((bNread) fread, db); check(data, \u0026quot;Failed to read from db file: %s\u0026quot;, DB_FILE); DB_close(db); return data; error: if (db) DB_close(db); if (data) bdestroy(data); return NULL; } int DB_update(const char *url) { if (DB_find(url)) { log_info(\u0026quot;Already recorded as installed: %s\u0026quot;, url); } FILE *db = DB_open(DB_FILE, \u0026quot;a+\u0026quot;); check(db, \u0026quot;Failed to open DB file: %s\u0026quot;, DB_FILE); bstring line = bfromcstr(url); bconchar(line, '\\n'); int rc = fwrite(line-\u0026gt;data, blength(line), 1, db); check(rc == 1, \u0026quot;Failed to append to the db.\u0026quot;); return 0; error: if (db) DB_close(db); return -1; } int DB_find(const char *url) { bstring data = NULL; bstring line = bfromcstr(url); int res = -1; data = DB_load(); check(data, \u0026quot;Failed to load: %s\u0026quot;, DB_FILE); if (binstr(data, 0, line) == BSTR_ERR) { res = 0; } else { res = 1; } error: // fallthrough if (data) bdestroy(data); if (line) bdestroy(line); return res; } int DB_init() { apr_pool_t *p = NULL; apr_pool_initialize(); apr_pool_create(\u0026amp;p, NULL); if (access(DB_DIR, W_OK | X_OK) == -1) { apr_status_t rc = apr_dir_make_recursive(DB_DIR, APR_UREAD | APR_UWRITE | APR_UEXECUTE | APR_GREAD | APR_GWRITE | APR_GEXECUTE, p); check(rc == APR_SUCCESS, \u0026quot;Failed to make database dir: %s\u0026quot;, DB_DIR); } if (access(DB_FILE, W_OK) == -1) { FILE *db = DB_open(DB_FILE, \u0026quot;w\u0026quot;); check(db, \u0026quot;Cannot open database: %s\u0026quot;, DB_FILE); DB_close(db); } apr_pool_destroy(p); return 0; error: apr_pool_destroy(p); return -1; } int DB_list() { bstring data = DB_load(); check(data, \u0026quot;Failed to read load: %s\u0026quot;, DB_FILE); printf(\u0026quot;%s\u0026quot;, bdata(data)); bdestroy(data); return 0; error: return -1; }  .\\ex41\\devpkg\\db.h\n#ifndef _db_h #define _db_h #define DB_FILE \u0026quot;/usr/local/.devpkg/db\u0026quot; #define DB_DIR \u0026quot;/usr/local/.devpkg\u0026quot; int DB_init(); int DB_list(); int DB_update(const char *url); int DB_find(const char *url); #endif  .\\ex41\\devpkg\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex41\\devpkg\\devpkg.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;apr_general.h\u0026gt; #include \u0026lt;apr_getopt.h\u0026gt; #include \u0026lt;apr_strings.h\u0026gt; #include \u0026lt;apr_lib.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; #include \u0026quot;db.h\u0026quot; #include \u0026quot;commands.h\u0026quot; int main(int argc, const char *argv[]) { apr_pool_t *p = NULL; apr_pool_initialize(); apr_pool_create(\u0026amp;p, NULL); apr_getopt_t *opt; apr_status_t rv; char ch = '\\0'; const char *optarg = NULL; const char *config_opts = NULL; const char *install_opts = NULL; const char *make_opts = NULL; const char *url = NULL; enum CommandType request = COMMAND_NONE; rv = apr_getopt_init(\u0026amp;opt, p, argc, argv); while (apr_getopt(opt, \u0026quot;I:Lc:m:i:d:SF:B:\u0026quot;, \u0026amp;ch, \u0026amp;optarg) == APR_SUCCESS) { switch (ch) { case 'I': request = COMMAND_INSTALL; url = optarg; break; case 'L': request = COMMAND_LIST; break; case 'c': config_opts = optarg; break; case 'm': make_opts = optarg; break; case 'i': install_opts = optarg; break; case 'S': request = COMMAND_INIT; break; case 'F': request = COMMAND_FETCH; url = optarg; break; case 'B': request = COMMAND_BUILD; url = optarg; break; } } switch (request) { case COMMAND_INSTALL: check(url, \u0026quot;You must at least give a URL.\u0026quot;); Command_install(p, url, config_opts, make_opts, install_opts); break; case COMMAND_LIST: DB_list(); break; case COMMAND_FETCH: check(url != NULL, \u0026quot;You must give a URL.\u0026quot;); Command_fetch(p, url, 1); log_info(\u0026quot;Downloaded to %s and in /tmp/\u0026quot;, BUILD_DIR); break; case COMMAND_BUILD: check(url, \u0026quot;You must at least give a URL.\u0026quot;); Command_build(p, url, config_opts, make_opts, install_opts); break; case COMMAND_INIT: rv = DB_init(); check(rv == 0, \u0026quot;Failed to make the database.\u0026quot;); break; default: sentinel(\u0026quot;Invalid command given.\u0026quot;); } return 0; error: return 1; }  .\\ex41\\devpkg\\shell.c\n#include \u0026quot;shell.h\u0026quot; #include \u0026quot;dbg.h\u0026quot; #include \u0026lt;stdarg.h\u0026gt; int Shell_exec(Shell template, ...) { apr_pool_t *p = NULL; int rc = -1; apr_status_t rv = APR_SUCCESS; va_list argp; const char *key = NULL; const char *arg = NULL; int i = 0; rv = apr_pool_create(\u0026amp;p, NULL); check(rv == APR_SUCCESS, \u0026quot;Failed to create pool.\u0026quot;); va_start(argp, template); for (key = va_arg(argp, const char *); key != NULL; key = va_arg(argp, const char *)) { arg = va_arg(argp, const char *); for (i = 0; template.args[i] != NULL; i++) { if (strcmp(template.args[i], key) == 0) { template.args[i] = arg; break; // found it } } } rc = Shell_run(p, \u0026amp;template); apr_pool_destroy(p); va_end(argp); return rc; error: if (p) { apr_pool_destroy(p); } return rc; } int Shell_run(apr_pool_t * p, Shell * cmd) { apr_procattr_t *attr; apr_status_t rv; apr_proc_t newproc; rv = apr_procattr_create(\u0026amp;attr, p); check(rv == APR_SUCCESS, \u0026quot;Failed to create proc attr.\u0026quot;); rv = apr_procattr_io_set(attr, APR_NO_PIPE, APR_NO_PIPE, APR_NO_PIPE); check(rv == APR_SUCCESS, \u0026quot;Failed to set IO of command.\u0026quot;); rv = apr_procattr_dir_set(attr, cmd-\u0026gt;dir); check(rv == APR_SUCCESS, \u0026quot;Failed to set root to %s\u0026quot;, cmd-\u0026gt;dir); rv = apr_procattr_cmdtype_set(attr, APR_PROGRAM_PATH); check(rv == APR_SUCCESS, \u0026quot;Failed to set cmd type.\u0026quot;); rv = apr_proc_create(\u0026amp;newproc, cmd-\u0026gt;exe, cmd-\u0026gt;args, NULL, attr, p); check(rv == APR_SUCCESS, \u0026quot;Failed to run command.\u0026quot;); rv = apr_proc_wait(\u0026amp;newproc, \u0026amp;cmd-\u0026gt;exit_code, \u0026amp;cmd-\u0026gt;exit_why, APR_WAIT); check(rv == APR_CHILD_DONE, \u0026quot;Failed to wait.\u0026quot;); check(cmd-\u0026gt;exit_code == 0, \u0026quot;%s exited badly.\u0026quot;, cmd-\u0026gt;exe); check(cmd-\u0026gt;exit_why == APR_PROC_EXIT, \u0026quot;%s was killed or crashed\u0026quot;, cmd-\u0026gt;exe); return 0; error: return -1; } Shell CLEANUP_SH = { .exe = \u0026quot;rm\u0026quot;, .dir = \u0026quot;/tmp\u0026quot;, .args = {\u0026quot;rm\u0026quot;, \u0026quot;-rf\u0026quot;, \u0026quot;/tmp/pkg-build\u0026quot;, \u0026quot;/tmp/pkg-src.tar.gz\u0026quot;, \u0026quot;/tmp/pkg-src.tar.bz2\u0026quot;, \u0026quot;/tmp/DEPENDS\u0026quot;, NULL} }; Shell GIT_SH = { .dir = \u0026quot;/tmp\u0026quot;, .exe = \u0026quot;git\u0026quot;, .args = {\u0026quot;git\u0026quot;, \u0026quot;clone\u0026quot;, \u0026quot;URL\u0026quot;, \u0026quot;pkg-build\u0026quot;, NULL} }; Shell TAR_SH = { .dir = \u0026quot;/tmp/pkg-build\u0026quot;, .exe = \u0026quot;tar\u0026quot;, .args = {\u0026quot;tar\u0026quot;, \u0026quot;-xzf\u0026quot;, \u0026quot;FILE\u0026quot;, \u0026quot;--strip-components\u0026quot;, \u0026quot;1\u0026quot;, NULL} }; Shell CURL_SH = { .dir = \u0026quot;/tmp\u0026quot;, .exe = \u0026quot;curl\u0026quot;, .args = {\u0026quot;curl\u0026quot;, \u0026quot;-L\u0026quot;, \u0026quot;-o\u0026quot;, \u0026quot;TARGET\u0026quot;, \u0026quot;URL\u0026quot;, NULL} }; Shell CONFIGURE_SH = { .exe = \u0026quot;./configure\u0026quot;, .dir = \u0026quot;/tmp/pkg-build\u0026quot;, .args = {\u0026quot;configure\u0026quot;, \u0026quot;OPTS\u0026quot;, NULL} , }; Shell MAKE_SH = { .exe = \u0026quot;make\u0026quot;, .dir = \u0026quot;/tmp/pkg-build\u0026quot;, .args = {\u0026quot;make\u0026quot;, \u0026quot;OPTS\u0026quot;, NULL} }; Shell INSTALL_SH = { .exe = \u0026quot;sudo\u0026quot;, .dir = \u0026quot;/tmp/pkg-build\u0026quot;, .args = {\u0026quot;sudo\u0026quot;, \u0026quot;make\u0026quot;, \u0026quot;TARGET\u0026quot;, NULL} };  .\\ex41\\devpkg\\shell.h\n#ifndef _shell_h #define _shell_h #define MAX_COMMAND_ARGS 100 #include \u0026lt;apr_thread_proc.h\u0026gt; typedef struct Shell { const char *dir; const char *exe; apr_procattr_t *attr; apr_proc_t proc; apr_exit_why_e exit_why; int exit_code; const char *args[MAX_COMMAND_ARGS]; } Shell; int Shell_run(apr_pool_t * p, Shell * cmd); int Shell_exec(Shell cmd, ...); extern Shell CLEANUP_SH; extern Shell GIT_SH; extern Shell TAR_SH; extern Shell CURL_SH; extern Shell CONFIGURE_SH; extern Shell MAKE_SH; extern Shell INSTALL_SH; #endif  .\\ex41\\ex41.1.sh\nset -e ## go somewhere safe cd /tmp ## get the source to base APR 1.5.2 curl -L -O http://archive.apache.org/dist/apr/apr-1.5.2.tar.gz ## extract it and go into the source tar -xzvf apr-1.5.2.tar.gz cd apr-1.5.2 ## you need this on OSX Yosemite touch libtoolT ## configure, make, make install ./configure make sudo make install ## reset and cleanup cd /tmp rm -rf apr-1.5.2 apr-1.5.2.tar.gz ## do the same with apr-util curl -L -O http://archive.apache.org/dist/apr/apr-util-1.5.4.tar.gz ## extract tar -xzvf apr-util-1.5.4.tar.gz cd apr-util-1.5.4 ## you need this on OSX Yosemite touch libtoolT ## configure, make, make install ./configure --with-apr=/usr/local/apr ## you need that extra parameter to configure because ## apr-util can't really find it because...who knows. make sudo make install #cleanup cd /tmp rm -rf apr-util-1.5.4* apr-1.5.2*  .\\ex41\\ex41.2.sh\nmkdir devpkg cd devpkg touch README Makefile  The Plan\nCreate a handy little tool called devpkg.\nThis will be a lot of work, so this video is more complete.\nDemonstration\nI\u0026rsquo;ll demonstrate how devpkg works so you get a better idea.\nRead the book\u0026rsquo;s description as well for more details.\nThe Apache Portable Runtime\nReview of the APR and installing it.\nThe Analysis\nWalk through the code, where everything is, and what to watch out for.\nGetting My Code\nIf you get stuck you can check out the learn-c-the-hard-way-lectures project:\nAnd look in ex41/devpkg for the code.\nExtra Credit\n Compare your code to my code available online. Starting with 100%, remove 1% for each line you got wrong. Take the notes.txt file that you previously created and implement your improvements to the the code and functionality of devpkg. Write an alternative version of devpkg using your other favorite language or the one you think can do this the best. Compare the two, then improve your C version of devpkg based on what you\u0026rsquo;ve learned.  Exercise 42 Stacks and Queues The Plan\nCreate a Stack and Queue data structure from just the unit tests.\nPAUSE!\nWARNING! Stop the video now and try to solve this yourself!\nI\u0026rsquo;ll show you how I did it after you try it (or you can cheat).\nCode Review\n.\\ex42\\queue_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/queue.h\u0026gt; #include \u0026lt;assert.h\u0026gt; static Queue *queue = NULL; char *tests[] = { \u0026quot;test1 data\u0026quot;, \u0026quot;test2 data\u0026quot;, \u0026quot;test3 data\u0026quot; }; #define NUM_TESTS 3 char *test_create() { queue = Queue_create(); mu_assert(queue != NULL, \u0026quot;Failed to create queue.\u0026quot;); return NULL; } char *test_destroy() { mu_assert(queue != NULL, \u0026quot;Failed to make queue #2\u0026quot;); Queue_destroy(queue); return NULL; } char *test_send_recv() { int i = 0; for (i = 0; i \u0026lt; NUM_TESTS; i++) { Queue_send(queue, tests[i]); mu_assert(Queue_peek(queue) == tests[0], \u0026quot;Wrong next value.\u0026quot;); } mu_assert(Queue_count(queue) == NUM_TESTS, \u0026quot;Wrong count on send.\u0026quot;); QUEUE_FOREACH(queue, cur) { debug(\u0026quot;VAL: %s\u0026quot;, (char *)cur-\u0026gt;value); } for (i = 0; i \u0026lt; NUM_TESTS; i++) { char *val = Queue_recv(queue); mu_assert(val == tests[i], \u0026quot;Wrong value on recv.\u0026quot;); } mu_assert(Queue_count(queue) == 0, \u0026quot;Wrong count after recv.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_create); mu_run_test(test_send_recv); mu_run_test(test_destroy); return NULL; } RUN_TESTS(all_tests);  .\\ex42\\stack_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/stack.h\u0026gt; #include \u0026lt;assert.h\u0026gt; static Stack *stack = NULL; char *tests[] = { \u0026quot;test1 data\u0026quot;, \u0026quot;test2 data\u0026quot;, \u0026quot;test3 data\u0026quot; }; #define NUM_TESTS 3 char *test_create() { stack = Stack_create(); mu_assert(stack != NULL, \u0026quot;Failed to create stack.\u0026quot;); return NULL; } char *test_destroy() { mu_assert(stack != NULL, \u0026quot;Failed to make stack #2\u0026quot;); Stack_destroy(stack); return NULL; } char *test_push_pop() { int i = 0; for (i = 0; i \u0026lt; NUM_TESTS; i++) { Stack_push(stack, tests[i]); mu_assert(Stack_peek(stack) == tests[i], \u0026quot;Wrong next value.\u0026quot;); } mu_assert(Stack_count(stack) == NUM_TESTS, \u0026quot;Wrong count on push.\u0026quot;); STACK_FOREACH(stack, cur) { debug(\u0026quot;VAL: %s\u0026quot;, (char *)cur-\u0026gt;value); } for (i = NUM_TESTS - 1; i \u0026gt;= 0; i--) { char *val = Stack_pop(stack); mu_assert(val == tests[i], \u0026quot;Wrong value on pop.\u0026quot;); } mu_assert(Stack_count(stack) == 0, \u0026quot;Wrong count after pop.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_create); mu_run_test(test_push_pop); mu_run_test(test_destroy); return NULL; } RUN_TESTS(all_tests);  Extra Credit\n Implement Stack using DArray instead of List, but without changing the unit test. That means you\u0026rsquo;ll have to create your own STACK_FOREACH.  Exercise 43 A Simple Statistics Engine .\\ex43\\stats.h\n#ifndef lcthw_stats_h #define lcthw_stats_h typedef struct Stats { double sum; double sumsq; unsigned long n; double min; double max; } Stats; Stats *Stats_recreate(double sum, double sumsq, unsigned long n, double min, double max); Stats *Stats_create(); double Stats_mean(Stats * st); double Stats_stddev(Stats * st); void Stats_sample(Stats * st, double s); void Stats_dump(Stats * st); #endif  .\\ex43\\stats.c\n#include \u0026lt;math.h\u0026gt; #include \u0026lt;lcthw/stats.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; Stats *Stats_recreate(double sum, double sumsq, unsigned long n, double min, double max) { Stats *st = malloc(sizeof(Stats)); check_mem(st); st-\u0026gt;sum = sum; st-\u0026gt;sumsq = sumsq; st-\u0026gt;n = n; st-\u0026gt;min = min; st-\u0026gt;max = max; return st; error: return NULL; } Stats *Stats_create() { return Stats_recreate(0.0, 0.0, 0L, 0.0, 0.0); } double Stats_mean(Stats * st) { return st-\u0026gt;sum / st-\u0026gt;n; } double Stats_stddev(Stats * st) { return sqrt((st-\u0026gt;sumsq - (st-\u0026gt;sum * st-\u0026gt;sum / st-\u0026gt;n)) / (st-\u0026gt;n - 1)); } void Stats_sample(Stats * st, double s) { st-\u0026gt;sum += s; st-\u0026gt;sumsq += s * s; if (st-\u0026gt;n == 0) { st-\u0026gt;min = s; st-\u0026gt;max = s; } else { if (st-\u0026gt;min \u0026gt; s) st-\u0026gt;min = s; if (st-\u0026gt;max \u0026lt; s) st-\u0026gt;max = s; } st-\u0026gt;n += 1; } void Stats_dump(Stats * st) { fprintf(stderr, \u0026quot;sum: %f, sumsq: %f, n: %ld, \u0026quot; \u0026quot;min: %f, max: %f, mean: %f, stddev: %f\u0026quot;, st-\u0026gt;sum, st-\u0026gt;sumsq, st-\u0026gt;n, st-\u0026gt;min, st-\u0026gt;max, Stats_mean(st), Stats_stddev(st)); }  .\\ex43\\stats_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/stats.h\u0026gt; #include \u0026lt;math.h\u0026gt; const int NUM_SAMPLES = 10; double samples[] = { 6.1061334, 9.6783204, 1.2747090, 8.2395131, 0.3333483, 6.9755066, 1.0626275, 7.6587523, 4.9382973, 9.5788115 }; Stats expect = { .sumsq = 425.1641, .sum = 55.84602, .min = 0.333, .max = 9.678, .n = 10, }; double expect_mean = 5.584602; double expect_stddev = 3.547868; #define EQ(X,Y,N) (round((X) * pow(10, N)) == round((Y) * pow(10, N))) char *test_operations() { int i = 0; Stats *st = Stats_create(); mu_assert(st != NULL, \u0026quot;Failed to create stats.\u0026quot;); for (i = 0; i \u0026lt; NUM_SAMPLES; i++) { Stats_sample(st, samples[i]); } Stats_dump(st); mu_assert(EQ(st-\u0026gt;sumsq, expect.sumsq, 3), \u0026quot;sumsq not valid\u0026quot;); mu_assert(EQ(st-\u0026gt;sum, expect.sum, 3), \u0026quot;sum not valid\u0026quot;); mu_assert(EQ(st-\u0026gt;min, expect.min, 3), \u0026quot;min not valid\u0026quot;); mu_assert(EQ(st-\u0026gt;max, expect.max, 3), \u0026quot;max not valid\u0026quot;); mu_assert(EQ(st-\u0026gt;n, expect.n, 3), \u0026quot;max not valid\u0026quot;); mu_assert(EQ(expect_mean, Stats_mean(st), 3), \u0026quot;mean not valid\u0026quot;); mu_assert(EQ(expect_stddev, Stats_stddev(st), 3), \u0026quot;stddev not valid\u0026quot;); return NULL; } char *test_recreate() { Stats *st = Stats_recreate( expect.sum, expect.sumsq, expect.n, expect.min, expect.max); mu_assert(st-\u0026gt;sum == expect.sum, \u0026quot;sum not equal\u0026quot;); mu_assert(st-\u0026gt;sumsq == expect.sumsq, \u0026quot;sumsq not equal\u0026quot;); mu_assert(st-\u0026gt;n == expect.n, \u0026quot;n not equal\u0026quot;); mu_assert(st-\u0026gt;min == expect.min, \u0026quot;min not equal\u0026quot;); mu_assert(st-\u0026gt;max == expect.max, \u0026quot;max not equal\u0026quot;); mu_assert(EQ(expect_mean, Stats_mean(st), 3), \u0026quot;mean not valid\u0026quot;); mu_assert(EQ(expect_stddev, Stats_stddev(st), 3), \u0026quot;stddev not valid\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_operations); mu_run_test(test_recreate); return NULL; } RUN_TESTS(all_tests);  .\\ex43\\stats.h\n#ifndef lcthw_stats_h #define lcthw_stats_h typedef struct Stats { double sum; double sumsq; unsigned long n; double min; double max; } Stats; Stats *Stats_recreate(double sum, double sumsq, unsigned long n, double min, double max); Stats *Stats_create(); double Stats_mean(Stats * st); double Stats_stddev(Stats * st); void Stats_sample(Stats * st, double s); void Stats_dump(Stats * st); #endif  .\\ex43\\stats.c\n#include \u0026lt;math.h\u0026gt; #include \u0026lt;lcthw/stats.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; Stats *Stats_recreate(double sum, double sumsq, unsigned long n, double min, double max) { Stats *st = malloc(sizeof(Stats)); check_mem(st); st-\u0026gt;sum = sum; st-\u0026gt;sumsq = sumsq; st-\u0026gt;n = n; st-\u0026gt;min = min; st-\u0026gt;max = max; return st; error: return NULL; } Stats *Stats_create() { return Stats_recreate(0.0, 0.0, 0L, 0.0, 0.0); } double Stats_mean(Stats * st) { return st-\u0026gt;sum / st-\u0026gt;n; } double Stats_stddev(Stats * st) { return sqrt((st-\u0026gt;sumsq - (st-\u0026gt;sum * st-\u0026gt;sum / st-\u0026gt;n)) / (st-\u0026gt;n - 1)); } void Stats_sample(Stats * st, double s) { st-\u0026gt;sum += s; st-\u0026gt;sumsq += s * s; if (st-\u0026gt;n == 0) { st-\u0026gt;min = s; st-\u0026gt;max = s; } else { if (st-\u0026gt;min \u0026gt; s) st-\u0026gt;min = s; if (st-\u0026gt;max \u0026lt; s) st-\u0026gt;max = s; } st-\u0026gt;n += 1; } void Stats_dump(Stats * st) { fprintf(stderr, \u0026quot;sum: %f, sumsq: %f, n: %ld, \u0026quot; \u0026quot;min: %f, max: %f, mean: %f, stddev: %f\u0026quot;, st-\u0026gt;sum, st-\u0026gt;sumsq, st-\u0026gt;n, st-\u0026gt;min, st-\u0026gt;max, Stats_mean(st), Stats_stddev(st)); }  .\\ex43\\stats_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/stats.h\u0026gt; #include \u0026lt;math.h\u0026gt; const int NUM_SAMPLES = 10; double samples[] = { 6.1061334, 9.6783204, 1.2747090, 8.2395131, 0.3333483, 6.9755066, 1.0626275, 7.6587523, 4.9382973, 9.5788115 }; Stats expect = { .sumsq = 425.1641, .sum = 55.84602, .min = 0.333, .max = 9.678, .n = 10, }; double expect_mean = 5.584602; double expect_stddev = 3.547868; #define EQ(X,Y,N) (round((X) * pow(10, N)) == round((Y) * pow(10, N))) char *test_operations() { int i = 0; Stats *st = Stats_create(); mu_assert(st != NULL, \u0026quot;Failed to create stats.\u0026quot;); for (i = 0; i \u0026lt; NUM_SAMPLES; i++) { Stats_sample(st, samples[i]); } Stats_dump(st); mu_assert(EQ(st-\u0026gt;sumsq, expect.sumsq, 3), \u0026quot;sumsq not valid\u0026quot;); mu_assert(EQ(st-\u0026gt;sum, expect.sum, 3), \u0026quot;sum not valid\u0026quot;); mu_assert(EQ(st-\u0026gt;min, expect.min, 3), \u0026quot;min not valid\u0026quot;); mu_assert(EQ(st-\u0026gt;max, expect.max, 3), \u0026quot;max not valid\u0026quot;); mu_assert(EQ(st-\u0026gt;n, expect.n, 3), \u0026quot;max not valid\u0026quot;); mu_assert(EQ(expect_mean, Stats_mean(st), 3), \u0026quot;mean not valid\u0026quot;); mu_assert(EQ(expect_stddev, Stats_stddev(st), 3), \u0026quot;stddev not valid\u0026quot;); return NULL; } char *test_recreate() { Stats *st = Stats_recreate( expect.sum, expect.sumsq, expect.n, expect.min, expect.max); mu_assert(st-\u0026gt;sum == expect.sum, \u0026quot;sum not equal\u0026quot;); mu_assert(st-\u0026gt;sumsq == expect.sumsq, \u0026quot;sumsq not equal\u0026quot;); mu_assert(st-\u0026gt;n == expect.n, \u0026quot;n not equal\u0026quot;); mu_assert(st-\u0026gt;min == expect.min, \u0026quot;min not equal\u0026quot;); mu_assert(st-\u0026gt;max == expect.max, \u0026quot;max not equal\u0026quot;); mu_assert(EQ(expect_mean, Stats_mean(st), 3), \u0026quot;mean not valid\u0026quot;); mu_assert(EQ(expect_stddev, Stats_stddev(st), 3), \u0026quot;stddev not valid\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_operations); mu_run_test(test_recreate); return NULL; } RUN_TESTS(all_tests);  The Plan\n A fun and handy little statistics engine for simple analysis. Comparing it to the same in R.  Comparing Test vs. R\nI\u0026rsquo;ll use R to show you how this works vs. normal calculations using all data.\nBreaking It\nEasiest way to break this is to just feed it bad data once then the whole stream is broken.\nExtra Credit\n Convert the Stats_stddev and Stats_mean to static inline functions in the stats.h file instead of in the stats.c file. Use this code to write a performance test of the string_algos_test.c. Make it optional, and have it run the base test as a series of samples, and then report the results. Write a version of this in another programming language you know. Confirm that this version is correct based on what I have here.  Extra Credit\n Write a little program that can take a file full of numbers and spit these statistics out for them. Make the program accept a table of data that has headers on one line, then all of the other numbers on lines after it are separated by any number of spaces. Your program should then print out these statistics for each column by the header name.  Exercise 44 Ring Buffer The Plan\nLearn about a handy data structure for I/O processing:\nRing Buffers\nThe Code\n.\\ex44\\netclient.c\n#undef NDEBUG #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/select.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/uio.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;netdb.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; struct tagbstring NL = bsStatic(\u0026quot;\\n\u0026quot;); struct tagbstring CRLF = bsStatic(\u0026quot;\\r\\n\u0026quot;); int nonblock(int fd) { int flags = fcntl(fd, F_GETFL, 0); check(flags \u0026gt;= 0, \u0026quot;Invalid flags on nonblock.\u0026quot;); int rc = fcntl(fd, F_SETFL, flags | O_NONBLOCK); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); return 0; error: return -1; } int client_connect(char *host, char *port) { int rc = 0; struct addrinfo *addr = NULL; rc = getaddrinfo(host, port, NULL, \u0026amp;addr); check(rc == 0, \u0026quot;Failed to lookup %s:%s\u0026quot;, host, port); int sock = socket(AF_INET, SOCK_STREAM, 0); check(sock \u0026gt;= 0, \u0026quot;Cannot create a socket.\u0026quot;); rc = connect(sock, addr-\u0026gt;ai_addr, addr-\u0026gt;ai_addrlen); check(rc == 0, \u0026quot;Connect failed.\u0026quot;); rc = nonblock(sock); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); freeaddrinfo(addr); return sock; error: freeaddrinfo(addr); return -1; } int read_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; if (RingBuffer_available_data(buffer) == 0) { buffer-\u0026gt;start = buffer-\u0026gt;end = 0; } if (is_socket) { rc = recv(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer), 0); } else { rc = read(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer)); } check(rc \u0026gt;= 0, \u0026quot;Failed to read from fd: %d\u0026quot;, fd); RingBuffer_commit_write(buffer, rc); return rc; error: return -1; } int write_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; bstring data = RingBuffer_get_all(buffer); check(data != NULL, \u0026quot;Failed to get from the buffer.\u0026quot;); check(bfindreplace(data, \u0026amp;NL, \u0026amp;CRLF, 0) == BSTR_OK, \u0026quot;Failed to replace NL.\u0026quot;); if (is_socket) { rc = send(fd, bdata(data), blength(data), 0); } else { rc = write(fd, bdata(data), blength(data)); } check(rc == blength(data), \u0026quot;Failed to write everything to fd: %d.\u0026quot;, fd); bdestroy(data); return rc; error: return -1; } int main(int argc, char *argv[]) { fd_set allreads; fd_set readmask; int socket = 0; int rc = 0; RingBuffer *in_rb = RingBuffer_create(1024 * 10); RingBuffer *sock_rb = RingBuffer_create(1024 * 10); check(argc == 3, \u0026quot;USAGE: netclient host port\u0026quot;); socket = client_connect(argv[1], argv[2]); check(socket \u0026gt;= 0, \u0026quot;connect to %s:%s failed.\u0026quot;, argv[1], argv[2]); FD_ZERO(\u0026amp;allreads); FD_SET(socket, \u0026amp;allreads); FD_SET(0, \u0026amp;allreads); while (1) { readmask = allreads; rc = select(socket + 1, \u0026amp;readmask, NULL, NULL, NULL); check(rc \u0026gt;= 0, \u0026quot;select failed.\u0026quot;); if (FD_ISSET(0, \u0026amp;readmask)) { rc = read_some(in_rb, 0, 0); check_debug(rc != -1, \u0026quot;Failed to read from stdin.\u0026quot;); } if (FD_ISSET(socket, \u0026amp;readmask)) { rc = read_some(sock_rb, socket, 0); check_debug(rc != -1, \u0026quot;Failed to read from socket.\u0026quot;); } while (!RingBuffer_empty(sock_rb)) { rc = write_some(sock_rb, 1, 0); check_debug(rc != -1, \u0026quot;Failed to write to stdout.\u0026quot;); } while (!RingBuffer_empty(in_rb)) { rc = write_some(in_rb, socket, 1); check_debug(rc != -1, \u0026quot;Failed to write to socket.\u0026quot;); } } return 0; error: return -1; }  It\u0026rsquo;s basically a DArray with dynamic start and end settings. You can also use a Queue of bstrings to do almost the same thing.\nCode Review\n.\\ex44\\netclient.c\n#undef NDEBUG #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/select.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/uio.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;netdb.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; struct tagbstring NL = bsStatic(\u0026quot;\\n\u0026quot;); struct tagbstring CRLF = bsStatic(\u0026quot;\\r\\n\u0026quot;); int nonblock(int fd) { int flags = fcntl(fd, F_GETFL, 0); check(flags \u0026gt;= 0, \u0026quot;Invalid flags on nonblock.\u0026quot;); int rc = fcntl(fd, F_SETFL, flags | O_NONBLOCK); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); return 0; error: return -1; } int client_connect(char *host, char *port) { int rc = 0; struct addrinfo *addr = NULL; rc = getaddrinfo(host, port, NULL, \u0026amp;addr); check(rc == 0, \u0026quot;Failed to lookup %s:%s\u0026quot;, host, port); int sock = socket(AF_INET, SOCK_STREAM, 0); check(sock \u0026gt;= 0, \u0026quot;Cannot create a socket.\u0026quot;); rc = connect(sock, addr-\u0026gt;ai_addr, addr-\u0026gt;ai_addrlen); check(rc == 0, \u0026quot;Connect failed.\u0026quot;); rc = nonblock(sock); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); freeaddrinfo(addr); return sock; error: freeaddrinfo(addr); return -1; } int read_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; if (RingBuffer_available_data(buffer) == 0) { buffer-\u0026gt;start = buffer-\u0026gt;end = 0; } if (is_socket) { rc = recv(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer), 0); } else { rc = read(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer)); } check(rc \u0026gt;= 0, \u0026quot;Failed to read from fd: %d\u0026quot;, fd); RingBuffer_commit_write(buffer, rc); return rc; error: return -1; } int write_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; bstring data = RingBuffer_get_all(buffer); check(data != NULL, \u0026quot;Failed to get from the buffer.\u0026quot;); check(bfindreplace(data, \u0026amp;NL, \u0026amp;CRLF, 0) == BSTR_OK, \u0026quot;Failed to replace NL.\u0026quot;); if (is_socket) { rc = send(fd, bdata(data), blength(data), 0); } else { rc = write(fd, bdata(data), blength(data)); } check(rc == blength(data), \u0026quot;Failed to write everything to fd: %d.\u0026quot;, fd); bdestroy(data); return rc; error: return -1; } int main(int argc, char *argv[]) { fd_set allreads; fd_set readmask; int socket = 0; int rc = 0; RingBuffer *in_rb = RingBuffer_create(1024 * 10); RingBuffer *sock_rb = RingBuffer_create(1024 * 10); check(argc == 3, \u0026quot;USAGE: netclient host port\u0026quot;); socket = client_connect(argv[1], argv[2]); check(socket \u0026gt;= 0, \u0026quot;connect to %s:%s failed.\u0026quot;, argv[1], argv[2]); FD_ZERO(\u0026amp;allreads); FD_SET(socket, \u0026amp;allreads); FD_SET(0, \u0026amp;allreads); while (1) { readmask = allreads; rc = select(socket + 1, \u0026amp;readmask, NULL, NULL, NULL); check(rc \u0026gt;= 0, \u0026quot;select failed.\u0026quot;); if (FD_ISSET(0, \u0026amp;readmask)) { rc = read_some(in_rb, 0, 0); check_debug(rc != -1, \u0026quot;Failed to read from stdin.\u0026quot;); } if (FD_ISSET(socket, \u0026amp;readmask)) { rc = read_some(sock_rb, socket, 0); check_debug(rc != -1, \u0026quot;Failed to read from socket.\u0026quot;); } while (!RingBuffer_empty(sock_rb)) { rc = write_some(sock_rb, 1, 0); check_debug(rc != -1, \u0026quot;Failed to write to stdout.\u0026quot;); } while (!RingBuffer_empty(in_rb)) { rc = write_some(in_rb, socket, 1); check_debug(rc != -1, \u0026quot;Failed to write to socket.\u0026quot;); } } return 0; error: return -1; }  The Analysis\n Watch a ring buffer work in the debugger. Draw it visually to explore it. The purpose is to efficiently add and remove data when the amount added and removed is random.  Pause!\nI will next review the unit test I wrote so if you want to attempt solving it yourself then pause now.\nThe Unit Test\nHere\u0026rsquo;s my version of the unit test.\nBreaking It\n The biggest mistake you\u0026rsquo;ll make with a ring buffer is off-by-one errors. This is why the RingBuffer_commit_ and other macros exist. Another common mistake is to use it between threads, but that\u0026rsquo;s a whole other book.  Extra Credit\n Create an alternative implementation of RingBuffer that uses the POSIX trick and a unit test for it. Add a performance comparison test to this unit test that compares the two versions by fuzzing them with random data and random read/write operations. Make sure that you set up this fuzzing so that the same operations are done to each version, and you can compare them between runs.  Exercise 45 A Simple TCP/IP Client The Plan\n Learn to use the select method and a RingBuffer to write a simple command line network client.  How select Works\nCode Review\nImproving It\nThese read functions are useful so I can put them in RingBuffer.\nExtra Credit\n As I mentioned, there are quite a few functions you may not know, so look them up. In fact, look them all up even if you think you know them. Go back through and add various defensive programming checks to the functions to improve them. Use the getopt function to allow the user the option not to translate \\n to \\r\\n. This is only needed on protocols that require it for line endings, like HTTP. Sometimes you don\u0026rsquo;t want the translation, so give the user the option.  Exercise 46 Ternary Search Tree The Plan\nLearn about my favorite data structure ever:\nTernary Search Tree\nThe Code\n.\\ex46\\tstree.h\n#ifndef _lcthw_TSTree_h #define _lcthw_TSTree_h #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;lcthw/darray.h\u0026gt; typedef struct TSTree { char splitchar; struct TSTree *low; struct TSTree *equal; struct TSTree *high; void *value; } TSTree; void *TSTree_search(TSTree * root, const char *key, size_t len); void *TSTree_search_prefix(TSTree * root, const char *key, size_t len); typedef void (*TSTree_traverse_cb) (void *value, void *data); TSTree *TSTree_insert(TSTree * node, const char *key, size_t len, void *value); void TSTree_traverse(TSTree * node, TSTree_traverse_cb cb, void *data); void TSTree_destroy(TSTree * root); #endif  .\\ex46\\tstree.c\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;lcthw/tstree.h\u0026gt; static inline TSTree *TSTree_insert_base(TSTree * root, TSTree * node, const char *key, size_t len, void *value) { if (node == NULL) { node = (TSTree *) calloc(1, sizeof(TSTree)); if (root == NULL) { root = node; } node-\u0026gt;splitchar = *key; } if (*key \u0026lt; node-\u0026gt;splitchar) { node-\u0026gt;low = TSTree_insert_base( root, node-\u0026gt;low, key, len, value); } else if (*key == node-\u0026gt;splitchar) { if (len \u0026gt; 1) { node-\u0026gt;equal = TSTree_insert_base( root, node-\u0026gt;equal, key + 1, len - 1, value); } else { assert(node-\u0026gt;value == NULL \u0026amp;\u0026amp; \u0026quot;Duplicate insert into tst.\u0026quot;); node-\u0026gt;value = value; } } else { node-\u0026gt;high = TSTree_insert_base( root, node-\u0026gt;high, key, len, value); } return node; } TSTree *TSTree_insert(TSTree * node, const char *key, size_t len, void *value) { return TSTree_insert_base(node, node, key, len, value); } void *TSTree_search(TSTree * root, const char *key, size_t len) { TSTree *node = root; size_t i = 0; while (i \u0026lt; len \u0026amp;\u0026amp; node) { if (key[i] \u0026lt; node-\u0026gt;splitchar) { node = node-\u0026gt;low; } else if (key[i] == node-\u0026gt;splitchar) { i++; if (i \u0026lt; len) node = node-\u0026gt;equal; } else { node = node-\u0026gt;high; } } if (node) { return node-\u0026gt;value; } else { return NULL; } } void *TSTree_search_prefix(TSTree * root, const char *key, size_t len) { if (len == 0) return NULL; TSTree *node = root; TSTree *last = NULL; size_t i = 0; while (i \u0026lt; len \u0026amp;\u0026amp; node) { if (key[i] \u0026lt; node-\u0026gt;splitchar) { node = node-\u0026gt;low; } else if (key[i] == node-\u0026gt;splitchar) { i++; if (i \u0026lt; len) { if (node-\u0026gt;value) last = node; node = node-\u0026gt;equal; } } else { node = node-\u0026gt;high; } } node = node ? node : last; // traverse until we find the first value in the equal chain // this is then the first node with this prefix while (node \u0026amp;\u0026amp; !node-\u0026gt;value) { node = node-\u0026gt;equal; } return node ? node-\u0026gt;value : NULL; } void TSTree_traverse(TSTree * node, TSTree_traverse_cb cb, void *data) { if (!node) return; if (node-\u0026gt;low) TSTree_traverse(node-\u0026gt;low, cb, data); if (node-\u0026gt;equal) { TSTree_traverse(node-\u0026gt;equal, cb, data); } if (node-\u0026gt;high) TSTree_traverse(node-\u0026gt;high, cb, data); if (node-\u0026gt;value) cb(node-\u0026gt;value, data); } void TSTree_destroy(TSTree * node) { if (node == NULL) return; if (node-\u0026gt;low) TSTree_destroy(node-\u0026gt;low); if (node-\u0026gt;equal) { TSTree_destroy(node-\u0026gt;equal); } if (node-\u0026gt;high) TSTree_destroy(node-\u0026gt;high); free(node); }  .\\ex46\\tstree_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;lcthw/tstree.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;lcthw/bstrlib.h\u0026gt; TSTree *node = NULL; char *valueA = \u0026quot;VALUEA\u0026quot;; char *valueB = \u0026quot;VALUEB\u0026quot;; char *value2 = \u0026quot;VALUE2\u0026quot;; char *value4 = \u0026quot;VALUE4\u0026quot;; char *reverse = \u0026quot;VALUER\u0026quot;; int traverse_count = 0; struct tagbstring test1 = bsStatic(\u0026quot;TEST\u0026quot;); struct tagbstring test2 = bsStatic(\u0026quot;TEST2\u0026quot;); struct tagbstring test3 = bsStatic(\u0026quot;TSET\u0026quot;); struct tagbstring test4 = bsStatic(\u0026quot;T\u0026quot;); char *test_insert() { node = TSTree_insert(node, bdata(\u0026amp;test1), blength(\u0026amp;test1), valueA); mu_assert(node != NULL, \u0026quot;Failed to insert into tst.\u0026quot;); node = TSTree_insert(node, bdata(\u0026amp;test2), blength(\u0026amp;test2), value2); mu_assert(node != NULL, \u0026quot;Failed to insert into tst with second name.\u0026quot;); node = TSTree_insert(node, bdata(\u0026amp;test3), blength(\u0026amp;test3), reverse); mu_assert(node != NULL, \u0026quot;Failed to insert into tst with reverse name.\u0026quot;); node = TSTree_insert(node, bdata(\u0026amp;test4), blength(\u0026amp;test4), value4); mu_assert(node != NULL, \u0026quot;Failed to insert into tst with second name.\u0026quot;); return NULL; } char *test_search_exact() { // tst returns the last one inserted void *res = TSTree_search(node, bdata(\u0026amp;test1), blength(\u0026amp;test1)); mu_assert(res == valueA, \u0026quot;Got the wrong value back, should get A not B.\u0026quot;); // tst does not find if not exact res = TSTree_search(node, \u0026quot;TESTNO\u0026quot;, strlen(\u0026quot;TESTNO\u0026quot;)); mu_assert(res == NULL, \u0026quot;Should not find anything.\u0026quot;); return NULL; } char *test_search_prefix() { void *res = TSTree_search_prefix( node, bdata(\u0026amp;test1), blength(\u0026amp;test1)); debug(\u0026quot;result: %p, expected: %p\u0026quot;, res, valueA); mu_assert(res == valueA, \u0026quot;Got wrong valueA by prefix.\u0026quot;); res = TSTree_search_prefix(node, bdata(\u0026amp;test1), 1); debug(\u0026quot;result: %p, expected: %p\u0026quot;, res, valueA); mu_assert(res == value4, \u0026quot;Got wrong value4 for prefix of 1.\u0026quot;); res = TSTree_search_prefix(node, \u0026quot;TE\u0026quot;, strlen(\u0026quot;TE\u0026quot;)); mu_assert(res != NULL, \u0026quot;Should find for short prefix.\u0026quot;); res = TSTree_search_prefix(node, \u0026quot;TE--\u0026quot;, strlen(\u0026quot;TE--\u0026quot;)); mu_assert(res != NULL, \u0026quot;Should find for partial prefix.\u0026quot;); return NULL; } void TSTree_traverse_test_cb(void *value, void *data) { assert(value != NULL \u0026amp;\u0026amp; \u0026quot;Should not get NULL value.\u0026quot;); assert(data == valueA \u0026amp;\u0026amp; \u0026quot;Expecting valueA as the data.\u0026quot;); traverse_count++; } char *test_traverse() { traverse_count = 0; TSTree_traverse(node, TSTree_traverse_test_cb, valueA); debug(\u0026quot;traverse count is: %d\u0026quot;, traverse_count); mu_assert(traverse_count == 4, \u0026quot;Didn't find 4 keys.\u0026quot;); return NULL; } char *test_destroy() { TSTree_destroy(node); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_insert); mu_run_test(test_search_exact); mu_run_test(test_search_prefix); mu_run_test(test_traverse); mu_run_test(test_destroy); return NULL; } RUN_TESTS(all_tests);  Similar to a Binary Search Tree, but it has 3 branches per node based on the characters in strings.\nAdvantages\n Find any string comparing at most N characters. Detect missing strings as fast, usually faster. Find all strings that start with, or contain, any substring as fast. Find all similar known strings quickly.  Disadvantages\n Delete is a pain, as in most trees. Uses lots of memory to store keys, so bad for sets of large keys. Kind of weird for most programmers.  Improving It\n You could allow duplicates by using a DArray instead of the value. As I mentioned earlier, deleting is hard, but you could simulate it by setting the values to NULL so that they are effectively gone. There are no ways to collect all of the possible matching values. I\u0026rsquo;ll have you implement that in an extra credit. There are other algorithms that are more complex but have slightly better properties. Take a look at suffix array, suffix tree, and radix tree structures.  Extra Credit\n Implement a TSTree_collect that returns a DArray containing all of the keys that match the given prefix. Implement TSTree_search_suffix and a TSTree_insert_suffix so you can do suffix searches and inserts. Use the debugger to see how this structure is used in memory compared to the BSTree and Hashmap.  Exercise 47 A Fast URL Router The Plan\nUse the TSTree to do something useful:\nRoute URLs\n.\\ex47\\ex47_urls.txt\n/test.tst TestHandler / IndexHandler /test/this/out/index.html PageHandler /index.html PageHandler /and/then/i/have/things/to/test.html PageHandler  Code Review\n.\\ex47\\urlor.c\n#include \u0026lt;lcthw/tstree.h\u0026gt; #include \u0026lt;lcthw/bstrlib.h\u0026gt; TSTree *add_route_data(TSTree * routes, bstring line) { struct bstrList *data = bsplit(line, ' '); check(data-\u0026gt;qty == 2, \u0026quot;Line '%s' does not have 2 columns\u0026quot;, bdata(line)); routes = TSTree_insert(routes, bdata(data-\u0026gt;entry[0]), blength(data-\u0026gt;entry[0]), bstrcpy(data-\u0026gt;entry[1])); bstrListDestroy(data); return routes; error: return NULL; } TSTree *load_routes(const char *file) { TSTree *routes = NULL; bstring line = NULL; FILE *routes_map = NULL; routes_map = fopen(file, \u0026quot;r\u0026quot;); check(routes_map != NULL, \u0026quot;Failed to open routes: %s\u0026quot;, file); while ((line = bgets((bNgetc) fgetc, routes_map, '\\n')) != NULL) { check(btrimws(line) == BSTR_OK, \u0026quot;Failed to trim line.\u0026quot;); routes = add_route_data(routes, line); check(routes != NULL, \u0026quot;Failed to add route.\u0026quot;); bdestroy(line); } fclose(routes_map); return routes; error: if (routes_map) fclose(routes_map); if (line) bdestroy(line); return NULL; } bstring match_url(TSTree * routes, bstring url) { bstring route = TSTree_search(routes, bdata(url), blength(url)); if (route == NULL) { printf(\u0026quot;No exact match found, trying prefix.\\n\u0026quot;); route = TSTree_search_prefix(routes, bdata(url), blength(url)); } return route; } bstring read_line(const char *prompt) { printf(\u0026quot;%s\u0026quot;, prompt); bstring result = bgets((bNgetc) fgetc, stdin, '\\n'); check_debug(result != NULL, \u0026quot;stdin closed.\u0026quot;); check(btrimws(result) == BSTR_OK, \u0026quot;Failed to trim.\u0026quot;); return result; error: return NULL; } void bdestroy_cb(void *value, void *ignored) { (void)ignored; bdestroy((bstring) value); } void destroy_routes(TSTree * routes) { TSTree_traverse(routes, bdestroy_cb, NULL); TSTree_destroy(routes); } int main(int argc, char *argv[]) { bstring url = NULL; bstring route = NULL; TSTree *routes = NULL; check(argc == 2, \u0026quot;USAGE: urlor \u0026lt;urlfile\u0026gt;\u0026quot;); routes = load_routes(argv[1]); check(routes != NULL, \u0026quot;Your route file has an error.\u0026quot;); while (1) { url = read_line(\u0026quot;URL\u0026gt; \u0026quot;); check_debug(url != NULL, \u0026quot;goodbye.\u0026quot;); route = match_url(routes, url); if (route) { printf(\u0026quot;MATCH: %s == %s\\n\u0026quot;, bdata(url), bdata(route)); } else { printf(\u0026quot;FAIL: %s\\n\u0026quot;, bdata(url)); } bdestroy(url); } destroy_routes(routes); return 0; error: destroy_routes(routes); return 1; }  The Analysis\nWatch me play with it and then tell you how it\u0026rsquo;s working.\nImproving It\n Collect all possible matches then choose the longest as winner. Use TSTree to find prefixes, then regex to choose winner.  Extra Credit\n Instead of just storing the string for the handler, create an actual engine that uses a Handler struct to store the application. The structure would store the URL to which it\u0026rsquo;s attached, the name, and anything else you\u0026rsquo;d need to make an actual routing system.  Extra Credit\n Instead of mapping URLs to arbitrary names, map them to .so files and use the dlopen system to load handlers on the fly and call callbacks they contain. Put these callbacks that in your Handler struct, and then you have yourself a fully dynamic callback handler system in C.  Exercise 48a A Simple Network Server: Project Description\nThe Plan\nStart your first long running project:\nstatserve\nThe Purpose\nYou\u0026rsquo;ll get the project started and get a minimum first hack going.\nThe Requirements\n Create a simple network server that accepts a connection on port 7899 from netclient or the nc command, and echoes back anything you type. You\u0026rsquo;ll need to learn how to bind a port, listen on the socket, and answer it. Use your research skills to study how this is done and attempt to implement it yourself.  The Requirements\n The more important part of this project is laying out the project directory from the c-skeleton, and making sure you can build everything and get it working. Don\u0026rsquo;t worry about things like daemons or anything else. Your server just has to run from the command line and keep running.  The Clues\nI will now give you some clues:\n USE liblcthw! Remember you did a client already, you just need to make a server. Do NOT use select! Use fork() for the server. Keep it simple. Don\u0026rsquo;t worry about anything other than accepting a connection and closing. Stay small, build slowly.  Important References\n Research online for \u0026ldquo;echo server in C\u0026rdquo;. Read man (2) pages for accept, bind, listen, connect, select, socket, and shutdown.  Encouragement\nThis will be HARD! Try it your best, and take it piece by piece. You can do it, but remember if you give up the next video (48b) will show you the code to my solution and how to solve it. You can peek there then come back when you\u0026rsquo;re stuck.\nExercise 48b A Simple Network Server: .\\ex48b\\c-skeleton\n.\\ex48b\\c-skeleton\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex48b\\c-skeleton\\src\\libex29.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; int print_a_message(const char *msg) { printf(\u0026quot;A STRING: %s\\n\u0026quot;, msg); return 0; } int uppercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, toupper(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int lowercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, tolower(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int fail_on_purpose(const char *msg) { return 1; }  .\\ex48b\\c-skeleton\\tests\\libex29_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; typedef int (*lib_function) (const char *data); char *lib_file = \u0026quot;build/libYOUR_LIBRARY.so\u0026quot;; void *lib = NULL; int check_function(const char *func_to_run, const char *data, int expected) { lib_function func = dlsym(lib, func_to_run); check(func != NULL, \u0026quot;Did not find %s function in the library %s: %s\u0026quot;, func_to_run, lib_file, dlerror()); int rc = func(data); check(rc == expected, \u0026quot;Function %s return %d for data: %s\u0026quot;, func_to_run, rc, data); return 1; error: return 0; } char *test_dlopen() { lib = dlopen(lib_file, RTLD_NOW); mu_assert(lib != NULL, \u0026quot;Failed to open the library to test.\u0026quot;); return NULL; } char *test_functions() { mu_assert(check_function(\u0026quot;print_a_message\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;print_a_message failed.\u0026quot;); mu_assert(check_function(\u0026quot;uppercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;uppercase failed.\u0026quot;); mu_assert(check_function(\u0026quot;lowercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;lowercase failed.\u0026quot;); return NULL; } char *test_failures() { mu_assert(check_function(\u0026quot;fail_on_purpose\u0026quot;, \u0026quot;Hello\u0026quot;, 1), \u0026quot;fail_on_purpose should fail.\u0026quot;); return NULL; } char *test_dlclose() { int rc = dlclose(lib); mu_assert(rc == 0, \u0026quot;Failed to close lib.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_dlopen); mu_run_test(test_functions); mu_run_test(test_failures); mu_run_test(test_dlclose); return NULL; } RUN_TESTS(all_tests);  .\\ex48b\\statserve\n.\\ex48b\\statserve\\bin\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026quot;net.h\u0026quot; int main(int argc, char *argv[]) { check(argc == 3, \u0026quot;USAGE: statserve host port\u0026quot;); const char *host = argv[1]; const char *port = argv[2]; check(echo_server(host, port), \u0026quot;Failed to run the echo server.\u0026quot;); return 0; error: return 1; }  .\\ex48b\\statserve\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex48b\\statserve\\src\\net.c\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/select.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/uio.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;netdb.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026quot;net.h\u0026quot; struct tagbstring NL = bsStatic(\u0026quot;\\n\u0026quot;); struct tagbstring CRLF = bsStatic(\u0026quot;\\r\\n\u0026quot;); int nonblock(int fd) { int flags = fcntl(fd, F_GETFL, 0); check(flags \u0026gt;= 0, \u0026quot;Invalid flags on nonblock.\u0026quot;); int rc = fcntl(fd, F_SETFL, flags | O_NONBLOCK); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); return 0; error: return -1; } int client_connect(char *host, char *port) { int rc = 0; struct addrinfo *addr = NULL; rc = getaddrinfo(host, port, NULL, \u0026amp;addr); check(rc == 0, \u0026quot;Failed to lookup %s:%s\u0026quot;, host, port); int sock = socket(AF_INET, SOCK_STREAM, 0); check(sock \u0026gt;= 0, \u0026quot;Cannot create a socket.\u0026quot;); rc = connect(sock, addr-\u0026gt;ai_addr, addr-\u0026gt;ai_addrlen); check(rc == 0, \u0026quot;Connect failed.\u0026quot;); rc = nonblock(sock); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); freeaddrinfo(addr); return sock; error: freeaddrinfo(addr); return -1; } int read_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; if (RingBuffer_available_data(buffer) == 0) { buffer-\u0026gt;start = buffer-\u0026gt;end = 0; } if (is_socket) { rc = recv(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer), 0); } else { rc = read(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer)); } check(rc \u0026gt;= 0, \u0026quot;Failed to read from fd: %d\u0026quot;, fd); RingBuffer_commit_write(buffer, rc); return rc; error: return -1; } int write_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; bstring data = RingBuffer_get_all(buffer); check(data != NULL, \u0026quot;Failed to get from the buffer.\u0026quot;); check(bfindreplace(data, \u0026amp;NL, \u0026amp;CRLF, 0) == BSTR_OK, \u0026quot;Failed to replace NL.\u0026quot;); if (is_socket) { rc = send(fd, bdata(data), blength(data), 0); } else { rc = write(fd, bdata(data), blength(data)); } check(rc == blength(data), \u0026quot;Failed to write everything to fd: %d.\u0026quot;, fd); bdestroy(data); return rc; error: return -1; } int attempt_listen(struct addrinfo *info) { int sockfd = -1; // default fail int rc = -1; int yes = 1; check(info != NULL, \u0026quot;Invalid addrinfo.\u0026quot;); // create a socket with the addrinfo sockfd = socket(info-\u0026gt;ai_family, info-\u0026gt;ai_socktype, info-\u0026gt;ai_protocol); check_debug(sockfd != -1, \u0026quot;Failed to bind to address. Trying more.\u0026quot;); // set the SO_REUSEADDR option on the socket rc = setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;yes, sizeof(int)); check_debug(rc == 0, \u0026quot;Failed to set SO_REUSADDR.\u0026quot;); // attempt to bind to it rc = bind(sockfd, info-\u0026gt;ai_addr, info-\u0026gt;ai_addrlen); check_debug(rc == 0, \u0026quot;Failed to find socket.\u0026quot;); // finally listen with a backlog rc = listen(sockfd, BACKLOG); check_debug(rc == 0, \u0026quot;Failed to listen to socket.\u0026quot;); return sockfd; error: return -1; } int server_listen(const char *host, const char *port) { int rc = 0; int sockfd = -1; // default fail value struct addrinfo *info = NULL; struct addrinfo *next_p = NULL; struct addrinfo addr = { .ai_family = AF_UNSPEC, .ai_socktype = SOCK_STREAM, .ai_flags = AI_PASSIVE }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // get the address info for host and port rc = getaddrinfo(NULL, port, \u0026amp;addr, \u0026amp;info); check(rc == 0, \u0026quot;Failed to get address info for connect.\u0026quot;); // cycle through the available list to find one for(next_p = info; next_p != NULL; next_p = next_p-\u0026gt;ai_next) { // attempt to listen to each one sockfd = attempt_listen(next_p); if(sockfd != -1) break; } // either we found one and were able to listen or nothing. check(sockfd != -1, \u0026quot;All possible addresses failed.\u0026quot;); error: //fallthrough if(info) freeaddrinfo(info); // this gets set by the above to either -1 or valid return sockfd; }  .\\ex48b\\statserve\\src\\net.h\n#ifndef _net_h #define _net_h #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #define BACKLOG 10 int nonblock(int fd); int client_connect(char *host, char *port); int read_some(RingBuffer * buffer, int fd, int is_socket); int write_some(RingBuffer * buffer, int fd, int is_socket); int server_listen(const char *host, const char *port); #endif  .\\ex48b\\statserve\\src\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #include \u0026quot;net.h\u0026quot; #include \u0026lt;netdb.h\u0026gt; const int RB_SIZE = 1024 * 10; void handle_sigchild(int sig) { sig = 0; // ignore it while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0) { } } void client_handler(int client_fd) { int rc = 0; // need a ringbuffer for the input RingBuffer *sock_rb = RingBuffer_create(RB_SIZE); // read_some in a loop while(read_some(sock_rb, client_fd, 1) != -1) { // write_it back off the ringbuffer if(write_some(sock_rb, client_fd, 1) == -1) { debug(\u0026quot;Client closed.\u0026quot;); break; } } // close the socket rc = close(client_fd); check(rc != -1, \u0026quot;Failed to close the socket.\u0026quot;); error: // fallthrough if(sock_rb) RingBuffer_destroy(sock_rb); exit(0); // just exit the child process } int echo_server(const char *host, const char *port) { int rc = 0; struct sockaddr_in client_addr; socklen_t sin_size = sizeof(client_addr); int server_socket = 0; int client_fd = 0; struct sigaction sa = { .sa_handler = handle_sigchild, .sa_flags = SA_RESTART | SA_NOCLDSTOP }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // create a sigaction that handles SIGCHLD sigemptyset(\u0026amp;sa.sa_mask); rc = sigaction(SIGCHLD, \u0026amp;sa, 0); check(rc != -1, \u0026quot;Failed to setup signal handler for child processes.\u0026quot;); // listen on the given port and host server_socket = server_listen(host, port); check(server_socket \u0026gt;= 0, \u0026quot;bind to %s:%s failed.\u0026quot;, host, port); while(1) { // accept the connection client_fd = accept(server_socket, (struct sockaddr *)\u0026amp;client_addr, \u0026amp;sin_size); check(client_fd \u0026gt;= 0, \u0026quot;Failed to accept connection.\u0026quot;); debug(\u0026quot;Client connected.\u0026quot;); rc = fork(); if(rc == 0) { // child process close(server_socket); // don't need this // handle the client client_handler(client_fd); } else { // server process close(client_fd); // don't need this } } error: // fallthrough return -1; }  .\\ex48b\\statserve\\src\\statserve.h\n#ifndef _statserve_h #define _statserve_h int echo_server(const char *host, const char *port); #endif  .\\ex48b\\statserve\\tests\\statserve_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; char *test_dummy() { return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_dummy); return NULL; } RUN_TESTS(all_tests);  .\\ex48b\\c-skeleton\n.\\ex48b\\c-skeleton\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex48b\\c-skeleton\\src\\libex29.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; int print_a_message(const char *msg) { printf(\u0026quot;A STRING: %s\\n\u0026quot;, msg); return 0; } int uppercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, toupper(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int lowercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, tolower(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int fail_on_purpose(const char *msg) { return 1; }  .\\ex48b\\c-skeleton\\tests\\libex29_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; typedef int (*lib_function) (const char *data); char *lib_file = \u0026quot;build/libYOUR_LIBRARY.so\u0026quot;; void *lib = NULL; int check_function(const char *func_to_run, const char *data, int expected) { lib_function func = dlsym(lib, func_to_run); check(func != NULL, \u0026quot;Did not find %s function in the library %s: %s\u0026quot;, func_to_run, lib_file, dlerror()); int rc = func(data); check(rc == expected, \u0026quot;Function %s return %d for data: %s\u0026quot;, func_to_run, rc, data); return 1; error: return 0; } char *test_dlopen() { lib = dlopen(lib_file, RTLD_NOW); mu_assert(lib != NULL, \u0026quot;Failed to open the library to test.\u0026quot;); return NULL; } char *test_functions() { mu_assert(check_function(\u0026quot;print_a_message\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;print_a_message failed.\u0026quot;); mu_assert(check_function(\u0026quot;uppercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;uppercase failed.\u0026quot;); mu_assert(check_function(\u0026quot;lowercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;lowercase failed.\u0026quot;); return NULL; } char *test_failures() { mu_assert(check_function(\u0026quot;fail_on_purpose\u0026quot;, \u0026quot;Hello\u0026quot;, 1), \u0026quot;fail_on_purpose should fail.\u0026quot;); return NULL; } char *test_dlclose() { int rc = dlclose(lib); mu_assert(rc == 0, \u0026quot;Failed to close lib.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_dlopen); mu_run_test(test_functions); mu_run_test(test_failures); mu_run_test(test_dlclose); return NULL; } RUN_TESTS(all_tests);  .\\ex48b\\statserve\n.\\ex48b\\statserve\\bin\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026quot;net.h\u0026quot; int main(int argc, char *argv[]) { check(argc == 3, \u0026quot;USAGE: statserve host port\u0026quot;); const char *host = argv[1]; const char *port = argv[2]; check(echo_server(host, port), \u0026quot;Failed to run the echo server.\u0026quot;); return 0; error: return 1; }  .\\ex48b\\statserve\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex48b\\statserve\\src\\net.c\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/select.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/uio.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;netdb.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026quot;net.h\u0026quot; struct tagbstring NL = bsStatic(\u0026quot;\\n\u0026quot;); struct tagbstring CRLF = bsStatic(\u0026quot;\\r\\n\u0026quot;); int nonblock(int fd) { int flags = fcntl(fd, F_GETFL, 0); check(flags \u0026gt;= 0, \u0026quot;Invalid flags on nonblock.\u0026quot;); int rc = fcntl(fd, F_SETFL, flags | O_NONBLOCK); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); return 0; error: return -1; } int client_connect(char *host, char *port) { int rc = 0; struct addrinfo *addr = NULL; rc = getaddrinfo(host, port, NULL, \u0026amp;addr); check(rc == 0, \u0026quot;Failed to lookup %s:%s\u0026quot;, host, port); int sock = socket(AF_INET, SOCK_STREAM, 0); check(sock \u0026gt;= 0, \u0026quot;Cannot create a socket.\u0026quot;); rc = connect(sock, addr-\u0026gt;ai_addr, addr-\u0026gt;ai_addrlen); check(rc == 0, \u0026quot;Connect failed.\u0026quot;); rc = nonblock(sock); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); freeaddrinfo(addr); return sock; error: freeaddrinfo(addr); return -1; } int read_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; if (RingBuffer_available_data(buffer) == 0) { buffer-\u0026gt;start = buffer-\u0026gt;end = 0; } if (is_socket) { rc = recv(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer), 0); } else { rc = read(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer)); } check(rc \u0026gt;= 0, \u0026quot;Failed to read from fd: %d\u0026quot;, fd); RingBuffer_commit_write(buffer, rc); return rc; error: return -1; } int write_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; bstring data = RingBuffer_get_all(buffer); check(data != NULL, \u0026quot;Failed to get from the buffer.\u0026quot;); check(bfindreplace(data, \u0026amp;NL, \u0026amp;CRLF, 0) == BSTR_OK, \u0026quot;Failed to replace NL.\u0026quot;); if (is_socket) { rc = send(fd, bdata(data), blength(data), 0); } else { rc = write(fd, bdata(data), blength(data)); } check(rc == blength(data), \u0026quot;Failed to write everything to fd: %d.\u0026quot;, fd); bdestroy(data); return rc; error: return -1; } int attempt_listen(struct addrinfo *info) { int sockfd = -1; // default fail int rc = -1; int yes = 1; check(info != NULL, \u0026quot;Invalid addrinfo.\u0026quot;); // create a socket with the addrinfo sockfd = socket(info-\u0026gt;ai_family, info-\u0026gt;ai_socktype, info-\u0026gt;ai_protocol); check_debug(sockfd != -1, \u0026quot;Failed to bind to address. Trying more.\u0026quot;); // set the SO_REUSEADDR option on the socket rc = setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;yes, sizeof(int)); check_debug(rc == 0, \u0026quot;Failed to set SO_REUSADDR.\u0026quot;); // attempt to bind to it rc = bind(sockfd, info-\u0026gt;ai_addr, info-\u0026gt;ai_addrlen); check_debug(rc == 0, \u0026quot;Failed to find socket.\u0026quot;); // finally listen with a backlog rc = listen(sockfd, BACKLOG); check_debug(rc == 0, \u0026quot;Failed to listen to socket.\u0026quot;); return sockfd; error: return -1; } int server_listen(const char *host, const char *port) { int rc = 0; int sockfd = -1; // default fail value struct addrinfo *info = NULL; struct addrinfo *next_p = NULL; struct addrinfo addr = { .ai_family = AF_UNSPEC, .ai_socktype = SOCK_STREAM, .ai_flags = AI_PASSIVE }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // get the address info for host and port rc = getaddrinfo(NULL, port, \u0026amp;addr, \u0026amp;info); check(rc == 0, \u0026quot;Failed to get address info for connect.\u0026quot;); // cycle through the available list to find one for(next_p = info; next_p != NULL; next_p = next_p-\u0026gt;ai_next) { // attempt to listen to each one sockfd = attempt_listen(next_p); if(sockfd != -1) break; } // either we found one and were able to listen or nothing. check(sockfd != -1, \u0026quot;All possible addresses failed.\u0026quot;); error: //fallthrough if(info) freeaddrinfo(info); // this gets set by the above to either -1 or valid return sockfd; }  .\\ex48b\\statserve\\src\\net.h\n#ifndef _net_h #define _net_h #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #define BACKLOG 10 int nonblock(int fd); int client_connect(char *host, char *port); int read_some(RingBuffer * buffer, int fd, int is_socket); int write_some(RingBuffer * buffer, int fd, int is_socket); int server_listen(const char *host, const char *port); #endif  .\\ex48b\\statserve\\src\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #include \u0026quot;net.h\u0026quot; #include \u0026lt;netdb.h\u0026gt; const int RB_SIZE = 1024 * 10; void handle_sigchild(int sig) { sig = 0; // ignore it while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0) { } } void client_handler(int client_fd) { int rc = 0; // need a ringbuffer for the input RingBuffer *sock_rb = RingBuffer_create(RB_SIZE); // read_some in a loop while(read_some(sock_rb, client_fd, 1) != -1) { // write_it back off the ringbuffer if(write_some(sock_rb, client_fd, 1) == -1) { debug(\u0026quot;Client closed.\u0026quot;); break; } } // close the socket rc = close(client_fd); check(rc != -1, \u0026quot;Failed to close the socket.\u0026quot;); error: // fallthrough if(sock_rb) RingBuffer_destroy(sock_rb); exit(0); // just exit the child process } int echo_server(const char *host, const char *port) { int rc = 0; struct sockaddr_in client_addr; socklen_t sin_size = sizeof(client_addr); int server_socket = 0; int client_fd = 0; struct sigaction sa = { .sa_handler = handle_sigchild, .sa_flags = SA_RESTART | SA_NOCLDSTOP }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // create a sigaction that handles SIGCHLD sigemptyset(\u0026amp;sa.sa_mask); rc = sigaction(SIGCHLD, \u0026amp;sa, 0); check(rc != -1, \u0026quot;Failed to setup signal handler for child processes.\u0026quot;); // listen on the given port and host server_socket = server_listen(host, port); check(server_socket \u0026gt;= 0, \u0026quot;bind to %s:%s failed.\u0026quot;, host, port); while(1) { // accept the connection client_fd = accept(server_socket, (struct sockaddr *)\u0026amp;client_addr, \u0026amp;sin_size); check(client_fd \u0026gt;= 0, \u0026quot;Failed to accept connection.\u0026quot;); debug(\u0026quot;Client connected.\u0026quot;); rc = fork(); if(rc == 0) { // child process close(server_socket); // don't need this // handle the client client_handler(client_fd); } else { // server process close(client_fd); // don't need this } } error: // fallthrough return -1; }  .\\ex48b\\statserve\\src\\statserve.h\n#ifndef _statserve_h #define _statserve_h int echo_server(const char *host, const char *port); #endif  .\\ex48b\\statserve\\tests\\statserve_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; char *test_dummy() { return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_dummy); return NULL; } RUN_TESTS(all_tests);  Solution\nThe Plan\nShow you how I solved the statserve project.\nThe Purpose\nWatch me solve the first project quickly, then review the code.\nThe Setup\nFirst I need to install liblcthw since I\u0026rsquo;ll be using that.\nThen I make the project skeleton and get something, anything going.\nThe Server\nThen I just get it accepting a connection.\nThe Echo\nThen I decided to just make it echo back what I type.\nThe Final Code\n"
},
{
	"uri": "/coding/c/lcthw-lectures.4/",
	"title": "C Lecture - 4",
	"tags": ["c"],
	"description": "Exercise 48 ~ 51",
	"content": " Author: Zed A. Shaw\nAll content comes from Zed\u0026rsquo;s Lecture Repository and Libraries Repository. All credit goes to Zed.\nExercise 48a A Simple Network Server: Project Description\nThe Plan\nStart your first long running project:\nstatserve\nThe Purpose\nYou\u0026rsquo;ll get the project started and get a minimum first hack going.\nThe Requirements\n Create a simple network server that accepts a connection on port 7899 from netclient or the nc command, and echoes back anything you type. You\u0026rsquo;ll need to learn how to bind a port, listen on the socket, and answer it. Use your research skills to study how this is done and attempt to implement it yourself.  The Requirements\n The more important part of this project is laying out the project directory from the c-skeleton, and making sure you can build everything and get it working. Don\u0026rsquo;t worry about things like daemons or anything else. Your server just has to run from the command line and keep running.  The Clues\nI will now give you some clues:\n USE liblcthw! Remember you did a client already, you just need to make a server. Do NOT use select! Use fork() for the server. Keep it simple. Don\u0026rsquo;t worry about anything other than accepting a connection and closing. Stay small, build slowly.  Important References\n Research online for \u0026ldquo;echo server in C\u0026rdquo;. Read man (2) pages for accept, bind, listen, connect, select, socket, and shutdown.  Encouragement\nThis will be HARD! Try it your best, and take it piece by piece. You can do it, but remember if you give up the next video (48b) will show you the code to my solution and how to solve it. You can peek there then come back when you\u0026rsquo;re stuck.\nExercise 48b A Simple Network Server: .\\ex48b\\c-skeleton\n.\\ex48b\\c-skeleton\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex48b\\c-skeleton\\src\\libex29.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; int print_a_message(const char *msg) { printf(\u0026quot;A STRING: %s\\n\u0026quot;, msg); return 0; } int uppercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, toupper(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int lowercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, tolower(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int fail_on_purpose(const char *msg) { return 1; }  .\\ex48b\\c-skeleton\\tests\\libex29_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; typedef int (*lib_function) (const char *data); char *lib_file = \u0026quot;build/libYOUR_LIBRARY.so\u0026quot;; void *lib = NULL; int check_function(const char *func_to_run, const char *data, int expected) { lib_function func = dlsym(lib, func_to_run); check(func != NULL, \u0026quot;Did not find %s function in the library %s: %s\u0026quot;, func_to_run, lib_file, dlerror()); int rc = func(data); check(rc == expected, \u0026quot;Function %s return %d for data: %s\u0026quot;, func_to_run, rc, data); return 1; error: return 0; } char *test_dlopen() { lib = dlopen(lib_file, RTLD_NOW); mu_assert(lib != NULL, \u0026quot;Failed to open the library to test.\u0026quot;); return NULL; } char *test_functions() { mu_assert(check_function(\u0026quot;print_a_message\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;print_a_message failed.\u0026quot;); mu_assert(check_function(\u0026quot;uppercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;uppercase failed.\u0026quot;); mu_assert(check_function(\u0026quot;lowercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;lowercase failed.\u0026quot;); return NULL; } char *test_failures() { mu_assert(check_function(\u0026quot;fail_on_purpose\u0026quot;, \u0026quot;Hello\u0026quot;, 1), \u0026quot;fail_on_purpose should fail.\u0026quot;); return NULL; } char *test_dlclose() { int rc = dlclose(lib); mu_assert(rc == 0, \u0026quot;Failed to close lib.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_dlopen); mu_run_test(test_functions); mu_run_test(test_failures); mu_run_test(test_dlclose); return NULL; } RUN_TESTS(all_tests);  .\\ex48b\\statserve\n.\\ex48b\\statserve\\bin\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026quot;net.h\u0026quot; int main(int argc, char *argv[]) { check(argc == 3, \u0026quot;USAGE: statserve host port\u0026quot;); const char *host = argv[1]; const char *port = argv[2]; check(echo_server(host, port), \u0026quot;Failed to run the echo server.\u0026quot;); return 0; error: return 1; }  .\\ex48b\\statserve\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex48b\\statserve\\src\\net.c\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/select.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/uio.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;netdb.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026quot;net.h\u0026quot; struct tagbstring NL = bsStatic(\u0026quot;\\n\u0026quot;); struct tagbstring CRLF = bsStatic(\u0026quot;\\r\\n\u0026quot;); int nonblock(int fd) { int flags = fcntl(fd, F_GETFL, 0); check(flags \u0026gt;= 0, \u0026quot;Invalid flags on nonblock.\u0026quot;); int rc = fcntl(fd, F_SETFL, flags | O_NONBLOCK); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); return 0; error: return -1; } int client_connect(char *host, char *port) { int rc = 0; struct addrinfo *addr = NULL; rc = getaddrinfo(host, port, NULL, \u0026amp;addr); check(rc == 0, \u0026quot;Failed to lookup %s:%s\u0026quot;, host, port); int sock = socket(AF_INET, SOCK_STREAM, 0); check(sock \u0026gt;= 0, \u0026quot;Cannot create a socket.\u0026quot;); rc = connect(sock, addr-\u0026gt;ai_addr, addr-\u0026gt;ai_addrlen); check(rc == 0, \u0026quot;Connect failed.\u0026quot;); rc = nonblock(sock); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); freeaddrinfo(addr); return sock; error: freeaddrinfo(addr); return -1; } int read_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; if (RingBuffer_available_data(buffer) == 0) { buffer-\u0026gt;start = buffer-\u0026gt;end = 0; } if (is_socket) { rc = recv(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer), 0); } else { rc = read(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer)); } check(rc \u0026gt;= 0, \u0026quot;Failed to read from fd: %d\u0026quot;, fd); RingBuffer_commit_write(buffer, rc); return rc; error: return -1; } int write_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; bstring data = RingBuffer_get_all(buffer); check(data != NULL, \u0026quot;Failed to get from the buffer.\u0026quot;); check(bfindreplace(data, \u0026amp;NL, \u0026amp;CRLF, 0) == BSTR_OK, \u0026quot;Failed to replace NL.\u0026quot;); if (is_socket) { rc = send(fd, bdata(data), blength(data), 0); } else { rc = write(fd, bdata(data), blength(data)); } check(rc == blength(data), \u0026quot;Failed to write everything to fd: %d.\u0026quot;, fd); bdestroy(data); return rc; error: return -1; } int attempt_listen(struct addrinfo *info) { int sockfd = -1; // default fail int rc = -1; int yes = 1; check(info != NULL, \u0026quot;Invalid addrinfo.\u0026quot;); // create a socket with the addrinfo sockfd = socket(info-\u0026gt;ai_family, info-\u0026gt;ai_socktype, info-\u0026gt;ai_protocol); check_debug(sockfd != -1, \u0026quot;Failed to bind to address. Trying more.\u0026quot;); // set the SO_REUSEADDR option on the socket rc = setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;yes, sizeof(int)); check_debug(rc == 0, \u0026quot;Failed to set SO_REUSADDR.\u0026quot;); // attempt to bind to it rc = bind(sockfd, info-\u0026gt;ai_addr, info-\u0026gt;ai_addrlen); check_debug(rc == 0, \u0026quot;Failed to find socket.\u0026quot;); // finally listen with a backlog rc = listen(sockfd, BACKLOG); check_debug(rc == 0, \u0026quot;Failed to listen to socket.\u0026quot;); return sockfd; error: return -1; } int server_listen(const char *host, const char *port) { int rc = 0; int sockfd = -1; // default fail value struct addrinfo *info = NULL; struct addrinfo *next_p = NULL; struct addrinfo addr = { .ai_family = AF_UNSPEC, .ai_socktype = SOCK_STREAM, .ai_flags = AI_PASSIVE }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // get the address info for host and port rc = getaddrinfo(NULL, port, \u0026amp;addr, \u0026amp;info); check(rc == 0, \u0026quot;Failed to get address info for connect.\u0026quot;); // cycle through the available list to find one for(next_p = info; next_p != NULL; next_p = next_p-\u0026gt;ai_next) { // attempt to listen to each one sockfd = attempt_listen(next_p); if(sockfd != -1) break; } // either we found one and were able to listen or nothing. check(sockfd != -1, \u0026quot;All possible addresses failed.\u0026quot;); error: //fallthrough if(info) freeaddrinfo(info); // this gets set by the above to either -1 or valid return sockfd; }  .\\ex48b\\statserve\\src\\net.h\n#ifndef _net_h #define _net_h #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #define BACKLOG 10 int nonblock(int fd); int client_connect(char *host, char *port); int read_some(RingBuffer * buffer, int fd, int is_socket); int write_some(RingBuffer * buffer, int fd, int is_socket); int server_listen(const char *host, const char *port); #endif  .\\ex48b\\statserve\\src\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #include \u0026quot;net.h\u0026quot; #include \u0026lt;netdb.h\u0026gt; const int RB_SIZE = 1024 * 10; void handle_sigchild(int sig) { sig = 0; // ignore it while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0) { } } void client_handler(int client_fd) { int rc = 0; // need a ringbuffer for the input RingBuffer *sock_rb = RingBuffer_create(RB_SIZE); // read_some in a loop while(read_some(sock_rb, client_fd, 1) != -1) { // write_it back off the ringbuffer if(write_some(sock_rb, client_fd, 1) == -1) { debug(\u0026quot;Client closed.\u0026quot;); break; } } // close the socket rc = close(client_fd); check(rc != -1, \u0026quot;Failed to close the socket.\u0026quot;); error: // fallthrough if(sock_rb) RingBuffer_destroy(sock_rb); exit(0); // just exit the child process } int echo_server(const char *host, const char *port) { int rc = 0; struct sockaddr_in client_addr; socklen_t sin_size = sizeof(client_addr); int server_socket = 0; int client_fd = 0; struct sigaction sa = { .sa_handler = handle_sigchild, .sa_flags = SA_RESTART | SA_NOCLDSTOP }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // create a sigaction that handles SIGCHLD sigemptyset(\u0026amp;sa.sa_mask); rc = sigaction(SIGCHLD, \u0026amp;sa, 0); check(rc != -1, \u0026quot;Failed to setup signal handler for child processes.\u0026quot;); // listen on the given port and host server_socket = server_listen(host, port); check(server_socket \u0026gt;= 0, \u0026quot;bind to %s:%s failed.\u0026quot;, host, port); while(1) { // accept the connection client_fd = accept(server_socket, (struct sockaddr *)\u0026amp;client_addr, \u0026amp;sin_size); check(client_fd \u0026gt;= 0, \u0026quot;Failed to accept connection.\u0026quot;); debug(\u0026quot;Client connected.\u0026quot;); rc = fork(); if(rc == 0) { // child process close(server_socket); // don't need this // handle the client client_handler(client_fd); } else { // server process close(client_fd); // don't need this } } error: // fallthrough return -1; }  .\\ex48b\\statserve\\src\\statserve.h\n#ifndef _statserve_h #define _statserve_h int echo_server(const char *host, const char *port); #endif  .\\ex48b\\statserve\\tests\\statserve_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; char *test_dummy() { return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_dummy); return NULL; } RUN_TESTS(all_tests);  .\\ex48b\\c-skeleton\n.\\ex48b\\c-skeleton\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex48b\\c-skeleton\\src\\libex29.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026quot;dbg.h\u0026quot; int print_a_message(const char *msg) { printf(\u0026quot;A STRING: %s\\n\u0026quot;, msg); return 0; } int uppercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, toupper(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int lowercase(const char *msg) { int i = 0; // BUG: \\0 termination problems for(i = 0; msg[i] != '\\0'; i++) { printf(\u0026quot;%c\u0026quot;, tolower(msg[i])); } printf(\u0026quot;\\n\u0026quot;); return 0; } int fail_on_purpose(const char *msg) { return 1; }  .\\ex48b\\c-skeleton\\tests\\libex29_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; typedef int (*lib_function) (const char *data); char *lib_file = \u0026quot;build/libYOUR_LIBRARY.so\u0026quot;; void *lib = NULL; int check_function(const char *func_to_run, const char *data, int expected) { lib_function func = dlsym(lib, func_to_run); check(func != NULL, \u0026quot;Did not find %s function in the library %s: %s\u0026quot;, func_to_run, lib_file, dlerror()); int rc = func(data); check(rc == expected, \u0026quot;Function %s return %d for data: %s\u0026quot;, func_to_run, rc, data); return 1; error: return 0; } char *test_dlopen() { lib = dlopen(lib_file, RTLD_NOW); mu_assert(lib != NULL, \u0026quot;Failed to open the library to test.\u0026quot;); return NULL; } char *test_functions() { mu_assert(check_function(\u0026quot;print_a_message\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;print_a_message failed.\u0026quot;); mu_assert(check_function(\u0026quot;uppercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;uppercase failed.\u0026quot;); mu_assert(check_function(\u0026quot;lowercase\u0026quot;, \u0026quot;Hello\u0026quot;, 0), \u0026quot;lowercase failed.\u0026quot;); return NULL; } char *test_failures() { mu_assert(check_function(\u0026quot;fail_on_purpose\u0026quot;, \u0026quot;Hello\u0026quot;, 1), \u0026quot;fail_on_purpose should fail.\u0026quot;); return NULL; } char *test_dlclose() { int rc = dlclose(lib); mu_assert(rc == 0, \u0026quot;Failed to close lib.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_dlopen); mu_run_test(test_functions); mu_run_test(test_failures); mu_run_test(test_dlclose); return NULL; } RUN_TESTS(all_tests);  .\\ex48b\\statserve\n.\\ex48b\\statserve\\bin\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026quot;net.h\u0026quot; int main(int argc, char *argv[]) { check(argc == 3, \u0026quot;USAGE: statserve host port\u0026quot;); const char *host = argv[1]; const char *port = argv[2]; check(echo_server(host, port), \u0026quot;Failed to run the echo server.\u0026quot;); return 0; error: return 1; }  .\\ex48b\\statserve\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex48b\\statserve\\src\\net.c\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/select.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/uio.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;netdb.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026quot;net.h\u0026quot; struct tagbstring NL = bsStatic(\u0026quot;\\n\u0026quot;); struct tagbstring CRLF = bsStatic(\u0026quot;\\r\\n\u0026quot;); int nonblock(int fd) { int flags = fcntl(fd, F_GETFL, 0); check(flags \u0026gt;= 0, \u0026quot;Invalid flags on nonblock.\u0026quot;); int rc = fcntl(fd, F_SETFL, flags | O_NONBLOCK); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); return 0; error: return -1; } int client_connect(char *host, char *port) { int rc = 0; struct addrinfo *addr = NULL; rc = getaddrinfo(host, port, NULL, \u0026amp;addr); check(rc == 0, \u0026quot;Failed to lookup %s:%s\u0026quot;, host, port); int sock = socket(AF_INET, SOCK_STREAM, 0); check(sock \u0026gt;= 0, \u0026quot;Cannot create a socket.\u0026quot;); rc = connect(sock, addr-\u0026gt;ai_addr, addr-\u0026gt;ai_addrlen); check(rc == 0, \u0026quot;Connect failed.\u0026quot;); rc = nonblock(sock); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); freeaddrinfo(addr); return sock; error: freeaddrinfo(addr); return -1; } int read_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; if (RingBuffer_available_data(buffer) == 0) { buffer-\u0026gt;start = buffer-\u0026gt;end = 0; } if (is_socket) { rc = recv(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer), 0); } else { rc = read(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer)); } check(rc \u0026gt;= 0, \u0026quot;Failed to read from fd: %d\u0026quot;, fd); RingBuffer_commit_write(buffer, rc); return rc; error: return -1; } int write_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; bstring data = RingBuffer_get_all(buffer); check(data != NULL, \u0026quot;Failed to get from the buffer.\u0026quot;); check(bfindreplace(data, \u0026amp;NL, \u0026amp;CRLF, 0) == BSTR_OK, \u0026quot;Failed to replace NL.\u0026quot;); if (is_socket) { rc = send(fd, bdata(data), blength(data), 0); } else { rc = write(fd, bdata(data), blength(data)); } check(rc == blength(data), \u0026quot;Failed to write everything to fd: %d.\u0026quot;, fd); bdestroy(data); return rc; error: return -1; } int attempt_listen(struct addrinfo *info) { int sockfd = -1; // default fail int rc = -1; int yes = 1; check(info != NULL, \u0026quot;Invalid addrinfo.\u0026quot;); // create a socket with the addrinfo sockfd = socket(info-\u0026gt;ai_family, info-\u0026gt;ai_socktype, info-\u0026gt;ai_protocol); check_debug(sockfd != -1, \u0026quot;Failed to bind to address. Trying more.\u0026quot;); // set the SO_REUSEADDR option on the socket rc = setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;yes, sizeof(int)); check_debug(rc == 0, \u0026quot;Failed to set SO_REUSADDR.\u0026quot;); // attempt to bind to it rc = bind(sockfd, info-\u0026gt;ai_addr, info-\u0026gt;ai_addrlen); check_debug(rc == 0, \u0026quot;Failed to find socket.\u0026quot;); // finally listen with a backlog rc = listen(sockfd, BACKLOG); check_debug(rc == 0, \u0026quot;Failed to listen to socket.\u0026quot;); return sockfd; error: return -1; } int server_listen(const char *host, const char *port) { int rc = 0; int sockfd = -1; // default fail value struct addrinfo *info = NULL; struct addrinfo *next_p = NULL; struct addrinfo addr = { .ai_family = AF_UNSPEC, .ai_socktype = SOCK_STREAM, .ai_flags = AI_PASSIVE }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // get the address info for host and port rc = getaddrinfo(NULL, port, \u0026amp;addr, \u0026amp;info); check(rc == 0, \u0026quot;Failed to get address info for connect.\u0026quot;); // cycle through the available list to find one for(next_p = info; next_p != NULL; next_p = next_p-\u0026gt;ai_next) { // attempt to listen to each one sockfd = attempt_listen(next_p); if(sockfd != -1) break; } // either we found one and were able to listen or nothing. check(sockfd != -1, \u0026quot;All possible addresses failed.\u0026quot;); error: //fallthrough if(info) freeaddrinfo(info); // this gets set by the above to either -1 or valid return sockfd; }  .\\ex48b\\statserve\\src\\net.h\n#ifndef _net_h #define _net_h #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #define BACKLOG 10 int nonblock(int fd); int client_connect(char *host, char *port); int read_some(RingBuffer * buffer, int fd, int is_socket); int write_some(RingBuffer * buffer, int fd, int is_socket); int server_listen(const char *host, const char *port); #endif  .\\ex48b\\statserve\\src\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #include \u0026quot;net.h\u0026quot; #include \u0026lt;netdb.h\u0026gt; const int RB_SIZE = 1024 * 10; void handle_sigchild(int sig) { sig = 0; // ignore it while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0) { } } void client_handler(int client_fd) { int rc = 0; // need a ringbuffer for the input RingBuffer *sock_rb = RingBuffer_create(RB_SIZE); // read_some in a loop while(read_some(sock_rb, client_fd, 1) != -1) { // write_it back off the ringbuffer if(write_some(sock_rb, client_fd, 1) == -1) { debug(\u0026quot;Client closed.\u0026quot;); break; } } // close the socket rc = close(client_fd); check(rc != -1, \u0026quot;Failed to close the socket.\u0026quot;); error: // fallthrough if(sock_rb) RingBuffer_destroy(sock_rb); exit(0); // just exit the child process } int echo_server(const char *host, const char *port) { int rc = 0; struct sockaddr_in client_addr; socklen_t sin_size = sizeof(client_addr); int server_socket = 0; int client_fd = 0; struct sigaction sa = { .sa_handler = handle_sigchild, .sa_flags = SA_RESTART | SA_NOCLDSTOP }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // create a sigaction that handles SIGCHLD sigemptyset(\u0026amp;sa.sa_mask); rc = sigaction(SIGCHLD, \u0026amp;sa, 0); check(rc != -1, \u0026quot;Failed to setup signal handler for child processes.\u0026quot;); // listen on the given port and host server_socket = server_listen(host, port); check(server_socket \u0026gt;= 0, \u0026quot;bind to %s:%s failed.\u0026quot;, host, port); while(1) { // accept the connection client_fd = accept(server_socket, (struct sockaddr *)\u0026amp;client_addr, \u0026amp;sin_size); check(client_fd \u0026gt;= 0, \u0026quot;Failed to accept connection.\u0026quot;); debug(\u0026quot;Client connected.\u0026quot;); rc = fork(); if(rc == 0) { // child process close(server_socket); // don't need this // handle the client client_handler(client_fd); } else { // server process close(client_fd); // don't need this } } error: // fallthrough return -1; }  .\\ex48b\\statserve\\src\\statserve.h\n#ifndef _statserve_h #define _statserve_h int echo_server(const char *host, const char *port); #endif  .\\ex48b\\statserve\\tests\\statserve_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; char *test_dummy() { return NULL; } char *all_tests() { mu_suite_start(); mu_run_test(test_dummy); return NULL; } RUN_TESTS(all_tests);  Solution\nThe Plan\nShow you how I solved the statserve project.\nThe Purpose\nWatch me solve the first project quickly, then review the code.\nThe Setup\nFirst I need to install liblcthw since I\u0026rsquo;ll be using that.\nThen I make the project skeleton and get something, anything going.\nThe Server\nThen I just get it accepting a connection.\nThe Echo\nThen I decided to just make it echo back what I type.\nThe Final Code\nExercise 49a A Statistics Server Project Description\nThe Plan\nMake the statsserver do something using a simple protocol.\nThe Purpose\nLearn the first steps in creating a server that answers a protocol.\nThe Requirements\nCreate this protocol:\ncreate Create a new statistic. mean Get the current mean of a statistic. sample Add a new sample to a statistics. dump Get all of the elements of a statistic (sum, sumsq, n, min, and max).  The Requirements\n You\u0026rsquo;ll need to allow people to name these statistics, which means using one of the map style data structures to map names to Stats structs. You\u0026rsquo;ll need to add the CRUD standard operations for each name. CRUD stands for create read update delete. Currently, the list of commands above has create, mean, and dump for reading; and sample for updating. You need a delete command now. Make the protocol strict! Abort any client that makes any mistakes in protocols.  Strict Protocol\nOnce again, in case you missed it, be ruthless!\nAbort all deviant clients.\nPause!\nI\u0026rsquo;m going to give you clues to solve this, so if you want to try on your own pause now!\nThe Clues\n Create the data structures first for holding the information for each of these commands. Then write a protocol parser to handle it and fill in the data. Then pass that data to a function that knows how to do that command. You can just store the stats in a Hashmap, BSTree, or TSTree for now. KEEP IT SIMPLE!  Important References\n You\u0026rsquo;ll want to refer to the bstring documentation as much as possible to know what functions to use.  Encouragement\n Remember that this is supposed to be hard. You are supposed to struggle with this. This could take you a while, but keep up the struggle, do it bit by bit, and test little pieces as you go. Automate your tests!  Exercise 49b A Statistics Server: .\\ex49b\\statserve\n.\\ex49b\\statserve\\bin\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026quot;net.h\u0026quot; int main(int argc, char *argv[]) { check(argc == 3, \u0026quot;USAGE: statserve host port\u0026quot;); const char *host = argv[1]; const char *port = argv[2]; check(echo_server(host, port), \u0026quot;Failed to run the echo server.\u0026quot;); return 0; error: return 1; }  .\\ex49b\\statserve\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex49b\\statserve\\src\\net.c\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/select.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/uio.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;netdb.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026quot;net.h\u0026quot; struct tagbstring NL = bsStatic(\u0026quot;\\n\u0026quot;); struct tagbstring CRLF = bsStatic(\u0026quot;\\r\\n\u0026quot;); int nonblock(int fd) { int flags = fcntl(fd, F_GETFL, 0); check(flags \u0026gt;= 0, \u0026quot;Invalid flags on nonblock.\u0026quot;); int rc = fcntl(fd, F_SETFL, flags | O_NONBLOCK); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); return 0; error: return -1; } int client_connect(char *host, char *port) { int rc = 0; struct addrinfo *addr = NULL; rc = getaddrinfo(host, port, NULL, \u0026amp;addr); check(rc == 0, \u0026quot;Failed to lookup %s:%s\u0026quot;, host, port); int sock = socket(AF_INET, SOCK_STREAM, 0); check(sock \u0026gt;= 0, \u0026quot;Cannot create a socket.\u0026quot;); rc = connect(sock, addr-\u0026gt;ai_addr, addr-\u0026gt;ai_addrlen); check(rc == 0, \u0026quot;Connect failed.\u0026quot;); rc = nonblock(sock); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); freeaddrinfo(addr); return sock; error: freeaddrinfo(addr); return -1; } int read_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; if (RingBuffer_available_data(buffer) == 0) { buffer-\u0026gt;start = buffer-\u0026gt;end = 0; } if (is_socket) { rc = recv(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer), 0); } else { rc = read(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer)); } check(rc \u0026gt;= 0, \u0026quot;Failed to read from fd: %d\u0026quot;, fd); RingBuffer_commit_write(buffer, rc); return rc; error: return -1; } int write_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; bstring data = RingBuffer_get_all(buffer); check(data != NULL, \u0026quot;Failed to get from the buffer.\u0026quot;); check(bfindreplace(data, \u0026amp;NL, \u0026amp;CRLF, 0) == BSTR_OK, \u0026quot;Failed to replace NL.\u0026quot;); if (is_socket) { rc = send(fd, bdata(data), blength(data), 0); } else { rc = write(fd, bdata(data), blength(data)); } check(rc == blength(data), \u0026quot;Failed to write everything to fd: %d.\u0026quot;, fd); bdestroy(data); return rc; error: return -1; } int attempt_listen(struct addrinfo *info) { int sockfd = -1; // default fail int rc = -1; int yes = 1; check(info != NULL, \u0026quot;Invalid addrinfo.\u0026quot;); // create a socket with the addrinfo sockfd = socket(info-\u0026gt;ai_family, info-\u0026gt;ai_socktype, info-\u0026gt;ai_protocol); check_debug(sockfd != -1, \u0026quot;Failed to bind to address. Trying more.\u0026quot;); // set the SO_REUSEADDR option on the socket rc = setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;yes, sizeof(int)); check_debug(rc == 0, \u0026quot;Failed to set SO_REUSADDR.\u0026quot;); // attempt to bind to it rc = bind(sockfd, info-\u0026gt;ai_addr, info-\u0026gt;ai_addrlen); check_debug(rc == 0, \u0026quot;Failed to find socket.\u0026quot;); // finally listen with a backlog rc = listen(sockfd, BACKLOG); check_debug(rc == 0, \u0026quot;Failed to listen to socket.\u0026quot;); return sockfd; error: return -1; } int server_listen(const char *host, const char *port) { int rc = 0; int sockfd = -1; // default fail value struct addrinfo *info = NULL; struct addrinfo *next_p = NULL; struct addrinfo addr = { .ai_family = AF_UNSPEC, .ai_socktype = SOCK_STREAM, .ai_flags = AI_PASSIVE }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // get the address info for host and port rc = getaddrinfo(NULL, port, \u0026amp;addr, \u0026amp;info); check(rc == 0, \u0026quot;Failed to get address info for connect.\u0026quot;); // cycle through the available list to find one for(next_p = info; next_p != NULL; next_p = next_p-\u0026gt;ai_next) { // attempt to listen to each one sockfd = attempt_listen(next_p); if(sockfd != -1) break; } // either we found one and were able to listen or nothing. check(sockfd != -1, \u0026quot;All possible addresses failed.\u0026quot;); error: //fallthrough if(info) freeaddrinfo(info); // this gets set by the above to either -1 or valid return sockfd; } bstring read_line(RingBuffer *input, const char line_ending) { int i = 0; bstring result = NULL; // not super efficient // read a character at a time from the ring buffer for(i = 0; i \u0026lt; RingBuffer_available_data(input); i++) { // if the buffer has line ending if(input-\u0026gt;buffer[i] == line_ending) { // get that much fromt he ring buffer result = RingBuffer_gets(input, i); check(result, \u0026quot;Failed to get line from RingBuffer\u0026quot;); // make sure that we got the right amount check(RingBuffer_available_data(input) \u0026gt;= 1, \u0026quot;Not enough data in the RingBuffer after reading line.\u0026quot;); // and commit it RingBuffer_commit_read(input, 1); break; } } // notice this will fail in the cases where we get a set of data // on the wire that does not have a line ending yet return result; error: return NULL; }  .\\ex49b\\statserve\\src\\net.h\n#ifndef _net_h #define _net_h #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #define BACKLOG 10 int nonblock(int fd); int client_connect(char *host, char *port); int read_some(RingBuffer * buffer, int fd, int is_socket); int write_some(RingBuffer * buffer, int fd, int is_socket); int server_listen(const char *host, const char *port); bstring read_line(RingBuffer *input, const char line_ending); #endif  .\\ex49b\\statserve\\src\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;lcthw/hashmap.h\u0026gt; #include \u0026lt;lcthw/stats.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #include \u0026quot;net.h\u0026quot; #include \u0026lt;netdb.h\u0026gt; struct tagbstring LINE_SPLIT = bsStatic(\u0026quot; \u0026quot;); struct tagbstring CREATE = bsStatic(\u0026quot;create\u0026quot;); struct tagbstring STDDEV = bsStatic(\u0026quot;stddev\u0026quot;); struct tagbstring MEAN = bsStatic(\u0026quot;mean\u0026quot;); struct tagbstring SAMPLE = bsStatic(\u0026quot;sample\u0026quot;); struct tagbstring DUMP = bsStatic(\u0026quot;dump\u0026quot;); struct tagbstring DELETE = bsStatic(\u0026quot;delete\u0026quot;); struct tagbstring OK = bsStatic(\u0026quot;OK\\n\u0026quot;); struct tagbstring ERR = bsStatic(\u0026quot;ERR\\n\u0026quot;); struct tagbstring DNE = bsStatic(\u0026quot;DNE\\n\u0026quot;); struct tagbstring EXISTS = bsStatic(\u0026quot;EXISTS\\n\u0026quot;); const char LINE_ENDING = '\\n'; const int RB_SIZE = 1024 * 10; Hashmap *DATA = NULL; struct Command; typedef int (*handler_cb)(struct Command *cmd, RingBuffer *send_rb); typedef struct Command { bstring command; bstring name; bstring number; handler_cb handler; } Command; typedef struct Record { bstring name; Stats *stat; } Record; void handle_sigchild(int sig) { sig = 0; // ignore it while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0) { } } void send_reply(RingBuffer *send_rb, bstring reply) { RingBuffer_puts(send_rb, reply); } int handle_create(Command *cmd, RingBuffer *send_rb) { int rc = 0; // if the name is in the DATA map then return exists if(Hashmap_get(DATA, cmd-\u0026gt;name)) { send_reply(send_rb, \u0026amp;EXISTS); } else { // allocate a recrod debug(\u0026quot;create: %s %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(cmd-\u0026gt;number)); Record *info = calloc(sizeof(Record), 1); check_mem(info); // set its stat element info-\u0026gt;stat = Stats_create(); check_mem(info-\u0026gt;stat); // set its name element info-\u0026gt;name = bstrcpy(cmd-\u0026gt;name); check_mem(info-\u0026gt;name); // do a first sample Stats_sample(info-\u0026gt;stat, atof(bdata(cmd-\u0026gt;number))); // add it to the hashmap rc = Hashmap_set(DATA, info-\u0026gt;name, info); check(rc == 0, \u0026quot;Failed to add data to map.\u0026quot;); // send an OK send_reply(send_rb, \u0026amp;OK); } return 0; error: return -1; } int handle_sample(Command *cmd, RingBuffer *send_rb) { // get the info from the hashmap Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); if(info == NULL) { // if it doesn't exist then DNE send_reply(send_rb, \u0026amp;DNE); } else { // else run sample on it, return the mean Stats_sample(info-\u0026gt;stat, atof(bdata(cmd-\u0026gt;number))); bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int handle_delete(Command *cmd, RingBuffer *send_rb) { log_info(\u0026quot;delete: %s\u0026quot;, bdata(cmd-\u0026gt;name)); Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { Hashmap_delete(DATA, cmd-\u0026gt;name); free(info-\u0026gt;stat); bdestroy(info-\u0026gt;name); free(info); send_reply(send_rb, \u0026amp;OK); } return 0; } int handle_mean(Command *cmd, RingBuffer *send_rb) { log_info(\u0026quot;mean: %s\u0026quot;, bdata(cmd-\u0026gt;name)); Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int handle_stddev(Command *cmd, RingBuffer *send_rb) { log_info(\u0026quot;stddev: %s\u0026quot;, bdata(cmd-\u0026gt;name)); Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_stddev(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int handle_dump(Command *cmd, RingBuffer *send_rb) { log_info(\u0026quot;dump: %s\u0026quot;, bdata(cmd-\u0026gt;name)); Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f %f %f %f %ld %f %f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat), Stats_stddev(info-\u0026gt;stat), info-\u0026gt;stat-\u0026gt;sum, info-\u0026gt;stat-\u0026gt;sumsq, info-\u0026gt;stat-\u0026gt;n, info-\u0026gt;stat-\u0026gt;min, info-\u0026gt;stat-\u0026gt;max); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int parse_command(struct bstrList *splits, Command *cmd) { // get the command cmd-\u0026gt;command = splits-\u0026gt;entry[0]; if(biseq(cmd-\u0026gt;command, \u0026amp;CREATE)) { check(splits-\u0026gt;qty == 3, \u0026quot;Failed to parse create: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;number = splits-\u0026gt;entry[2]; cmd-\u0026gt;handler = handle_create; } else if(biseq(cmd-\u0026gt;command, \u0026amp;MEAN)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse mean: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_mean; } else if(biseq(cmd-\u0026gt;command, \u0026amp;SAMPLE)) { check(splits-\u0026gt;qty == 3, \u0026quot;Failed to parse sample: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;number = splits-\u0026gt;entry[2]; cmd-\u0026gt;handler = handle_sample; } else if(biseq(cmd-\u0026gt;command, \u0026amp;DUMP)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse dump: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_dump; } else if(biseq(cmd-\u0026gt;command, \u0026amp;DELETE)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse delete: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_delete; } else if(biseq(cmd-\u0026gt;command, \u0026amp;STDDEV)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse stddev: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_stddev; } else { sentinel(\u0026quot;Failed to parse the command.\u0026quot;); } return 0; error: return -1; } int parse_line(bstring data, RingBuffer *send_rb) { int rc = -1; Command cmd = {.command = NULL}; // split data on line boundaries struct bstrList *splits = bsplits(data, \u0026amp;LINE_SPLIT); check(splits != NULL, \u0026quot;Bad data.\u0026quot;); // parse it into a command rc = parse_command(splits, \u0026amp;cmd); check(rc == 0, \u0026quot;Failed to parse command.\u0026quot;); // call the command handler for that command rc = cmd.handler(\u0026amp;cmd, send_rb); error: // fallthrough if(splits) bstrListDestroy(splits); return rc; } void client_handler(int client_fd) { int rc = 0; RingBuffer *recv_rb = RingBuffer_create(RB_SIZE); RingBuffer *send_rb = RingBuffer_create(RB_SIZE); check_mem(recv_rb); check_mem(send_rb); // keep reading into the recv buffer and sending on send while(read_some(recv_rb, client_fd, 1) != -1) { // read a line from the recv_rb bstring data = read_line(recv_rb, LINE_ENDING); check(data != NULL, \u0026quot;Client closed.\u0026quot;); // parse it, close on any protocol errors rc = parse_line(data, send_rb); bdestroy(data); // cleanup here check(rc == 0, \u0026quot;Failed to parse user. Closing.\u0026quot;); // and as long as there's something to send, send it if(RingBuffer_available_data(send_rb)) { write_some(send_rb, client_fd, 1); } } // close the socket rc = close(client_fd); check(rc != -1, \u0026quot;Failed to close the socket.\u0026quot;); error: // fallthrough if(recv_rb) RingBuffer_destroy(recv_rb); if(send_rb) RingBuffer_destroy(send_rb); exit(0); // just exit the child process } int setup_data_store() { // a more advanced design simply wouldn't use this DATA = Hashmap_create(NULL, NULL); check_mem(DATA); return 0; error: return -1; } int echo_server(const char *host, const char *port) { int rc = 0; struct sockaddr_in client_addr; socklen_t sin_size = sizeof(client_addr); int server_socket = 0; int client_fd = 0; rc = setup_data_store(); check(rc == 0, \u0026quot;Failed to setup the data store.\u0026quot;); struct sigaction sa = { .sa_handler = handle_sigchild, .sa_flags = SA_RESTART | SA_NOCLDSTOP }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // create a sigaction that handles SIGCHLD sigemptyset(\u0026amp;sa.sa_mask); rc = sigaction(SIGCHLD, \u0026amp;sa, 0); check(rc != -1, \u0026quot;Failed to setup signal handler for child processes.\u0026quot;); // listen on the given port and host server_socket = server_listen(host, port); check(server_socket \u0026gt;= 0, \u0026quot;bind to %s:%s failed.\u0026quot;, host, port); while(1) { // accept the connection client_fd = accept(server_socket, (struct sockaddr *)\u0026amp;client_addr, \u0026amp;sin_size); check(client_fd \u0026gt;= 0, \u0026quot;Failed to accept connection.\u0026quot;); debug(\u0026quot;Client connected.\u0026quot;); rc = fork(); if(rc == 0) { // child process close(server_socket); // don't need this // handle the client client_handler(client_fd); } else { // server process close(client_fd); // don't need this } } error: // fallthrough return -1; }  .\\ex49b\\statserve\\src\\statserve.h\n#ifndef _statserve_h #define _statserve_h #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; struct tagbstring OK; int setup_data_store(); int parse_line(bstring data, RingBuffer *send_rb); int echo_server(const char *host, const char *port); #endif  .\\ex49b\\statserve\\tests\\statserve_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;assert.h\u0026gt; typedef struct LineTest { char *line; bstring result; char *description; } LineTest; int attempt_line(LineTest test) { int rc = -1; bstring result = NULL; bstring line = bfromcstr(test.line); RingBuffer *send_rb = RingBuffer_create(1024); rc = parse_line(line, send_rb); check(rc == 0, \u0026quot;Failed to parse line.\u0026quot;); result = RingBuffer_get_all(send_rb); check(result != NULL, \u0026quot;Ring buffer empty.\u0026quot;); check(biseq(result, test.result), \u0026quot;Got the wrong output: %s expected %s\u0026quot;, bdata(result), bdata(test.result)); bdestroy(line); RingBuffer_destroy(send_rb); return 1; // using 1 for tests error: log_err(\u0026quot;Failed to process test %s: got %s\u0026quot;, test.line, bdata(result)); if(line) bdestroy(line); if(send_rb) RingBuffer_destroy(send_rb); return 0; } int run_test_lines(LineTest *tests, int count) { int i = 0; for(i = 0; i \u0026lt; count; i++) { check(attempt_line(tests[i]), \u0026quot;Failed to run %s\u0026quot;, tests[i].description); } return 1; error: return 0; } char *test_create() { LineTest tests[] = { {.line = \u0026quot;create /zed 100\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;create zed failed\u0026quot;}, {.line = \u0026quot;create /joe 100\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;create joe failed\u0026quot;}, }; mu_assert(run_test_lines(tests, 2), \u0026quot;Failed to run create tests.\u0026quot;); return NULL; } char *test_sample() { struct tagbstring sample1 = bsStatic(\u0026quot;100.000000\\n\u0026quot;); LineTest tests[] = { {.line = \u0026quot;sample /zed 100\u0026quot;, .result = \u0026amp;sample1, .description = \u0026quot;sample zed failed.\u0026quot;} }; mu_assert(run_test_lines(tests, 1), \u0026quot;Failed to run sample tests.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); int rc = setup_data_store(); mu_assert(rc == 0, \u0026quot;Failed to setup the data store.\u0026quot;); mu_run_test(test_create); mu_run_test(test_sample); return NULL; } RUN_TESTS(all_tests);  .\\ex49b\\statserve\n.\\ex49b\\statserve\\bin\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026quot;net.h\u0026quot; int main(int argc, char *argv[]) { check(argc == 3, \u0026quot;USAGE: statserve host port\u0026quot;); const char *host = argv[1]; const char *port = argv[2]; check(echo_server(host, port), \u0026quot;Failed to run the echo server.\u0026quot;); return 0; error: return 1; }  .\\ex49b\\statserve\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex49b\\statserve\\src\\net.c\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/select.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/uio.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;netdb.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026quot;net.h\u0026quot; struct tagbstring NL = bsStatic(\u0026quot;\\n\u0026quot;); struct tagbstring CRLF = bsStatic(\u0026quot;\\r\\n\u0026quot;); int nonblock(int fd) { int flags = fcntl(fd, F_GETFL, 0); check(flags \u0026gt;= 0, \u0026quot;Invalid flags on nonblock.\u0026quot;); int rc = fcntl(fd, F_SETFL, flags | O_NONBLOCK); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); return 0; error: return -1; } int client_connect(char *host, char *port) { int rc = 0; struct addrinfo *addr = NULL; rc = getaddrinfo(host, port, NULL, \u0026amp;addr); check(rc == 0, \u0026quot;Failed to lookup %s:%s\u0026quot;, host, port); int sock = socket(AF_INET, SOCK_STREAM, 0); check(sock \u0026gt;= 0, \u0026quot;Cannot create a socket.\u0026quot;); rc = connect(sock, addr-\u0026gt;ai_addr, addr-\u0026gt;ai_addrlen); check(rc == 0, \u0026quot;Connect failed.\u0026quot;); rc = nonblock(sock); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); freeaddrinfo(addr); return sock; error: freeaddrinfo(addr); return -1; } int read_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; if (RingBuffer_available_data(buffer) == 0) { buffer-\u0026gt;start = buffer-\u0026gt;end = 0; } if (is_socket) { rc = recv(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer), 0); } else { rc = read(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer)); } check(rc \u0026gt;= 0, \u0026quot;Failed to read from fd: %d\u0026quot;, fd); RingBuffer_commit_write(buffer, rc); return rc; error: return -1; } int write_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; bstring data = RingBuffer_get_all(buffer); check(data != NULL, \u0026quot;Failed to get from the buffer.\u0026quot;); check(bfindreplace(data, \u0026amp;NL, \u0026amp;CRLF, 0) == BSTR_OK, \u0026quot;Failed to replace NL.\u0026quot;); if (is_socket) { rc = send(fd, bdata(data), blength(data), 0); } else { rc = write(fd, bdata(data), blength(data)); } check(rc == blength(data), \u0026quot;Failed to write everything to fd: %d.\u0026quot;, fd); bdestroy(data); return rc; error: return -1; } int attempt_listen(struct addrinfo *info) { int sockfd = -1; // default fail int rc = -1; int yes = 1; check(info != NULL, \u0026quot;Invalid addrinfo.\u0026quot;); // create a socket with the addrinfo sockfd = socket(info-\u0026gt;ai_family, info-\u0026gt;ai_socktype, info-\u0026gt;ai_protocol); check_debug(sockfd != -1, \u0026quot;Failed to bind to address. Trying more.\u0026quot;); // set the SO_REUSEADDR option on the socket rc = setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;yes, sizeof(int)); check_debug(rc == 0, \u0026quot;Failed to set SO_REUSADDR.\u0026quot;); // attempt to bind to it rc = bind(sockfd, info-\u0026gt;ai_addr, info-\u0026gt;ai_addrlen); check_debug(rc == 0, \u0026quot;Failed to find socket.\u0026quot;); // finally listen with a backlog rc = listen(sockfd, BACKLOG); check_debug(rc == 0, \u0026quot;Failed to listen to socket.\u0026quot;); return sockfd; error: return -1; } int server_listen(const char *host, const char *port) { int rc = 0; int sockfd = -1; // default fail value struct addrinfo *info = NULL; struct addrinfo *next_p = NULL; struct addrinfo addr = { .ai_family = AF_UNSPEC, .ai_socktype = SOCK_STREAM, .ai_flags = AI_PASSIVE }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // get the address info for host and port rc = getaddrinfo(NULL, port, \u0026amp;addr, \u0026amp;info); check(rc == 0, \u0026quot;Failed to get address info for connect.\u0026quot;); // cycle through the available list to find one for(next_p = info; next_p != NULL; next_p = next_p-\u0026gt;ai_next) { // attempt to listen to each one sockfd = attempt_listen(next_p); if(sockfd != -1) break; } // either we found one and were able to listen or nothing. check(sockfd != -1, \u0026quot;All possible addresses failed.\u0026quot;); error: //fallthrough if(info) freeaddrinfo(info); // this gets set by the above to either -1 or valid return sockfd; } bstring read_line(RingBuffer *input, const char line_ending) { int i = 0; bstring result = NULL; // not super efficient // read a character at a time from the ring buffer for(i = 0; i \u0026lt; RingBuffer_available_data(input); i++) { // if the buffer has line ending if(input-\u0026gt;buffer[i] == line_ending) { // get that much fromt he ring buffer result = RingBuffer_gets(input, i); check(result, \u0026quot;Failed to get line from RingBuffer\u0026quot;); // make sure that we got the right amount check(RingBuffer_available_data(input) \u0026gt;= 1, \u0026quot;Not enough data in the RingBuffer after reading line.\u0026quot;); // and commit it RingBuffer_commit_read(input, 1); break; } } // notice this will fail in the cases where we get a set of data // on the wire that does not have a line ending yet return result; error: return NULL; }  .\\ex49b\\statserve\\src\\net.h\n#ifndef _net_h #define _net_h #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #define BACKLOG 10 int nonblock(int fd); int client_connect(char *host, char *port); int read_some(RingBuffer * buffer, int fd, int is_socket); int write_some(RingBuffer * buffer, int fd, int is_socket); int server_listen(const char *host, const char *port); bstring read_line(RingBuffer *input, const char line_ending); #endif  .\\ex49b\\statserve\\src\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;lcthw/hashmap.h\u0026gt; #include \u0026lt;lcthw/stats.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #include \u0026quot;net.h\u0026quot; #include \u0026lt;netdb.h\u0026gt; struct tagbstring LINE_SPLIT = bsStatic(\u0026quot; \u0026quot;); struct tagbstring CREATE = bsStatic(\u0026quot;create\u0026quot;); struct tagbstring STDDEV = bsStatic(\u0026quot;stddev\u0026quot;); struct tagbstring MEAN = bsStatic(\u0026quot;mean\u0026quot;); struct tagbstring SAMPLE = bsStatic(\u0026quot;sample\u0026quot;); struct tagbstring DUMP = bsStatic(\u0026quot;dump\u0026quot;); struct tagbstring DELETE = bsStatic(\u0026quot;delete\u0026quot;); struct tagbstring OK = bsStatic(\u0026quot;OK\\n\u0026quot;); struct tagbstring ERR = bsStatic(\u0026quot;ERR\\n\u0026quot;); struct tagbstring DNE = bsStatic(\u0026quot;DNE\\n\u0026quot;); struct tagbstring EXISTS = bsStatic(\u0026quot;EXISTS\\n\u0026quot;); const char LINE_ENDING = '\\n'; const int RB_SIZE = 1024 * 10; Hashmap *DATA = NULL; struct Command; typedef int (*handler_cb)(struct Command *cmd, RingBuffer *send_rb); typedef struct Command { bstring command; bstring name; bstring number; handler_cb handler; } Command; typedef struct Record { bstring name; Stats *stat; } Record; void handle_sigchild(int sig) { sig = 0; // ignore it while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0) { } } void send_reply(RingBuffer *send_rb, bstring reply) { RingBuffer_puts(send_rb, reply); } int handle_create(Command *cmd, RingBuffer *send_rb) { int rc = 0; // if the name is in the DATA map then return exists if(Hashmap_get(DATA, cmd-\u0026gt;name)) { send_reply(send_rb, \u0026amp;EXISTS); } else { // allocate a recrod debug(\u0026quot;create: %s %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(cmd-\u0026gt;number)); Record *info = calloc(sizeof(Record), 1); check_mem(info); // set its stat element info-\u0026gt;stat = Stats_create(); check_mem(info-\u0026gt;stat); // set its name element info-\u0026gt;name = bstrcpy(cmd-\u0026gt;name); check_mem(info-\u0026gt;name); // do a first sample Stats_sample(info-\u0026gt;stat, atof(bdata(cmd-\u0026gt;number))); // add it to the hashmap rc = Hashmap_set(DATA, info-\u0026gt;name, info); check(rc == 0, \u0026quot;Failed to add data to map.\u0026quot;); // send an OK send_reply(send_rb, \u0026amp;OK); } return 0; error: return -1; } int handle_sample(Command *cmd, RingBuffer *send_rb) { // get the info from the hashmap Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); if(info == NULL) { // if it doesn't exist then DNE send_reply(send_rb, \u0026amp;DNE); } else { // else run sample on it, return the mean Stats_sample(info-\u0026gt;stat, atof(bdata(cmd-\u0026gt;number))); bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int handle_delete(Command *cmd, RingBuffer *send_rb) { log_info(\u0026quot;delete: %s\u0026quot;, bdata(cmd-\u0026gt;name)); Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { Hashmap_delete(DATA, cmd-\u0026gt;name); free(info-\u0026gt;stat); bdestroy(info-\u0026gt;name); free(info); send_reply(send_rb, \u0026amp;OK); } return 0; } int handle_mean(Command *cmd, RingBuffer *send_rb) { log_info(\u0026quot;mean: %s\u0026quot;, bdata(cmd-\u0026gt;name)); Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int handle_stddev(Command *cmd, RingBuffer *send_rb) { log_info(\u0026quot;stddev: %s\u0026quot;, bdata(cmd-\u0026gt;name)); Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_stddev(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int handle_dump(Command *cmd, RingBuffer *send_rb) { log_info(\u0026quot;dump: %s\u0026quot;, bdata(cmd-\u0026gt;name)); Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f %f %f %f %ld %f %f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat), Stats_stddev(info-\u0026gt;stat), info-\u0026gt;stat-\u0026gt;sum, info-\u0026gt;stat-\u0026gt;sumsq, info-\u0026gt;stat-\u0026gt;n, info-\u0026gt;stat-\u0026gt;min, info-\u0026gt;stat-\u0026gt;max); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int parse_command(struct bstrList *splits, Command *cmd) { // get the command cmd-\u0026gt;command = splits-\u0026gt;entry[0]; if(biseq(cmd-\u0026gt;command, \u0026amp;CREATE)) { check(splits-\u0026gt;qty == 3, \u0026quot;Failed to parse create: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;number = splits-\u0026gt;entry[2]; cmd-\u0026gt;handler = handle_create; } else if(biseq(cmd-\u0026gt;command, \u0026amp;MEAN)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse mean: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_mean; } else if(biseq(cmd-\u0026gt;command, \u0026amp;SAMPLE)) { check(splits-\u0026gt;qty == 3, \u0026quot;Failed to parse sample: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;number = splits-\u0026gt;entry[2]; cmd-\u0026gt;handler = handle_sample; } else if(biseq(cmd-\u0026gt;command, \u0026amp;DUMP)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse dump: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_dump; } else if(biseq(cmd-\u0026gt;command, \u0026amp;DELETE)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse delete: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_delete; } else if(biseq(cmd-\u0026gt;command, \u0026amp;STDDEV)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse stddev: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_stddev; } else { sentinel(\u0026quot;Failed to parse the command.\u0026quot;); } return 0; error: return -1; } int parse_line(bstring data, RingBuffer *send_rb) { int rc = -1; Command cmd = {.command = NULL}; // split data on line boundaries struct bstrList *splits = bsplits(data, \u0026amp;LINE_SPLIT); check(splits != NULL, \u0026quot;Bad data.\u0026quot;); // parse it into a command rc = parse_command(splits, \u0026amp;cmd); check(rc == 0, \u0026quot;Failed to parse command.\u0026quot;); // call the command handler for that command rc = cmd.handler(\u0026amp;cmd, send_rb); error: // fallthrough if(splits) bstrListDestroy(splits); return rc; } void client_handler(int client_fd) { int rc = 0; RingBuffer *recv_rb = RingBuffer_create(RB_SIZE); RingBuffer *send_rb = RingBuffer_create(RB_SIZE); check_mem(recv_rb); check_mem(send_rb); // keep reading into the recv buffer and sending on send while(read_some(recv_rb, client_fd, 1) != -1) { // read a line from the recv_rb bstring data = read_line(recv_rb, LINE_ENDING); check(data != NULL, \u0026quot;Client closed.\u0026quot;); // parse it, close on any protocol errors rc = parse_line(data, send_rb); bdestroy(data); // cleanup here check(rc == 0, \u0026quot;Failed to parse user. Closing.\u0026quot;); // and as long as there's something to send, send it if(RingBuffer_available_data(send_rb)) { write_some(send_rb, client_fd, 1); } } // close the socket rc = close(client_fd); check(rc != -1, \u0026quot;Failed to close the socket.\u0026quot;); error: // fallthrough if(recv_rb) RingBuffer_destroy(recv_rb); if(send_rb) RingBuffer_destroy(send_rb); exit(0); // just exit the child process } int setup_data_store() { // a more advanced design simply wouldn't use this DATA = Hashmap_create(NULL, NULL); check_mem(DATA); return 0; error: return -1; } int echo_server(const char *host, const char *port) { int rc = 0; struct sockaddr_in client_addr; socklen_t sin_size = sizeof(client_addr); int server_socket = 0; int client_fd = 0; rc = setup_data_store(); check(rc == 0, \u0026quot;Failed to setup the data store.\u0026quot;); struct sigaction sa = { .sa_handler = handle_sigchild, .sa_flags = SA_RESTART | SA_NOCLDSTOP }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // create a sigaction that handles SIGCHLD sigemptyset(\u0026amp;sa.sa_mask); rc = sigaction(SIGCHLD, \u0026amp;sa, 0); check(rc != -1, \u0026quot;Failed to setup signal handler for child processes.\u0026quot;); // listen on the given port and host server_socket = server_listen(host, port); check(server_socket \u0026gt;= 0, \u0026quot;bind to %s:%s failed.\u0026quot;, host, port); while(1) { // accept the connection client_fd = accept(server_socket, (struct sockaddr *)\u0026amp;client_addr, \u0026amp;sin_size); check(client_fd \u0026gt;= 0, \u0026quot;Failed to accept connection.\u0026quot;); debug(\u0026quot;Client connected.\u0026quot;); rc = fork(); if(rc == 0) { // child process close(server_socket); // don't need this // handle the client client_handler(client_fd); } else { // server process close(client_fd); // don't need this } } error: // fallthrough return -1; }  .\\ex49b\\statserve\\src\\statserve.h\n#ifndef _statserve_h #define _statserve_h #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; struct tagbstring OK; int setup_data_store(); int parse_line(bstring data, RingBuffer *send_rb); int echo_server(const char *host, const char *port); #endif  .\\ex49b\\statserve\\tests\\statserve_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;assert.h\u0026gt; typedef struct LineTest { char *line; bstring result; char *description; } LineTest; int attempt_line(LineTest test) { int rc = -1; bstring result = NULL; bstring line = bfromcstr(test.line); RingBuffer *send_rb = RingBuffer_create(1024); rc = parse_line(line, send_rb); check(rc == 0, \u0026quot;Failed to parse line.\u0026quot;); result = RingBuffer_get_all(send_rb); check(result != NULL, \u0026quot;Ring buffer empty.\u0026quot;); check(biseq(result, test.result), \u0026quot;Got the wrong output: %s expected %s\u0026quot;, bdata(result), bdata(test.result)); bdestroy(line); RingBuffer_destroy(send_rb); return 1; // using 1 for tests error: log_err(\u0026quot;Failed to process test %s: got %s\u0026quot;, test.line, bdata(result)); if(line) bdestroy(line); if(send_rb) RingBuffer_destroy(send_rb); return 0; } int run_test_lines(LineTest *tests, int count) { int i = 0; for(i = 0; i \u0026lt; count; i++) { check(attempt_line(tests[i]), \u0026quot;Failed to run %s\u0026quot;, tests[i].description); } return 1; error: return 0; } char *test_create() { LineTest tests[] = { {.line = \u0026quot;create /zed 100\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;create zed failed\u0026quot;}, {.line = \u0026quot;create /joe 100\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;create joe failed\u0026quot;}, }; mu_assert(run_test_lines(tests, 2), \u0026quot;Failed to run create tests.\u0026quot;); return NULL; } char *test_sample() { struct tagbstring sample1 = bsStatic(\u0026quot;100.000000\\n\u0026quot;); LineTest tests[] = { {.line = \u0026quot;sample /zed 100\u0026quot;, .result = \u0026amp;sample1, .description = \u0026quot;sample zed failed.\u0026quot;} }; mu_assert(run_test_lines(tests, 1), \u0026quot;Failed to run sample tests.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); int rc = setup_data_store(); mu_assert(rc == 0, \u0026quot;Failed to setup the data store.\u0026quot;); mu_run_test(test_create); mu_run_test(test_sample); return NULL; } RUN_TESTS(all_tests);  Solution\nThe Plan\nI\u0026rsquo;ll show you how I implemented the protocol in the smallest code possible.\nI won\u0026rsquo;t implement all of the CRUD operations, so you can go look at the git repo for this project to see a full implementation.\nThe Setup\nFirst I setup the data, then the protocol parser, then the handlers.\nThe Protocol\ncreate Create a new statistic. mean Get the current mean of a statistic. sample Add a new sample to a statistics. dump Get all of the elements of a statistic (sum, sumsq, n, min, and max).Final Code  The Command Structure\ntypedef struct Command { bstring command; bstring name; bstring number; handler_cb handler; } Command;  The Storage Record\ntypedef struct Record { bstring name; Stats *stat; } Record;  The Design\n Accept a connection Parse the line into the Command Run a handler function to process it Temporarily store into a Hashmap  Final Thoughts\nThe last thing I would do is add better tests and round out the protocol with CRUD operations.\nExercise 50a Routing The Statistics Project Description\nThe Plan\nYou are now given vague instructions and have to \u0026ldquo;solve\u0026rdquo; as best you can.\nThe Purpose\nTo give you freedom to be creative, and also taste a real project with vague specifications.\nMany times all you get is a single sentence in a bug tracker. Oh well.\nThe Requirements\nAllow people to work with statistics at arbitrary URLs in the server. You get to define what that means, but think \u0026ldquo;web application\u0026rdquo;.\nPause!\nTry to solve it on your own then continue.\nThe Clues\nAnswer these questions:\n What happens when I have a statistics \u0026ldquo;under\u0026rdquo; another, as in /age/northamerica/ is under /age/. Could you do the summary statistics we talked about? A mean of means and mean of standard deviations that are rolled up the tree? What data structures do you need? Starting with data is key here too. Data data data. Are your tests good enough? Before you start you might want to get good tests that use the protocol.  Important References\n Definitely look at the statistics code you built in liblcthw if you do the summary statistics.  Encouragement\nThis is hard, as I\u0026rsquo;ve said all along, however it is all doable. It\u0026rsquo;s simply a matter of breaking the problems down and tackling each little piece.\nExercise 50b Routing the Statistics Solution\nThe Plan\nShow you how I solved the problem of routing the names of statistics as URLs.\nThe Setup\n First thing I did was make sure my tests were really good. Then I designed the data structures I\u0026rsquo;d need. Then I did the work to make them functions. The protocol shouldn\u0026rsquo;t need to change.  \u0026ldquo;URLs\u0026rdquo;\nI\u0026rsquo;ll define paths as simply names separated by /.\nReal URLs are way more complex than that.\nData Structure\nI just added:\nstruct bstrList *path;  To the Command struct to hold paths.\nURL Meaning\nKind of weird, but:\nDeepest part of URL is \u0026quot;parent\u0026quot;, this is the main stat. Children are next segments up, and are mean-of-mean stats.  New Processing\n Change to a loop over all paths with a \u0026ldquo;scan path\u0026rdquo; function. Add optional path parameter to handlers. Parse the path in parse_command to set path in Commands. In sample and create, change root processing vs. child processing. Move send_reply over to net.c instead.  Test First Path Parsing\nI\u0026rsquo;ll write a small test for just the scan_paths part first.\nThen wire that in and use the existing tests to confirm the old code works.\nThe Code\n.\\ex50b\\statserve\n.\\ex50b\\statserve\\bin\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026quot;net.h\u0026quot; int main(int argc, char *argv[]) { check(argc == 3, \u0026quot;USAGE: statserve host port\u0026quot;); const char *host = argv[1]; const char *port = argv[2]; check(echo_server(host, port), \u0026quot;Failed to run the echo server.\u0026quot;); return 0; error: return 1; }  .\\ex50b\\statserve\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex50b\\statserve\\src\\net.c\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/select.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/uio.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;netdb.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026quot;net.h\u0026quot; struct tagbstring NL = bsStatic(\u0026quot;\\n\u0026quot;); struct tagbstring CRLF = bsStatic(\u0026quot;\\r\\n\u0026quot;); int nonblock(int fd) { int flags = fcntl(fd, F_GETFL, 0); check(flags \u0026gt;= 0, \u0026quot;Invalid flags on nonblock.\u0026quot;); int rc = fcntl(fd, F_SETFL, flags | O_NONBLOCK); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); return 0; error: return -1; } int client_connect(char *host, char *port) { int rc = 0; struct addrinfo *addr = NULL; rc = getaddrinfo(host, port, NULL, \u0026amp;addr); check(rc == 0, \u0026quot;Failed to lookup %s:%s\u0026quot;, host, port); int sock = socket(AF_INET, SOCK_STREAM, 0); check(sock \u0026gt;= 0, \u0026quot;Cannot create a socket.\u0026quot;); rc = connect(sock, addr-\u0026gt;ai_addr, addr-\u0026gt;ai_addrlen); check(rc == 0, \u0026quot;Connect failed.\u0026quot;); rc = nonblock(sock); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); freeaddrinfo(addr); return sock; error: freeaddrinfo(addr); return -1; } int read_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; if (RingBuffer_available_data(buffer) == 0) { buffer-\u0026gt;start = buffer-\u0026gt;end = 0; } if (is_socket) { rc = recv(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer), 0); } else { rc = read(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer)); } check(rc \u0026gt;= 0, \u0026quot;Failed to read from fd: %d\u0026quot;, fd); RingBuffer_commit_write(buffer, rc); return rc; error: return -1; } int write_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; bstring data = RingBuffer_get_all(buffer); check(data != NULL, \u0026quot;Failed to get from the buffer.\u0026quot;); check(bfindreplace(data, \u0026amp;NL, \u0026amp;CRLF, 0) == BSTR_OK, \u0026quot;Failed to replace NL.\u0026quot;); if (is_socket) { rc = send(fd, bdata(data), blength(data), 0); } else { rc = write(fd, bdata(data), blength(data)); } check(rc == blength(data), \u0026quot;Failed to write everything to fd: %d.\u0026quot;, fd); bdestroy(data); return rc; error: return -1; } int attempt_listen(struct addrinfo *info) { int sockfd = -1; // default fail int rc = -1; int yes = 1; check(info != NULL, \u0026quot;Invalid addrinfo.\u0026quot;); // create a socket with the addrinfo sockfd = socket(info-\u0026gt;ai_family, info-\u0026gt;ai_socktype, info-\u0026gt;ai_protocol); check_debug(sockfd != -1, \u0026quot;Failed to bind to address. Trying more.\u0026quot;); // set the SO_REUSEADDR option on the socket rc = setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;yes, sizeof(int)); check_debug(rc == 0, \u0026quot;Failed to set SO_REUSADDR.\u0026quot;); // attempt to bind to it rc = bind(sockfd, info-\u0026gt;ai_addr, info-\u0026gt;ai_addrlen); check_debug(rc == 0, \u0026quot;Failed to find socket.\u0026quot;); // finally listen with a backlog rc = listen(sockfd, BACKLOG); check_debug(rc == 0, \u0026quot;Failed to listen to socket.\u0026quot;); return sockfd; error: return -1; } int server_listen(const char *host, const char *port) { int rc = 0; int sockfd = -1; // default fail value struct addrinfo *info = NULL; struct addrinfo *next_p = NULL; struct addrinfo addr = { .ai_family = AF_UNSPEC, .ai_socktype = SOCK_STREAM, .ai_flags = AI_PASSIVE }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // get the address info for host and port rc = getaddrinfo(NULL, port, \u0026amp;addr, \u0026amp;info); check(rc == 0, \u0026quot;Failed to get address info for connect.\u0026quot;); // cycle through the available list to find one for(next_p = info; next_p != NULL; next_p = next_p-\u0026gt;ai_next) { // attempt to listen to each one sockfd = attempt_listen(next_p); if(sockfd != -1) break; } // either we found one and were able to listen or nothing. check(sockfd != -1, \u0026quot;All possible addresses failed.\u0026quot;); error: //fallthrough if(info) freeaddrinfo(info); // this gets set by the above to either -1 or valid return sockfd; } bstring read_line(RingBuffer *input, const char line_ending) { int i = 0; bstring result = NULL; // not super efficient // read a character at a time from the ring buffer for(i = 0; i \u0026lt; RingBuffer_available_data(input); i++) { // if the buffer has line ending if(input-\u0026gt;buffer[i] == line_ending) { // get that much fromt he ring buffer result = RingBuffer_gets(input, i); check(result, \u0026quot;Failed to get line from RingBuffer\u0026quot;); // make sure that we got the right amount check(RingBuffer_available_data(input) \u0026gt;= 1, \u0026quot;Not enough data in the RingBuffer after reading line.\u0026quot;); // and commit it RingBuffer_commit_read(input, 1); break; } } // notice this will fail in the cases where we get a set of data // on the wire that does not have a line ending yet return result; error: return NULL; } void send_reply(RingBuffer *send_rb, bstring reply) { RingBuffer_puts(send_rb, reply); }  .\\ex50b\\statserve\\src\\net.h\n#ifndef _net_h #define _net_h #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #define BACKLOG 10 int nonblock(int fd); int client_connect(char *host, char *port); int read_some(RingBuffer * buffer, int fd, int is_socket); int write_some(RingBuffer * buffer, int fd, int is_socket); int server_listen(const char *host, const char *port); bstring read_line(RingBuffer *input, const char line_ending); void send_reply(RingBuffer *send_rb, bstring reply); #endif  .\\ex50b\\statserve\\src\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;lcthw/hashmap.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #include \u0026quot;net.h\u0026quot; #include \u0026lt;netdb.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; struct tagbstring LINE_SPLIT = bsStatic(\u0026quot; \u0026quot;); struct tagbstring CREATE = bsStatic(\u0026quot;create\u0026quot;); struct tagbstring STDDEV = bsStatic(\u0026quot;stddev\u0026quot;); struct tagbstring MEAN = bsStatic(\u0026quot;mean\u0026quot;); struct tagbstring SAMPLE = bsStatic(\u0026quot;sample\u0026quot;); struct tagbstring DUMP = bsStatic(\u0026quot;dump\u0026quot;); struct tagbstring DELETE = bsStatic(\u0026quot;delete\u0026quot;); struct tagbstring OK = bsStatic(\u0026quot;OK\\n\u0026quot;); struct tagbstring ERR = bsStatic(\u0026quot;ERR\\n\u0026quot;); struct tagbstring DNE = bsStatic(\u0026quot;DNE\\n\u0026quot;); struct tagbstring EXISTS = bsStatic(\u0026quot;EXISTS\\n\u0026quot;); struct tagbstring SLASH = bsStatic(\u0026quot;/\u0026quot;); const char LINE_ENDING = '\\n'; const int RB_SIZE = 1024 * 10; Hashmap *DATA = NULL; void handle_sigchild(int sig) { sig = 0; // ignore it while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0) { } } int handle_create(Command *cmd, RingBuffer *send_rb, bstring path) { int rc = 0; int is_root = biseq(path, cmd-\u0026gt;name); log_info(\u0026quot;create: %s %s %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(path), bdata(cmd-\u0026gt;number)); Record *info = Hashmap_get(DATA, path); if(info != NULL \u0026amp;\u0026amp; is_root) { // report if root exists, just skip children send_reply(send_rb, \u0026amp;EXISTS); } else if(info != NULL) { debug(\u0026quot;Child %s exists, skipping it.\u0026quot;, bdata(path)); return 0; } else { // new child so make it debug(\u0026quot;create: %s %s\u0026quot;, bdata(path), bdata(cmd-\u0026gt;number)); Record *info = calloc(sizeof(Record), 1); check_mem(info); // set its stat element info-\u0026gt;stat = Stats_create(); check_mem(info-\u0026gt;stat); // set its name element info-\u0026gt;name = bstrcpy(path); check_mem(info-\u0026gt;name); // do a first sample Stats_sample(info-\u0026gt;stat, atof(bdata(cmd-\u0026gt;number))); // add it to the hashmap rc = Hashmap_set(DATA, info-\u0026gt;name, info); check(rc == 0, \u0026quot;Failed to add data to map.\u0026quot;); // only send the for the root part if(is_root) { send_reply(send_rb, \u0026amp;OK); } } return 0; error: return -1; } int handle_sample(Command *cmd, RingBuffer *send_rb, bstring path) { // get the info from the hashmap Record *info = Hashmap_get(DATA, path); int is_root = biseq(path, cmd-\u0026gt;name); log_info(\u0026quot;sample %s %s %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(path), bdata(cmd-\u0026gt;number)); bstring child_path = NULL; if(info == NULL) { // if it doesn't exist then DNE send_reply(send_rb, \u0026amp;DNE); return 0; } else { if(is_root) { // just sample the root like normal Stats_sample(info-\u0026gt;stat, atof(bdata(cmd-\u0026gt;number))); } else { // need to do some hackery to get the child path // for rolling up mean-of-means on it // increase the qty on path up one cmd-\u0026gt;path-\u0026gt;qty++; // get the \u0026quot;child path\u0026quot; (previous path?) child_path = bjoin(cmd-\u0026gt;path, \u0026amp;SLASH); // get that info from the DATA Record *child_info = Hashmap_get(DATA, child_path); bdestroy(child_path); // if it exists then sample on it if(child_info) { // info is /logins, child_info is /logins/zed // we want /logins/zed's mean to be a new sample on /logins Stats_sample(info-\u0026gt;stat, Stats_mean(child_info-\u0026gt;stat)); } // drop the path back to where it was cmd-\u0026gt;path-\u0026gt;qty--; } } // do the reply for the mean last bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); return 0; } int handle_delete(Command *cmd, RingBuffer *send_rb, bstring path) { log_info(\u0026quot;delete: %s %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(path)); Record *info = Hashmap_get(DATA, path); int is_root = biseq(path, cmd-\u0026gt;name); // BUG: should just decide that this isn't scanned // but run once, for now just only run on root if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else if(is_root) { Hashmap_delete(DATA, path); free(info-\u0026gt;stat); bdestroy(info-\u0026gt;name); free(info); send_reply(send_rb, \u0026amp;OK); } return 0; } int handle_mean(Command *cmd, RingBuffer *send_rb, bstring path) { log_info(\u0026quot;mean: %s %s %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(path), bdata(path)); Record *info = Hashmap_get(DATA, path); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int handle_stddev(Command *cmd, RingBuffer *send_rb, bstring path) { log_info(\u0026quot;stddev: %s %s %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(path), bdata(path)); Record *info = Hashmap_get(DATA, path); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_stddev(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int handle_dump(Command *cmd, RingBuffer *send_rb, bstring path) { log_info(\u0026quot;dump: %s, %s, %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(path), bdata(path)); Record *info = Hashmap_get(DATA, path); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f %f %f %f %ld %f %f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat), Stats_stddev(info-\u0026gt;stat), info-\u0026gt;stat-\u0026gt;sum, info-\u0026gt;stat-\u0026gt;sumsq, info-\u0026gt;stat-\u0026gt;n, info-\u0026gt;stat-\u0026gt;min, info-\u0026gt;stat-\u0026gt;max); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int parse_command(struct bstrList *splits, Command *cmd) { // get the command cmd-\u0026gt;command = splits-\u0026gt;entry[0]; if(biseq(cmd-\u0026gt;command, \u0026amp;CREATE)) { check(splits-\u0026gt;qty == 3, \u0026quot;Failed to parse create: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;number = splits-\u0026gt;entry[2]; cmd-\u0026gt;handler = handle_create; } else if(biseq(cmd-\u0026gt;command, \u0026amp;MEAN)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse mean: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_mean; } else if(biseq(cmd-\u0026gt;command, \u0026amp;SAMPLE)) { check(splits-\u0026gt;qty == 3, \u0026quot;Failed to parse sample: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;number = splits-\u0026gt;entry[2]; cmd-\u0026gt;handler = handle_sample; } else if(biseq(cmd-\u0026gt;command, \u0026amp;DUMP)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse dump: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_dump; } else if(biseq(cmd-\u0026gt;command, \u0026amp;DELETE)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse delete: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_delete; } else if(biseq(cmd-\u0026gt;command, \u0026amp;STDDEV)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse stddev: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_stddev; } else { sentinel(\u0026quot;Failed to parse the command.\u0026quot;); } return 0; error: return -1; } int scan_paths(Command *cmd, RingBuffer *send_rb) { check(cmd-\u0026gt;path != NULL, \u0026quot;Path was not set in command.\u0026quot;); int rc = 0; // save the original path length size_t qty = cmd-\u0026gt;path-\u0026gt;qty; // starting at the longest path, shorten it and call // for each one: for(; cmd-\u0026gt;path-\u0026gt;qty \u0026gt; 1; cmd-\u0026gt;path-\u0026gt;qty--) { // remake the path with / again bstring path = bjoin(cmd-\u0026gt;path, \u0026amp;SLASH); // call the handler with the path rc = cmd-\u0026gt;handler(cmd, send_rb, path); // if the handler returns != 0 then abort and return that bdestroy(path); if(rc != 0) break; } // restore path length cmd-\u0026gt;path-\u0026gt;qty = qty; return rc; error: return -1; } struct bstrList *parse_name(bstring name) { return bsplits(name, \u0026amp;SLASH); } int parse_line(bstring data, RingBuffer *send_rb) { int rc = -1; Command cmd = {.command = NULL}; // split data on line boundaries struct bstrList *splits = bsplits(data, \u0026amp;LINE_SPLIT); check(splits != NULL, \u0026quot;Bad data.\u0026quot;); // parse it into a command rc = parse_command(splits, \u0026amp;cmd); check(rc == 0, \u0026quot;Failed to parse command.\u0026quot;); // parse the name into the path we need for scan_paths cmd.path = parse_name(cmd.name); check(cmd.path != NULL, \u0026quot;Invalid path.\u0026quot;); // scan the path and call the handlers rc = scan_paths(\u0026amp;cmd, send_rb); check(rc == 0, \u0026quot;Failure running command against path: %s\u0026quot;, bdata(cmd.name)); bstrListDestroy(cmd.path); bstrListDestroy(splits); return 0; error: // fallthrough if(cmd.path) bstrListDestroy(cmd.path); if(splits) bstrListDestroy(splits); return -1; } void client_handler(int client_fd) { int rc = 0; RingBuffer *recv_rb = RingBuffer_create(RB_SIZE); RingBuffer *send_rb = RingBuffer_create(RB_SIZE); check_mem(recv_rb); check_mem(send_rb); // keep reading into the recv buffer and sending on send while(read_some(recv_rb, client_fd, 1) != -1) { // read a line from the recv_rb bstring data = read_line(recv_rb, LINE_ENDING); check(data != NULL, \u0026quot;Client closed.\u0026quot;); // parse it, close on any protocol errors rc = parse_line(data, send_rb); bdestroy(data); // cleanup here check(rc == 0, \u0026quot;Failed to parse user. Closing.\u0026quot;); // and as long as there's something to send, send it if(RingBuffer_available_data(send_rb)) { write_some(send_rb, client_fd, 1); } } // close the socket rc = close(client_fd); check(rc != -1, \u0026quot;Failed to close the socket.\u0026quot;); error: // fallthrough if(recv_rb) RingBuffer_destroy(recv_rb); if(send_rb) RingBuffer_destroy(send_rb); exit(0); // just exit the child process } int setup_data_store() { // a more advanced design simply wouldn't use this DATA = Hashmap_create(NULL, NULL); check_mem(DATA); return 0; error: return -1; } int echo_server(const char *host, const char *port) { int rc = 0; struct sockaddr_in client_addr; socklen_t sin_size = sizeof(client_addr); int server_socket = 0; int client_fd = 0; rc = setup_data_store(); check(rc == 0, \u0026quot;Failed to setup the data store.\u0026quot;); struct sigaction sa = { .sa_handler = handle_sigchild, .sa_flags = SA_RESTART | SA_NOCLDSTOP }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // create a sigaction that handles SIGCHLD sigemptyset(\u0026amp;sa.sa_mask); rc = sigaction(SIGCHLD, \u0026amp;sa, 0); check(rc != -1, \u0026quot;Failed to setup signal handler for child processes.\u0026quot;); // listen on the given port and host server_socket = server_listen(host, port); check(server_socket \u0026gt;= 0, \u0026quot;bind to %s:%s failed.\u0026quot;, host, port); while(1) { // accept the connection client_fd = accept(server_socket, (struct sockaddr *)\u0026amp;client_addr, \u0026amp;sin_size); check(client_fd \u0026gt;= 0, \u0026quot;Failed to accept connection.\u0026quot;); debug(\u0026quot;Client connected.\u0026quot;); rc = fork(); if(rc == 0) { // child process close(server_socket); // don't need this // handle the client client_handler(client_fd); } else { // server process close(client_fd); // don't need this } } error: // fallthrough return -1; }  .\\ex50b\\statserve\\src\\statserve.h\n#ifndef _statserve_h #define _statserve_h #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/stats.h\u0026gt; struct Command; typedef int (*handler_cb)(struct Command *cmd, RingBuffer *send_rb, bstring path); typedef struct Command { bstring command; bstring name; struct bstrList *path; bstring number; handler_cb handler; } Command; typedef struct Record { bstring name; Stats *stat; } Record; struct tagbstring OK; int setup_data_store(); struct bstrList *parse_name(bstring name); int scan_paths(Command *cmd, RingBuffer *send_rb); int parse_line(bstring data, RingBuffer *send_rb); int echo_server(const char *host, const char *port); #endif  .\\ex50b\\statserve\\tests\\statserve_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;assert.h\u0026gt; typedef struct LineTest { char *line; bstring result; char *description; } LineTest; int attempt_line(LineTest test) { int rc = -1; bstring result = NULL; bstring line = bfromcstr(test.line); RingBuffer *send_rb = RingBuffer_create(1024); rc = parse_line(line, send_rb); check(rc == 0, \u0026quot;Failed to parse line.\u0026quot;); result = RingBuffer_get_all(send_rb); check(result != NULL, \u0026quot;Ring buffer empty.\u0026quot;); check(biseq(result, test.result), \u0026quot;Got the wrong output: %s expected %s\u0026quot;, bdata(result), bdata(test.result)); bdestroy(line); RingBuffer_destroy(send_rb); return 1; // using 1 for tests error: log_err(\u0026quot;Failed to process test %s: got %s\u0026quot;, test.line, bdata(result)); if(line) bdestroy(line); if(send_rb) RingBuffer_destroy(send_rb); return 0; } int run_test_lines(LineTest *tests, int count) { int i = 0; for(i = 0; i \u0026lt; count; i++) { check(attempt_line(tests[i]), \u0026quot;Failed to run %s\u0026quot;, tests[i].description); } return 1; error: return 0; } int fake_command(Command *cmd, RingBuffer *send_rb, bstring path) { check(cmd != NULL, \u0026quot;Bad cmd.\u0026quot;); check(cmd-\u0026gt;path != NULL, \u0026quot;Bad path.\u0026quot;); check(send_rb != NULL, \u0026quot;Bad send_rb.\u0026quot;); check(path != NULL, \u0026quot;Bad path given.\u0026quot;); return 0; error: return -1; } char *test_path_parsing() { struct bstrList *result = NULL; struct tagbstring slash = bsStatic(\u0026quot;/\u0026quot;); struct tagbstring logins_zed = bsStatic(\u0026quot;/logins/zed\u0026quot;); struct tagbstring command_name = bsStatic(\u0026quot;dump\u0026quot;); RingBuffer *send_rb = RingBuffer_create(1024); struct bstrList *path = bsplits(\u0026amp;logins_zed, \u0026amp;slash); int rc = 0; Command fake = { .command = \u0026amp;command_name, .name = \u0026amp;logins_zed, .number = NULL, .handler = fake_command, .path = path }; result = parse_name(\u0026amp;logins_zed); mu_assert(result != NULL, \u0026quot;Failed to parse /logins/zed\u0026quot;); rc = scan_paths(\u0026amp;fake, send_rb); mu_assert(rc != -1, \u0026quot;scan_paths failed.\u0026quot;); return NULL; } char *test_create() { LineTest tests[] = { {.line = \u0026quot;create /zed 100\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;create zed failed\u0026quot;}, {.line = \u0026quot;create /joe 100\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;create joe failed\u0026quot;}, }; mu_assert(run_test_lines(tests, 2), \u0026quot;Failed to run create tests.\u0026quot;); return NULL; } char *test_sample() { struct tagbstring sample1 = bsStatic(\u0026quot;100.000000\\n\u0026quot;); LineTest tests[] = { {.line = \u0026quot;sample /zed 100\u0026quot;, .result = \u0026amp;sample1, .description = \u0026quot;sample zed failed.\u0026quot;} }; mu_assert(run_test_lines(tests, 1), \u0026quot;Failed to run sample tests.\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); int rc = setup_data_store(); mu_assert(rc == 0, \u0026quot;Failed to setup the data store.\u0026quot;); mu_run_test(test_create); mu_run_test(test_sample); mu_run_test(test_path_parsing); return NULL; } RUN_TESTS(all_tests);  Final Review\nExercise 51a Storing the Statistics Project Description\nThe Plan\nLearn to store the statistics to the hard disk.\nThere are meany issues with this.\nThe Purpose\nTo teach you about various problems related to securely storing files.\nThe Requirements\nFor this exercise, you\u0026rsquo;ll add two commands for storing to and loading statistics from a hard drive:\nstore If there\u0026rsquo;s a URL, store it to a hard drive.\nload If there are two URLs, load the statistic from the hard drive based on the first URL, and then put it into the second URL that\u0026rsquo;s in memory.\nThe Requirements\n If URLs have / characters in them, then that conflicts with the filesystem\u0026rsquo;s use of slashes. How will you solve this? If URLs have / characters in them, then someone can use your server to overwrite files on a hard drive by giving paths to them. How will you solve this? If you choose to use deeply nested directories, then traversing directories to find files will be very slow. What will you do here?  The Requirements\n If you choose to use one directory and hash URLs (oops, I gave a hint), then directories with too many files in them are slow. How will you solve this? What happens when someone loads a statistic from a hard drive into a URL that already exists? How will someone running statserve know where the storage should be?  The Clues\nThere are no clues. You can do this.\nExercise 51b Storing the Statistics Solution\nThe Plan\nShow you how I solved the problem of storing the statistics to disk.\nSecurity Requirements\n Use realpath to make sure that paths are in one place. Use BAD encryption to mangle the stored names. No other security beyond that. Just a demo of the path issue.  XTEA Encryption\n For an extra challenge I decided to \u0026ldquo;hash\u0026rdquo; names with XTEA. https://en.wikipedia.org/wiki/XTEA for the code. Normally I wouldn\u0026rsquo;t do this, but wanted to show you XTEA. Because XTEA if cool and fun, although broken. DON\u0026rsquo;T USE XTEA FOR ENCRYPTION.  Improvements\n Let commands set cmd-\u0026gt;path = NULL to indicate non-recursive. Change echo_server to run_server finally. Allow a 3rd storage path argument on the command line. Allow an additional argument to Command.  Weirdness\n Forking means I can\u0026rsquo;t share data between clients without storage. Storing doesn\u0026rsquo;t happen automatically, only explicitly. Loading acts as a copy command. XTEA isn\u0026rsquo;t the best algorithm at all. Just for fun.  How I Did It\n Create the LOAD and STORE handlers. Add Command.arg and set those in parse_command. Move path parsing up to allow non-recursive handling with path = NULL. Write a sanitize_location and encrypt_armor_name function, test them. Write handle_store first to allow testing handle_load. Use open (man 2 open) with O_EXLOCK to get exclusive locks on files. Using close (man 2 close) should release EXLOCK, but not clear on this.  The Code\n.\\ex51b\\statserve\n.\\ex51b\\statserve\\bin\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026quot;net.h\u0026quot; int main(int argc, char *argv[]) { check(argc == 4, \u0026quot;USAGE: statserve host port store_path\u0026quot;); const char *host = argv[1]; const char *port = argv[2]; const char *store_path = argv[3]; check(run_server(host, port, store_path), \u0026quot;Failed to run the echo server.\u0026quot;); return 0; error: return 1; }  .\\ex51b\\statserve\\src\\dbg.h\n#ifndef __dbg_h__ #define __dbg_h__ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;string.h\u0026gt; #ifdef NDEBUG #define debug(M, ...) #else #define debug(M, ...) fprintf(stderr, \u0026quot;DEBUG %s:%d: \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #endif #define clean_errno() (errno == 0 ? \u0026quot;None\u0026quot; : strerror(errno)) #define log_err(M, ...) fprintf(stderr,\\ \u0026quot;[ERROR] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;, __FILE__, __LINE__,\\ clean_errno(), ##__VA_ARGS__) #define log_warn(M, ...) fprintf(stderr,\\ \u0026quot;[WARN] (%s:%d: errno: %s) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__) #define log_info(M, ...) fprintf(stderr, \u0026quot;[INFO] (%s:%d) \u0026quot; M \u0026quot;\\n\u0026quot;,\\ __FILE__, __LINE__, ##__VA_ARGS__) #define check(A, M, ...) if(!(A)) {\\ log_err(M, ##__VA_ARGS__); errno=0; goto error; } #define sentinel(M, ...) { log_err(M, ##__VA_ARGS__);\\ errno=0; goto error; } #define check_mem(A) check((A), \u0026quot;Out of memory.\u0026quot;) #define check_debug(A, M, ...) if(!(A)) { debug(M, ##__VA_ARGS__);\\ errno=0; goto error; } #endif  .\\ex51b\\statserve\\src\\net.c\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/select.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/uio.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;netdb.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026quot;net.h\u0026quot; struct tagbstring NL = bsStatic(\u0026quot;\\n\u0026quot;); struct tagbstring CRLF = bsStatic(\u0026quot;\\r\\n\u0026quot;); int nonblock(int fd) { int flags = fcntl(fd, F_GETFL, 0); check(flags \u0026gt;= 0, \u0026quot;Invalid flags on nonblock.\u0026quot;); int rc = fcntl(fd, F_SETFL, flags | O_NONBLOCK); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); return 0; error: return -1; } int client_connect(char *host, char *port) { int rc = 0; struct addrinfo *addr = NULL; rc = getaddrinfo(host, port, NULL, \u0026amp;addr); check(rc == 0, \u0026quot;Failed to lookup %s:%s\u0026quot;, host, port); int sock = socket(AF_INET, SOCK_STREAM, 0); check(sock \u0026gt;= 0, \u0026quot;Cannot create a socket.\u0026quot;); rc = connect(sock, addr-\u0026gt;ai_addr, addr-\u0026gt;ai_addrlen); check(rc == 0, \u0026quot;Connect failed.\u0026quot;); rc = nonblock(sock); check(rc == 0, \u0026quot;Can't set nonblocking.\u0026quot;); freeaddrinfo(addr); return sock; error: freeaddrinfo(addr); return -1; } int read_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; if (RingBuffer_available_data(buffer) == 0) { buffer-\u0026gt;start = buffer-\u0026gt;end = 0; } if (is_socket) { rc = recv(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer), 0); } else { rc = read(fd, RingBuffer_starts_at(buffer), RingBuffer_available_space(buffer)); } check(rc \u0026gt;= 0, \u0026quot;Failed to read from fd: %d\u0026quot;, fd); RingBuffer_commit_write(buffer, rc); return rc; error: return -1; } int write_some(RingBuffer * buffer, int fd, int is_socket) { int rc = 0; bstring data = RingBuffer_get_all(buffer); check(data != NULL, \u0026quot;Failed to get from the buffer.\u0026quot;); check(bfindreplace(data, \u0026amp;NL, \u0026amp;CRLF, 0) == BSTR_OK, \u0026quot;Failed to replace NL.\u0026quot;); if (is_socket) { rc = send(fd, bdata(data), blength(data), 0); } else { rc = write(fd, bdata(data), blength(data)); } check(rc == blength(data), \u0026quot;Failed to write everything to fd: %d.\u0026quot;, fd); bdestroy(data); return rc; error: return -1; } int attempt_listen(struct addrinfo *info) { int sockfd = -1; // default fail int rc = -1; int yes = 1; check(info != NULL, \u0026quot;Invalid addrinfo.\u0026quot;); // create a socket with the addrinfo sockfd = socket(info-\u0026gt;ai_family, info-\u0026gt;ai_socktype, info-\u0026gt;ai_protocol); check_debug(sockfd != -1, \u0026quot;Failed to bind to address. Trying more.\u0026quot;); // set the SO_REUSEADDR option on the socket rc = setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, \u0026amp;yes, sizeof(int)); check_debug(rc == 0, \u0026quot;Failed to set SO_REUSADDR.\u0026quot;); // attempt to bind to it rc = bind(sockfd, info-\u0026gt;ai_addr, info-\u0026gt;ai_addrlen); check_debug(rc == 0, \u0026quot;Failed to find socket.\u0026quot;); // finally listen with a backlog rc = listen(sockfd, BACKLOG); check_debug(rc == 0, \u0026quot;Failed to listen to socket.\u0026quot;); return sockfd; error: return -1; } int server_listen(const char *host, const char *port) { int rc = 0; int sockfd = -1; // default fail value struct addrinfo *info = NULL; struct addrinfo *next_p = NULL; struct addrinfo addr = { .ai_family = AF_UNSPEC, .ai_socktype = SOCK_STREAM, .ai_flags = AI_PASSIVE }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // get the address info for host and port rc = getaddrinfo(NULL, port, \u0026amp;addr, \u0026amp;info); check(rc == 0, \u0026quot;Failed to get address info for connect.\u0026quot;); // cycle through the available list to find one for(next_p = info; next_p != NULL; next_p = next_p-\u0026gt;ai_next) { // attempt to listen to each one sockfd = attempt_listen(next_p); if(sockfd != -1) break; } // either we found one and were able to listen or nothing. check(sockfd != -1, \u0026quot;All possible addresses failed.\u0026quot;); error: //fallthrough if(info) freeaddrinfo(info); // this gets set by the above to either -1 or valid return sockfd; } bstring read_line(RingBuffer *input, const char line_ending) { int i = 0; bstring result = NULL; // not super efficient // read a character at a time from the ring buffer for(i = 0; i \u0026lt; RingBuffer_available_data(input); i++) { // if the buffer has line ending if(input-\u0026gt;buffer[i] == line_ending) { // get that much fromt he ring buffer result = RingBuffer_gets(input, i); check(result, \u0026quot;Failed to get line from RingBuffer\u0026quot;); // make sure that we got the right amount check(RingBuffer_available_data(input) \u0026gt;= 1, \u0026quot;Not enough data in the RingBuffer after reading line.\u0026quot;); // and commit it RingBuffer_commit_read(input, 1); break; } } // notice this will fail in the cases where we get a set of data // on the wire that does not have a line ending yet return result; error: return NULL; } void send_reply(RingBuffer *send_rb, bstring reply) { RingBuffer_puts(send_rb, reply); }  .\\ex51b\\statserve\\src\\net.h\n#ifndef _net_h #define _net_h #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #define BACKLOG 10 int nonblock(int fd); int client_connect(char *host, char *port); int read_some(RingBuffer * buffer, int fd, int is_socket); int write_some(RingBuffer * buffer, int fd, int is_socket); int server_listen(const char *host, const char *port); bstring read_line(RingBuffer *input, const char line_ending); void send_reply(RingBuffer *send_rb, bstring reply); #endif  .\\ex51b\\statserve\\src\\statserve.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;lcthw/dbg.h\u0026gt; #include \u0026lt;lcthw/hashmap.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #include \u0026quot;net.h\u0026quot; #include \u0026lt;netdb.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; struct tagbstring LINE_SPLIT = bsStatic(\u0026quot; \u0026quot;); struct tagbstring CREATE = bsStatic(\u0026quot;create\u0026quot;); struct tagbstring STDDEV = bsStatic(\u0026quot;stddev\u0026quot;); struct tagbstring MEAN = bsStatic(\u0026quot;mean\u0026quot;); struct tagbstring SAMPLE = bsStatic(\u0026quot;sample\u0026quot;); struct tagbstring DUMP = bsStatic(\u0026quot;dump\u0026quot;); struct tagbstring DELETE = bsStatic(\u0026quot;delete\u0026quot;); struct tagbstring STORE = bsStatic(\u0026quot;store\u0026quot;); struct tagbstring LOAD = bsStatic(\u0026quot;load\u0026quot;); struct tagbstring OK = bsStatic(\u0026quot;OK\\n\u0026quot;); struct tagbstring ERR = bsStatic(\u0026quot;ERR\\n\u0026quot;); struct tagbstring DNE = bsStatic(\u0026quot;DNE\\n\u0026quot;); struct tagbstring EXISTS = bsStatic(\u0026quot;EXISTS\\n\u0026quot;); struct tagbstring SLASH = bsStatic(\u0026quot;/\u0026quot;); const char LINE_ENDING = '\\n'; const int RB_SIZE = 1024 * 10; Hashmap *DATA = NULL; bstring STORE_PATH = NULL; void handle_sigchild(int sig) { sig = 0; // ignore it while(waitpid(-1, NULL, WNOHANG) \u0026gt; 0) { } } // BUG: this is stupid, use md5 void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) { unsigned int i; uint32_t v0=v[0], v1=v[1], sum=0, delta=0x9E3779B9; for (i=0; i \u0026lt; num_rounds; i++) { v0 += (((v1 \u0026lt;\u0026lt; 4) ^ (v1 \u0026gt;\u0026gt; 5)) + v1) ^ (sum + key[sum \u0026amp; 3]); sum += delta; v1 += (((v0 \u0026lt;\u0026lt; 4) ^ (v0 \u0026gt;\u0026gt; 5)) + v0) ^ (sum + key[(sum\u0026gt;\u0026gt;11) \u0026amp; 3]); } v[0]=v0; v[1]=v1; } /// TOTALLY RANDOM! LOL BUG: not secure const uint32_t STORE_KEY[4] = {18748274, 228374, 193034845, 85726348}; struct tagbstring FAUX64 = bsStatic(\u0026quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\u0026quot;); // BUG: this all dies bstring encrypt_armor_name(bstring name) { // copy the name to encrypt bstring encname = bstrcpy(name); size_t i = 0; // point the encrypt pointer at it // BUG: this cast is weird, why? uint32_t *v = (uint32_t *)bdata(encname); // extend the encname so that it can hold everything // BUG: use a correct padding algorithm while(blength(encname) % (sizeof(uint32_t) * 2) \u0026gt; 0) { bconchar(encname, ' '); } // run encipher on this // BUG: get rid of encipher for(i = 0; i \u0026lt; (size_t)blength(encname) / (sizeof(uint32_t) * 2); i+=2) { encipher(1, v+i, STORE_KEY); } // do a lame \u0026quot;base 64\u0026quot; kind of thing on it // BUG: this is NOT the best way, it's a quick hack to get it working // replace with real BASE64 later for(i = 0; i \u0026lt; (size_t)blength(encname); i++) { int at = encname-\u0026gt;data[i] % blength(\u0026amp;FAUX64); encname-\u0026gt;data[i] = FAUX64.data[at]; } // that's our final hack encrypted name return encname; } bstring sanitize_location(bstring base, bstring path) { bstring attempt = NULL; bstring encpath = NULL; // encrypt armore the name // BUG: ditch encryption, it was dumb encpath = encrypt_armor_name(path); check(encpath != NULL, \u0026quot;Failed to encrypt path name: %s\u0026quot;, bdata(path)); // combine it with the base, this means that we've armored the // path so we can just append it attempt = bformat(\u0026quot;%s/%s\u0026quot;, bdata(base), bdata(encpath)); bdestroy(encpath); return attempt; error: if(encpath) bdestroy(encpath); if(attempt) bdestroy(attempt); return NULL; } int handle_create(Command *cmd, RingBuffer *send_rb, bstring path) { int rc = 0; int is_root = biseq(path, cmd-\u0026gt;name); log_info(\u0026quot;create: %s %s %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(path), bdata(cmd-\u0026gt;number)); Record *info = Hashmap_get(DATA, path); if(info != NULL \u0026amp;\u0026amp; is_root) { // report if root exists, just skip children send_reply(send_rb, \u0026amp;EXISTS); } else if(info != NULL) { debug(\u0026quot;Child %s exists, skipping it.\u0026quot;, bdata(path)); return 0; } else { // new child so make it debug(\u0026quot;create: %s %s\u0026quot;, bdata(path), bdata(cmd-\u0026gt;number)); Record *info = calloc(1, sizeof(Record)); check_mem(info); // set its stat element info-\u0026gt;stat = Stats_create(); check_mem(info-\u0026gt;stat); // set its name element info-\u0026gt;name = bstrcpy(path); check_mem(info-\u0026gt;name); // do a first sample Stats_sample(info-\u0026gt;stat, atof(bdata(cmd-\u0026gt;number))); // add it to the hashmap rc = Hashmap_set(DATA, info-\u0026gt;name, info); check(rc == 0, \u0026quot;Failed to add data to map.\u0026quot;); // only send the for the root part if(is_root) { send_reply(send_rb, \u0026amp;OK); } } return 0; error: return -1; } int handle_sample(Command *cmd, RingBuffer *send_rb, bstring path) { // get the info from the hashmap Record *info = Hashmap_get(DATA, path); int is_root = biseq(path, cmd-\u0026gt;name); log_info(\u0026quot;sample %s %s %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(path), bdata(cmd-\u0026gt;number)); bstring child_path = NULL; if(info == NULL) { // if it doesn't exist then DNE send_reply(send_rb, \u0026amp;DNE); return 0; } else { if(is_root) { // just sample the root like normal Stats_sample(info-\u0026gt;stat, atof(bdata(cmd-\u0026gt;number))); } else { // need to do some hackery to get the child path // for rolling up mean-of-means on it // increase the qty on path up one cmd-\u0026gt;path-\u0026gt;qty++; // get the \u0026quot;child path\u0026quot; (previous path?) child_path = bjoin(cmd-\u0026gt;path, \u0026amp;SLASH); // get that info from the DATA Record *child_info = Hashmap_get(DATA, child_path); bdestroy(child_path); // if it exists then sample on it if(child_info) { // info is /logins, child_info is /logins/zed // we want /logins/zed's mean to be a new sample on /logins Stats_sample(info-\u0026gt;stat, Stats_mean(child_info-\u0026gt;stat)); } // drop the path back to where it was cmd-\u0026gt;path-\u0026gt;qty--; } } // do the reply for the mean last bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); return 0; } int handle_delete(Command *cmd, RingBuffer *send_rb, bstring path) { log_info(\u0026quot;delete: %s\u0026quot;, bdata(cmd-\u0026gt;name)); Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); check(path == NULL \u0026amp;\u0026amp; cmd-\u0026gt;path == NULL, \u0026quot;Should be a recursive command.\u0026quot;); // BUG: should just decide that this isn't scanned // but run once, for now just only run on root if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { Hashmap_delete(DATA, cmd-\u0026gt;name); free(info-\u0026gt;stat); bdestroy(info-\u0026gt;name); free(info); send_reply(send_rb, \u0026amp;OK); } return 0; error: return -1; } int handle_mean(Command *cmd, RingBuffer *send_rb, bstring path) { log_info(\u0026quot;mean: %s %s %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(path), bdata(path)); Record *info = Hashmap_get(DATA, path); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int handle_stddev(Command *cmd, RingBuffer *send_rb, bstring path) { log_info(\u0026quot;stddev: %s %s %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(path), bdata(path)); Record *info = Hashmap_get(DATA, path); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f\\n\u0026quot;, Stats_stddev(info-\u0026gt;stat)); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int handle_dump(Command *cmd, RingBuffer *send_rb, bstring path) { log_info(\u0026quot;dump: %s, %s, %s\u0026quot;, bdata(cmd-\u0026gt;name), bdata(path), bdata(path)); Record *info = Hashmap_get(DATA, path); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { bstring reply = bformat(\u0026quot;%f %f %f %f %ld %f %f\\n\u0026quot;, Stats_mean(info-\u0026gt;stat), Stats_stddev(info-\u0026gt;stat), info-\u0026gt;stat-\u0026gt;sum, info-\u0026gt;stat-\u0026gt;sumsq, info-\u0026gt;stat-\u0026gt;n, info-\u0026gt;stat-\u0026gt;min, info-\u0026gt;stat-\u0026gt;max); send_reply(send_rb, reply); bdestroy(reply); } return 0; } int handle_store(Command *cmd, RingBuffer *send_rb, bstring path) { Record *info = Hashmap_get(DATA, cmd-\u0026gt;name); bstring location = NULL; bstring from = cmd-\u0026gt;name; int rc = 0; int fd = -1; check(cmd != NULL, \u0026quot;Invalid command.\u0026quot;); debug(\u0026quot;store %s\u0026quot;, bdata(cmd-\u0026gt;name)); check(path == NULL \u0026amp;\u0026amp; cmd-\u0026gt;path == NULL, \u0026quot;Store is non-recursive.\u0026quot;); if(info == NULL) { send_reply(send_rb, \u0026amp;DNE); } else { // it exists so we sanitize the name location = sanitize_location(STORE_PATH, from); check(location, \u0026quot;Failed to sanitize the location.\u0026quot;); // open the file we need with EXLOCK fd = open(bdata(location), O_WRONLY | O_CREAT | O_EXLOCK, S_IRWXU); check(fd \u0026gt;= 0, \u0026quot;Cannot open file for writing: %s\u0026quot;, bdata(location)); // write the Stats part of info to it rc = write(fd, info-\u0026gt;stat, sizeof(Stats)); check(rc == sizeof(Stats), \u0026quot;Failed to write to %s\u0026quot;, bdata(location)); // close, which should release the lock close(fd); // then send OK send_reply(send_rb, \u0026amp;OK); } return 0; error: if(fd \u0026lt; 0) close(fd); return -1; } int handle_load(Command *cmd, RingBuffer *send_rb, bstring path) { bstring to = cmd-\u0026gt;arg; bstring from = cmd-\u0026gt;name; bstring location = NULL; Record *info = Hashmap_get(DATA, to); int fd = -1; check(path == NULL \u0026amp;\u0026amp; cmd-\u0026gt;path == NULL, \u0026quot;Load is non-recursive.\u0026quot;); if(info != NULL) { // don't do it if the target to exists send_reply(send_rb, \u0026amp;EXISTS); } else { location = sanitize_location(STORE_PATH, from); check(location, \u0026quot;Failed to sanitize location.\u0026quot;); // make a new record for the to target // TODO: make regular CRUD methods for Record info = calloc(1, sizeof(Record)); check_mem(info); info-\u0026gt;stat = calloc(1, sizeof(Stats)); check_mem(info-\u0026gt;stat); // open the file to read from readonly and locked fd = open(bdata(location), O_RDONLY | O_EXLOCK); check(fd \u0026gt;= 0, \u0026quot;Error opening file: %s\u0026quot;, bdata(location)); // read into the stats record int rc = read(fd, info-\u0026gt;stat, sizeof(Stats)); check(rc == sizeof(Stats), \u0026quot;Failed to read record at %s\u0026quot;, bdata(location)); // close so we release the lock quick close(fd); // make a copy of to as the name for the info info-\u0026gt;name = bstrcpy(to); check_mem(info-\u0026gt;name); // put it in the hashmap rc = Hashmap_set(DATA, info-\u0026gt;name, info); check(rc == 0, \u0026quot;Failed to ass to data map: %s\u0026quot;, bdata(info-\u0026gt;name)); // and send the reply send_reply(send_rb, \u0026amp;OK); } return 0; error: if(fd \u0026lt; 0) close(fd); return -1; } int parse_command(struct bstrList *splits, Command *cmd) { check(splits != NULL, \u0026quot;Invalid split line.\u0026quot;); // get the command cmd-\u0026gt;command = splits-\u0026gt;entry[0]; if(biseq(cmd-\u0026gt;command, \u0026amp;CREATE)) { check(splits-\u0026gt;qty == 3, \u0026quot;Failed to parse create: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;number = splits-\u0026gt;entry[2]; cmd-\u0026gt;handler = handle_create; cmd-\u0026gt;path = parse_name(cmd-\u0026gt;name); } else if(biseq(cmd-\u0026gt;command, \u0026amp;MEAN)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse mean: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_mean; cmd-\u0026gt;path = parse_name(cmd-\u0026gt;name); } else if(biseq(cmd-\u0026gt;command, \u0026amp;SAMPLE)) { check(splits-\u0026gt;qty == 3, \u0026quot;Failed to parse sample: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;number = splits-\u0026gt;entry[2]; cmd-\u0026gt;handler = handle_sample; cmd-\u0026gt;path = parse_name(cmd-\u0026gt;name); } else if(biseq(cmd-\u0026gt;command, \u0026amp;DUMP)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse dump: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_dump; cmd-\u0026gt;path = parse_name(cmd-\u0026gt;name); } else if(biseq(cmd-\u0026gt;command, \u0026amp;DELETE)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse delete: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_delete; cmd-\u0026gt;path = NULL; } else if(biseq(cmd-\u0026gt;command, \u0026amp;STDDEV)) { check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse stddev: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_stddev; cmd-\u0026gt;path = parse_name(cmd-\u0026gt;name); } else if(biseq(cmd-\u0026gt;command, \u0026amp;STORE)) { // store URL check(splits-\u0026gt;qty == 2, \u0026quot;Failed to parse store: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;handler = handle_store; cmd-\u0026gt;path = NULL; } else if(biseq(cmd-\u0026gt;command, \u0026amp;LOAD)) { // load FROM TO check(splits-\u0026gt;qty == 3, \u0026quot;Failed to parse load: %d\u0026quot;, splits-\u0026gt;qty); cmd-\u0026gt;name = splits-\u0026gt;entry[1]; cmd-\u0026gt;arg = splits-\u0026gt;entry[2]; cmd-\u0026gt;handler = handle_load; cmd-\u0026gt;path = NULL; } else { sentinel(\u0026quot;Failed to parse the command.\u0026quot;); } return 0; error: return -1; } int scan_paths(Command *cmd, RingBuffer *send_rb) { check(cmd-\u0026gt;path != NULL, \u0026quot;Path was not set in command.\u0026quot;); int rc = 0; // save the original path length size_t qty = cmd-\u0026gt;path-\u0026gt;qty; // starting at the longest path, shorten it and call // for each one: for(; cmd-\u0026gt;path-\u0026gt;qty \u0026gt; 1; cmd-\u0026gt;path-\u0026gt;qty--) { // remake the path with / again bstring path = bjoin(cmd-\u0026gt;path, \u0026amp;SLASH); // call the handler with the path rc = cmd-\u0026gt;handler(cmd, send_rb, path); // if the handler returns != 0 then abort and return that bdestroy(path); if(rc != 0) break; } // restore path length cmd-\u0026gt;path-\u0026gt;qty = qty; return rc; error: return -1; } struct bstrList *parse_name(bstring name) { return bsplits(name, \u0026amp;SLASH); } int parse_line(bstring data, RingBuffer *send_rb) { int rc = -1; Command cmd = {.command = NULL}; // split data on line boundaries struct bstrList *splits = bsplits(data, \u0026amp;LINE_SPLIT); check(splits != NULL, \u0026quot;Bad data.\u0026quot;); // parse it into a command rc = parse_command(splits, \u0026amp;cmd); check(rc == 0, \u0026quot;Failed to parse command.\u0026quot;); // scan the path and call the handlers if(cmd.path) { check(cmd.path-\u0026gt;qty \u0026gt; 1, \u0026quot;Didn't give a valid URL.\u0026quot;); rc = scan_paths(\u0026amp;cmd, send_rb); check(rc == 0, \u0026quot;Failure running recursive command against path: %s\u0026quot;, bdata(cmd.name)); bstrListDestroy(cmd.path); } else { rc = cmd.handler(\u0026amp;cmd, send_rb, NULL); check(rc == 0, \u0026quot;Failed running command against path: %s\u0026quot;, bdata(cmd.name)); } bstrListDestroy(splits); return 0; error: // fallthrough if(cmd.path) bstrListDestroy(cmd.path); if(splits) bstrListDestroy(splits); return -1; } void client_handler(int client_fd) { int rc = 0; RingBuffer *recv_rb = RingBuffer_create(RB_SIZE); RingBuffer *send_rb = RingBuffer_create(RB_SIZE); check_mem(recv_rb); check_mem(send_rb); // keep reading into the recv buffer and sending on send while(read_some(recv_rb, client_fd, 1) != -1) { // read a line from the recv_rb bstring data = read_line(recv_rb, LINE_ENDING); check(data != NULL, \u0026quot;Client closed.\u0026quot;); // parse it, close on any protocol errors rc = parse_line(data, send_rb); bdestroy(data); // cleanup here check(rc == 0, \u0026quot;Failed to parse user. Closing.\u0026quot;); // and as long as there's something to send, send it if(RingBuffer_available_data(send_rb)) { write_some(send_rb, client_fd, 1); } } // close the socket rc = close(client_fd); check(rc != -1, \u0026quot;Failed to close the socket.\u0026quot;); error: // fallthrough if(recv_rb) RingBuffer_destroy(recv_rb); if(send_rb) RingBuffer_destroy(send_rb); exit(0); // just exit the child process } int setup_data_store(const char *store_path) { // a more advanced design simply wouldn't use this DATA = Hashmap_create(NULL, NULL); check_mem(DATA); char *path = realpath(store_path, NULL); check(path != NULL, \u0026quot;Failed to get the real path for storage: %s\u0026quot;, store_path); STORE_PATH = bfromcstr(path); free(path); return 0; error: return -1; } int run_server(const char *host, const char *port, const char *store_path) { int rc = 0; struct sockaddr_in client_addr; socklen_t sin_size = sizeof(client_addr); int server_socket = 0; int client_fd = 0; rc = setup_data_store(store_path); check(rc == 0, \u0026quot;Failed to setup the data store.\u0026quot;); struct sigaction sa = { .sa_handler = handle_sigchild, .sa_flags = SA_RESTART | SA_NOCLDSTOP }; check(host != NULL, \u0026quot;Invalid host.\u0026quot;); check(port != NULL, \u0026quot;Invalid port.\u0026quot;); // create a sigaction that handles SIGCHLD sigemptyset(\u0026amp;sa.sa_mask); rc = sigaction(SIGCHLD, \u0026amp;sa, 0); check(rc != -1, \u0026quot;Failed to setup signal handler for child processes.\u0026quot;); // listen on the given port and host server_socket = server_listen(host, port); check(server_socket \u0026gt;= 0, \u0026quot;bind to %s:%s failed.\u0026quot;, host, port); while(1) { // accept the connection client_fd = accept(server_socket, (struct sockaddr *)\u0026amp;client_addr, \u0026amp;sin_size); check(client_fd \u0026gt;= 0, \u0026quot;Failed to accept connection.\u0026quot;); debug(\u0026quot;Client connected.\u0026quot;); rc = fork(); if(rc == 0) { // child process close(server_socket); // don't need this // handle the client client_handler(client_fd); } else { // server process close(client_fd); // don't need this } } error: // fallthrough return -1; }  .\\ex51b\\statserve\\src\\statserve.h\n#ifndef _statserve_h #define _statserve_h #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;lcthw/stats.h\u0026gt; struct Command; typedef int (*handler_cb)(struct Command *cmd, RingBuffer *send_rb, bstring path); typedef struct Command { bstring command; bstring name; struct bstrList *path; bstring number; bstring arg; handler_cb handler; } Command; typedef struct Record { bstring name; Stats *stat; } Record; struct tagbstring OK; int setup_data_store(const char *store_path); struct bstrList *parse_name(bstring name); int scan_paths(Command *cmd, RingBuffer *send_rb); int parse_line(bstring data, RingBuffer *send_rb); int run_server(const char *host, const char *port, const char *store_path); bstring sanitize_location(bstring base, bstring path); bstring encrypt_armor_name(bstring name); #endif  .\\ex51b\\statserve\\tests\\statserve_tests.c\n#include \u0026quot;minunit.h\u0026quot; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026quot;statserve.h\u0026quot; #include \u0026lt;lcthw/bstrlib.h\u0026gt; #include \u0026lt;lcthw/ringbuffer.h\u0026gt; #include \u0026lt;assert.h\u0026gt; typedef struct LineTest { char *line; bstring result; char *description; } LineTest; int attempt_line(LineTest test) { int rc = -1; bstring result = NULL; bstring line = bfromcstr(test.line); RingBuffer *send_rb = RingBuffer_create(1024); rc = parse_line(line, send_rb); check(rc == 0, \u0026quot;Failed to parse line.\u0026quot;); result = RingBuffer_get_all(send_rb); check(result != NULL, \u0026quot;Ring buffer empty.\u0026quot;); check(biseq(result, test.result), \u0026quot;Got the wrong output: %s expected %s\u0026quot;, bdata(result), bdata(test.result)); bdestroy(line); RingBuffer_destroy(send_rb); return 1; // using 1 for tests error: log_err(\u0026quot;Failed to process test %s: got %s\u0026quot;, test.line, bdata(result)); if(line) bdestroy(line); if(send_rb) RingBuffer_destroy(send_rb); return 0; } int run_test_lines(LineTest *tests, int count) { int i = 0; for(i = 0; i \u0026lt; count; i++) { check(attempt_line(tests[i]), \u0026quot;Failed to run %s\u0026quot;, tests[i].description); } return 1; error: return 0; } int fake_command(Command *cmd, RingBuffer *send_rb, bstring path) { check(cmd != NULL, \u0026quot;Bad cmd.\u0026quot;); check(cmd-\u0026gt;path != NULL, \u0026quot;Bad path.\u0026quot;); check(send_rb != NULL, \u0026quot;Bad send_rb.\u0026quot;); check(path != NULL, \u0026quot;Bad path given.\u0026quot;); return 0; error: return -1; } char *test_path_parsing() { struct bstrList *result = NULL; struct tagbstring slash = bsStatic(\u0026quot;/\u0026quot;); struct tagbstring logins_zed = bsStatic(\u0026quot;/logins/zed\u0026quot;); struct tagbstring command_name = bsStatic(\u0026quot;dump\u0026quot;); RingBuffer *send_rb = RingBuffer_create(1024); struct bstrList *path = bsplits(\u0026amp;logins_zed, \u0026amp;slash); int rc = 0; Command fake = { .command = \u0026amp;command_name, .name = \u0026amp;logins_zed, .number = NULL, .handler = fake_command, .path = path }; result = parse_name(\u0026amp;logins_zed); mu_assert(result != NULL, \u0026quot;Failed to parse /logins/zed\u0026quot;); rc = scan_paths(\u0026amp;fake, send_rb); mu_assert(rc != -1, \u0026quot;scan_paths failed.\u0026quot;); return NULL; } char *test_create() { LineTest tests[] = { {.line = \u0026quot;create /zed 100\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;create zed failed\u0026quot;}, {.line = \u0026quot;create /joe 100\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;create joe failed\u0026quot;}, }; mu_assert(run_test_lines(tests, 2), \u0026quot;Failed to run create tests.\u0026quot;); return NULL; } char *test_sample() { struct tagbstring sample1 = bsStatic(\u0026quot;100.000000\\n\u0026quot;); LineTest tests[] = { {.line = \u0026quot;sample /zed 100\u0026quot;, .result = \u0026amp;sample1, .description = \u0026quot;sample zed failed.\u0026quot;} }; mu_assert(run_test_lines(tests, 1), \u0026quot;Failed to run sample tests.\u0026quot;); return NULL; } char *test_store_load() { LineTest tests[] = { {.line = \u0026quot;delete /zed\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;delete zed failed\u0026quot;}, {.line = \u0026quot;create /zed 100\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;create zed failed\u0026quot;}, {.line = \u0026quot;store /zed\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;store zed failed\u0026quot;}, {.line = \u0026quot;load /zed /sam\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;load zed failed\u0026quot;}, {.line = \u0026quot;delete /sam\u0026quot;, .result = \u0026amp;OK, .description = \u0026quot;load zed failed\u0026quot;}, }; mu_assert(run_test_lines(tests, 3), \u0026quot;Failed to run sample tests.\u0026quot;); return NULL; } char *test_encrypt_armor_name() { struct tagbstring test1 = bsStatic(\u0026quot;/logins\u0026quot;); struct tagbstring expect1 = bsStatic(\u0026quot;vtmTmzNI\u0026quot;); struct tagbstring test2 = bsStatic(\u0026quot;../../../../../../../../etc/passwd\u0026quot;); struct tagbstring expect2 = bsStatic(\u0026quot;pVOBpFjHEIhB7cuT3BGUvyZGn3lvyj226mgggggg\u0026quot;); bstring result = encrypt_armor_name(\u0026amp;test1); debug(\u0026quot;Got encrypted name %s\u0026quot;, bdata(result)); mu_assert(biseq(result, \u0026amp;expect1), \u0026quot;Failed to encrypt test2.\u0026quot;); bdestroy(result); result = encrypt_armor_name(\u0026amp;test2); debug(\u0026quot;Got encrypted name %s\u0026quot;, bdata(result)); mu_assert(biseq(result, \u0026amp;expect2), \u0026quot;Failed to encrypt test2.\u0026quot;); bdestroy(result); return NULL; } char *test_path_sanitize_armor() { struct tagbstring base = bsStatic(\u0026quot;/tmp\u0026quot;); struct tagbstring test1 = bsStatic(\u0026quot;/somepath/here/there\u0026quot;); bstring encname = encrypt_armor_name(\u0026amp;test1); bstring expect = bformat(\u0026quot;%s/%s\u0026quot;, bdata(\u0026amp;base), bdata(encname)); struct tagbstring test2 = bsStatic(\u0026quot;../../../../../../../../etc/passwd\u0026quot;); bstring result = sanitize_location(\u0026amp;base, \u0026amp;test1); mu_assert(result != NULL, \u0026quot;Failed to sanitize path.\u0026quot;); mu_assert(biseq(result, expect), \u0026quot;failed to sanitize test1\u0026quot;); // this should be pulled up into a tester function // BUG: just get rid of this and use md5 encname = encrypt_armor_name(\u0026amp;test2); expect = bformat(\u0026quot;%s/%s\u0026quot;, bdata(\u0026amp;base), bdata(encname)); result = sanitize_location(\u0026amp;base, \u0026amp;test2); mu_assert(result != NULL, \u0026quot;Failed to sanitize path.\u0026quot;); mu_assert(biseq(result, expect), \u0026quot;failed to sanitize test1\u0026quot;); return NULL; } char *all_tests() { mu_suite_start(); int rc = setup_data_store(\u0026quot;/tmp\u0026quot;); mu_assert(rc == 0, \u0026quot;Failed to setup the data store.\u0026quot;); mu_run_test(test_path_parsing); mu_run_test(test_encrypt_armor_name); mu_run_test(test_path_sanitize_armor); mu_run_test(test_create); mu_run_test(test_sample); mu_run_test(test_store_load); return NULL; } RUN_TESTS(all_tests);  Final Review\n"
},
{
	"uri": "/tags/c/",
	"title": "C#",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/coding/c-sharp/",
	"title": "C#",
	"tags": ["c#", "csharp"],
	"description": "",
	"content": "\r\rC# Note - 1\rHow to create C# console application without Visual Studio\n\r\rC# Note - 2\rHow to build a configurable scheduled task on Window Service?\n\r\r"
},
{
	"uri": "/coding/c-sharp/csharp-note-1/",
	"title": "C# Note - 1",
	"tags": ["C#"],
	"description": "How to create C# console application without Visual Studio",
	"content": " Prerequisites  .Net Framework has been install to your PC or laptop\n Create simple .net project without Visual Studio Prerequisites  The version of .Net Framework on your PC is 2.0+ or later Assume the path of .Net Frameowork is c:\\Windows\\Microsfot.Net\\Frameowork\\v2.0.50727  Simple C# project Create a proejct named csharp-project md csharp-project cd csharp-project md bin src echo.\u0026gt;csharp-project.proj echo.\u0026gt;src\\helloworld.cs  Open Project configuration csharp-project.proj with notepad \u0026lt;Project DefaultTargets = \u0026quot;Compile\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/developer/msbuild/2003\u0026quot; \u0026gt; \u0026lt;!-- Set the application name as a property --\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;appname\u0026gt;csharp-app\u0026lt;/appname\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;!-- Specify the inputs by type and file name --\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;CSFile Include = \u0026quot;src\\helloworld.cs\u0026quot;/\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;Target Name = \u0026quot;Compile\u0026quot;\u0026gt; \u0026lt;!-- Run the Visual C# compilation using input files of type CSFile --\u0026gt; \u0026lt;CSC Sources = \u0026quot;@(CSFile)\u0026quot; OutputAssembly = \u0026quot;bin\\$(appname).exe\u0026quot;\u0026gt; \u0026lt;!-- Set the OutputAssembly attribute of the CSC task to the name of the executable file that is created --\u0026gt; \u0026lt;Output TaskParameter = \u0026quot;OutputAssembly\u0026quot; ItemName = \u0026quot;EXEFile\u0026quot; /\u0026gt; \u0026lt;/CSC\u0026gt; \u0026lt;!-- Log the file name of the output file --\u0026gt; \u0026lt;Message Text=\u0026quot;The output file is @(EXEFile)\u0026quot;/\u0026gt; \u0026lt;/Target\u0026gt; \u0026lt;/Project\u0026gt;  Create a new file named HelloWorld.cs and copy following coding to the new file public class Hello { public static void Main() { System.Console.WriteLine(\u0026quot;Hello, World!\u0026quot;); } }  Compile with MSBuild \u0026amp; Run c:\\Windows\\Microsfot.Net\\Frameowork\\v2.0.50727\\MSBuild bin\\csharp-app.exe  Generic Predicate and Expression for query Prerequisites  You have experience of developing .net application, which includes entity framework.\nYou have experience of using SQL to query database\n Problem Now entity framework is core component in all .net applications, which need to communicate with database.\nBusiness service get a lot of benefits form entity framework\u0026rsquo;s ORM feature, and we can create a repository layer on the top of ORM to reduce some simple but tedious database operation, such as, delete, insert, query all data. However, when we need to do some complicated query to support business service, we still need to take so much effort to achieve the query result, because entity framework use LINQ as query language, comparing with SQL, native database language, it is a bit more complicated and cumbersome. Luckily, entity framework provide another generic feature to help us DRY. Predicate and expression can help us create generic query and reduce many reduntant code.\nSolution Analysis Basically, the idea is close to dynamic statement in ADO.Net. Here generic programming is the key, when we utilize predicate and expression to dynamically rebuild the query filter.\nIf we look into the queries, we will find 80% of queries can be abstracted as following syntax. Now it is easy to see how generic predicate and expression can support this syntax.\nSELECT * FROM TABLE_A WHERE \u0026lt;FIELD_1\u0026gt; [=|\u0026lt;|\u0026gt;|\u0026gt;=|\u0026lt;=|LIKE] \u0026lt;VALUE_1\u0026gt; ----- Expression [ AND | OR ] ------------ Predicate \u0026lt;FIELD_2\u0026gt; [=|\u0026lt;|\u0026gt;|\u0026gt;=|\u0026lt;=|LIKE] \u0026lt;VALUE_2\u0026gt; ----- Expression  The next step we can look into the Expression, actually the FIELD_1 is the property of entity object, and VALUE_1 is the filter value entered by client. How to use the filter to narrow down the query result is part of business logic, which is handled by developer.\n\u0026lt;FIELD_1\u0026gt; ==\u0026gt; Entity property [=|\u0026lt;|\u0026gt;|\u0026gt;=|\u0026lt;=|LIKE] ==\u0026gt; Operator \u0026lt;VALUE_1\u0026gt; ==\u0026gt; Filter value  Design Accordingt to abve analysis, we can design the classes to support this feature.\n+--------------+ | Filter | +--------------+ | Property | --- Map to the column (table) or property (entity) | Op | --- Operator , e.g. Equals, Contains, GreaterThan, tec. | Val | --- Value entered by client +--------------+ +----------------------+ | ExpressionBuilder | +----------------------+ |GetExpression( filer) | --------- Create expression by input filter + ---------------------+ +------------------+ | PredicateBuilder | +------------------+ | And(exp1, exp2) | --- Use AND to combine two expressions | Or(exp1, exp2) | --- Use OR to combine two expressions +------------------+  Implementatoin Following is the implementation of generic expression and predicate. Please keep it in mind. We are using LINQ to simulate the dynamic statement, so there is some tricks to work around as SQL queries.\nFilter\nThe Op property should be\npublic class Filter { public string Property { get; set; } public string Op { get; set; } public object Val { get; set; } }  Op\nThis class can be replaced by Enum if you want.\npublic static class Op { public const string Equals = \u0026quot;Equals\u0026quot;; public const string GreaterThan = \u0026quot;GreaterThan\u0026quot;; public const string LessThan = \u0026quot;LessThan\u0026quot;; public const string GreaterThanOrEqual = \u0026quot;GreaterThanOrEqual\u0026quot;; public const string LessThanOrEqual = \u0026quot;LessThanOrEqual\u0026quot;; public const string Contains = \u0026quot;Contains\u0026quot;; public const string StartsWith = \u0026quot;StartsWith\u0026quot;; public const string EndsWith = \u0026quot;EndsWith\u0026quot;; }  ExpressionBuilder\nThis class takes care of Expression with Filter object.\nusing System; using System.Linq; using System.Linq.Expressions; using System.Collections.Generic; public class ExpressionBuilder { private static MethodInfo containsMethod = typeof(string).GetMethod(\u0026quot;Contains\u0026quot;); private static MethodInfo startsWithMethod = typeof(string).GetMethod(\u0026quot;StartsWith\u0026quot;, new Type[] { typeof(string) }); private static MethodInfo endsWithMethod = typeof(string).GetMethod(\u0026quot;EndsWith\u0026quot;, new Type[] { typeof(string) }); public static Expression\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt; GetExpression\u0026lt;T\u0026gt;(IList\u0026lt;Filter\u0026gt; filters) { if (filters.Count == 0) return null; ParameterExpression param = Expression.Parameter(typeof(T), \u0026quot;t\u0026quot;); Expression exp = null; if (filters.Count == 1) exp = GetExpression\u0026lt;T\u0026gt;(param, filters[0]); else if (filters.Count == 2) exp = GetExpression\u0026lt;T\u0026gt;(param, filters[0], filters[1]); else { while (filters.Count \u0026gt; 0) { var f1 = filters[0]; var f2 = filters[1]; if (exp == null) exp = GetExpression\u0026lt;T\u0026gt;(param, filters[0], filters[1]); else exp = Expression.AndAlso( exp, GetExpression\u0026lt;T\u0026gt;(param, filters[0], filters[1])); filters.Remove(f1); filters.Remove(f2); if (filters.Count == 1) { exp = Expression.AndAlso( exp, GetExpression\u0026lt;T\u0026gt;(param, filters[0])); filters.RemoveAt(0); } } } return Expression.Lambda\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt;(exp, param); } private static ConstantExpression ConvetValueType( MemberExpression member, object value) { if (member.Type == typeof(int)) { value = int.Parse(value.ToString()); } else if (member.Type == typeof(decimal)) { value = decimal.Parse(value.ToString()); } else if (member.Type == typeof(float)) { value = float.Parse(value.ToString()); } else if (member.Type == typeof(double)) { value = double.Parse(value.ToString()); } return Expression.Constant(value); } private static Expression GetExpression\u0026lt;T\u0026gt;( ParameterExpression param, Filter filter) { MemberExpression member = Expression.Property( param, filter.Property); switch (filter.Op) { case Op.Equals: return Expression.Equal( member, Expression.Constant(filter.Val, member.Type)); case Op.GreaterThan: return Expression.GreaterThan( member, ConvetValueType(member, filter.Val)); case Op.GreaterThanOrEqual: return Expression.GreaterThanOrEqual( member, ConvetValueType(member, filter.Val)); case Op.LessThan: return Expression.LessThan( member, ConvetValueType(member, filter.Val)); case Op.LessThanOrEqual: return Expression.LessThanOrEqual( member, ConvetValueType(member, filter.Val)); case Op.Contains: return Expression.Call( member, containsMethod, Expression.Constant(filter.Val, member.Type)); case Op.StartsWith: return Expression.Call( member, startsWithMethod, Expression.Constant( filter.Val, member.Type)); case Op.EndsWith: return Expression.Call( member, endsWithMethod, Expression.Constant(filter.Val, member.Type)); } return null; } private static BinaryExpression GetExpression\u0026lt;T\u0026gt;(\\ ParameterExpression param, Filter filter1, Filter filter2) { Expression bin1 = GetExpression\u0026lt;T\u0026gt;(param, filter1); Expression bin2 = GetExpression\u0026lt;T\u0026gt;(param, filter2); return Expression.AndAlso(bin1, bin2); } }  PredicateBuilder\nThis class manages all expressions to support dynamic statement query.\nusing System; using System.Linq; using System.Linq.Expressions; using System.Collections.Generic; public static class PredicateBuilder { public static Expression\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt; True\u0026lt;T\u0026gt;() { return f =\u0026gt; true; } public static Expression\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt; False\u0026lt;T\u0026gt;() { return f =\u0026gt; false; } public static Expression\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt; Or\u0026lt;T\u0026gt;( this Expression\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt; expr1, Expression\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt; expr2) { var secondBody = expr2.Body.Replace( expr2.Parameters[0], expr1.Parameters[0]); return Expression.Lambda\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt;( Expression.OrElse(expr1.Body, secondBody), expr1.Parameters); } public static Expression\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt; And\u0026lt;T\u0026gt;( this Expression\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt; expr1, Expression\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt; expr2) { var secondBody = expr2.Body.Replace( expr2.Parameters[0], expr1.Parameters[0]); return Expression.Lambda\u0026lt;Func\u0026lt;T, bool\u0026gt;\u0026gt; ( Expression.AndAlso(expr1.Body, secondBody), expr1.Parameters); } public static Expression Replace( this Expression expression, Expression searchEx, Expression replaceEx) { return new ReplaceVisitor(searchEx, replaceEx).Visit(expression); } internal class ReplaceVisitor : ExpressionVisitor { private readonly Expression from, to; public ReplaceVisitor(Expression from, Expression to) { this.from = from; this.to = to; } public override Expression Visit(Expression node) { return node == from ? to : base.Visit(node); } } }  "
},
{
	"uri": "/coding/c-sharp/csharp-note-2/",
	"title": "C# Note - 2",
	"tags": ["CSharp"],
	"description": "How to build a configurable scheduled task on Window Service?",
	"content": " Problem  Set up the some scheduled tasks running in the backgroud to take care of data update or sync for every 15 mins, or everyday or every week\n Solution Option 1 Windows Task Scheduler  Click the Start button. Click Control Panel. Click System and Maintenance. Click Administrative Tools. Double-click Task Scheduler.  Option 2 Use Window Service as task scheduler Overview of design The design here is a simplified version, which I built for previous projects. In the real world, I need to tailor it for different project with different purpose, but fundamental design of architect is the same. IMO, the design below can support most cases, which needs scheduled backgroud task service.\n+----------------------------------+ Register as | System.ServiceProces ----- |--------o Window Service +----------------------------------+ | +----------------------------+ | | | Thread (Infinite) | | | +----------------------------+ | | | +----------------------+ | | | | | MySchedulerService | | | | | +----------------------+ | | | | | while ( true ) | | | | | | { | | | | | | Task.Process() | | | | | | } | | | | | +----------------------+ | | | +----------------------------+ | +----------------------------------+ +------------+ | ITask | +------------+ | Process() | +------------+ /|\\ | +------------------+ | BaseTask | -----------o Customized Task inherit BaseTask +------------------+ | lastProcessTime | ------------o Last process time | intervalTime | ------------o Customize for next process time | IsReadyProcess() | ------------o Check taks is ready to process +------------------+  Create customized Window Service Use ServiceProcess to create Window Service  The System.ServiceProcess allow you to implement, install, and control Windows service applications. Services are long-running executables that run without a user interface. The project must have main method the entry point  namespace MyScheduler { using System.ServiceProcess; class Program { static void Main(string[] args) { #if DEBUG MySchedulerService debugService = new MySchedulerService(); debugService.onDebug(); System.Threading.Thread.Sleep(System.Threading.Timeout.Infinite); #else ServiceBase.Run(new ServiceBase[] { new MySchedulerService() }); #endif } } }  Create customized ServiceBase  Implementing a service involves inheriting from the ServiceBase class and defining specific behavior to process when start, stop, pause, and continue commands are passed in, as well as custom behavior and actions to take when the system shuts down.  namespace MyScheduler { using System; using System.IO; using System.Collections.Generic; using System.Threading; public partial class MySchedulerService : System.ServiceProcess.ServiceBase { public const string START_SERVICE = \u0026quot;start.service\u0026quot;; public const string STOP_SERVICE = \u0026quot;stop.service\u0026quot;; public void onDebug() { OnStart(null); } protected override void OnStart(string[] args) { System.IO.File.Create(AppDomain.CurrentDomain.BaseDirectory + TART_SERVICE); ThreadStart tsTask = new ThreadStart(TaskLoop); Thread rtkTask = new Thread(tsTask); rtkTask.Start(); } static void TaskLoop() { while (true) { // Exceute scheduled task ScheduledTask(); // Then, wait for certain time interval System.Threading.Thread.Sleep(TimeSpan.FromMilliseconds(500)); } } static void ScheduledTask() { // Task code which is executed periodically try { // Call customized tasks var types = Assembly.GetExecutingAssembly() .GetExportedTypes() .Where(p =\u0026gt; typeof(ITask) .IsAssignableFrom(p.BaseType)); foreach (var t in types) { var task = (ITask)Activator.CreateInstance(t); if (taskSettings.Keys.Contains(t.Name)) { task.TaskSetting = taskSettings[t.Name]; } tasks.Add(task); } } catch (Exception e) { // TO Something here } } protected override void OnStop() { // Insert code here to close all the open IO or conection. System.IO.File.Create(AppDomain.CurrentDomain.BaseDirectory + STOP_SERVICE); } private void InitializeComponent() { this.ServiceName = \u0026quot;MySchedulerService\u0026quot;; } protected override void Dispose(bool disposing) { OnStop(); base.Dispose(disposing); } } }  Task interface and class  interface ITask has only one method  namespace MyScheduler { public interface ITask { void Process(); } }   BaseTask  namespace MyScheduler { using System; public class BaseTask : ITask { protected DateTime? lastProcessTime = null; // interval time uses second as unit // e.g. 1 min of intervaling time is 60 protected int intervalTime = 0 ; protected bool IsReadyToProcess() { bool isReadyToProcess = true; if (lastProcessTime.HasValue) { if (lastProcessTime.Value.AddSeconds(intervalTime) \u0026gt; DateTime.Now) { isReadyToProcess = false; } } return isReadyToProcess; } public virtual void Process() { throw new NotImplementedException(); } } }   Sample Task1 and Task2  Task1\nnamespace MyScheduler { using System; using System.Linq; using System.Data.Entity; public class Task1 : BaseTask { public override void Process() { if (base.IsReadyToProcess()) { System.IO.File.Create(AppDomain.CurrentDomain.BaseDirectory + \u0026quot;Task-1-\u0026quot; + DateTime.Now.ToString(\u0026quot;dd-MM-yyyy\u0026quot;)); } } } }  Task2\nnamespace MyScheduler { using System; using System.Linq; using System.Data.Entity; public class Task2 : BaseTask { public override void Process() { if (base.IsReadyToProcess()) { System.IO.File.Create(AppDomain.CurrentDomain.BaseDirectory + \u0026quot;Task-2-\u0026quot; + DateTime.Now.ToString(\u0026quot;dd-MM-yyyy\u0026quot;)); } } } }  Create Window Service installer  In Solution Explorer, double-click MyScheduledService.cs. In the Code Editor window, right-click Design View, and then click Properties In the Properties pane, click the Add Installer link. In the Properties pane for MyScheduledServiceInstaller, change the ServiceNameproperty to MyScheduledService. In the Code Editor window in Design view, click MyScheduledServiceProcessInstaller. In the Properties pane, change the Account property to LocalSystem (The LocalService and NetworkService values are available only in Microsoft Windows XP).  PreInstaller\n It inherits from System.Configuration.Install.Installer. This is the base class for all custom installers in the .NET Framework. Installers are components that help install applications on a computer.  namespace MyScheduler { [RunInstaller(true)] public partial class ProjectInstaller : System.Configuration.Install.Installer { public ProjectInstaller() { InitializeComponent(); } private void MySchedulerServiceInstaller_AfterInstall( object sender, InstallEventArgs e) { } } }  Install Window Service C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\InstallUtil.exe /i \u0026lt;app_path\u0026gt;\\MyScheduler.exe  Uninstall Window Service C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\InstallUtil.exe /u \u0026lt;app_path\u0026gt;\\MyScheduler.exe  "
},
{
	"uri": "/coding/c-sharp/csharp-note-3/",
	"title": "C# Note - 3",
	"tags": [],
	"description": "",
	"content": " C# Thread \u0026amp; Task  From Net 4.0, .Net applicatoin introduced Parallel Framework Extensions (PFx), along the way it delivered an entirely new model for async processing in .NET. In .NET 4.0 the thread pool queue was redesigned with the new requirements of PFx in mind. Instead of using a simple linked list, the queue was built with arrays of work items with the arrays connected into a linked list.\nWith the release of .NET 4.0, Microsoft introduced yet another API for building asynchronous applications: the Task Parallel Library (TPL).\n Old way of C# thread  Early days of .NET applications you will see many following sample codes.  Lock keyword lock(stateGuard) { cash += amount; receivables -= amount; }  Abort Thread.Abort should be avoid at all costs. Its behavior is much safer and predictable since .NET 2.0, but there are still some pretty serious pitfalls with it. The other ways to stop thread. * Use Thread.Interrupt * Use a stopping flag * Use WaitHandle events\nNew way of C# Async \u0026amp; Thread Monitor  Monitor is no different from lock but the monitor class provides more control over the synchronization of various threads trying to access the same lock of code.\n Lock and Monitor sample\n  class Program { static readonly object _object = new object(); public static void PrintNumbers() { Monitor.Enter(_object); try { for (int i = 0; i \u0026lt; 5; i++) { Thread.Sleep(100); Console.Write(i + \u0026quot;,\u0026quot;); } Console.WriteLine(); } finally { Monitor.Exit(_object); } } static void TestLock() { lock (_object) { Thread.Sleep(100); Console.WriteLine(Environment.TickCount); } } static void Main(string[] args) { Thread[] Threads = new Thread[3]; for (int i = 0; i \u0026lt; 3; i++) { Threads[i] = new Thread(new ThreadStart(PrintNumbers)); Threads[i].Name = \u0026quot;Child \u0026quot; + i; } foreach (Thread t in Threads) t.Start(); Console.ReadLine(); } }   Once you have a lock on a code region, you can use the Monitor.Wait, Monitor.Pulse, and Monitor.PulseAll methods.\n Lock and monitor are basically used for the same purpose in multithreading, the difference is that only when we want more control over synchronization with multiple threads running for a specific section of code.\n  Monitor Semaphore public class MonitorSemaphore { private int currentCount; private readonly int maxCount; private readonly object guard = new object(); public MonitorSemaphore(int initialCount, int maxCount) { this.currentCount = initialCount; this.maxCount = maxCount; } public void Enter() { lock (guard) { while (currentCount == maxCount) { Monitor.Wait(guard); } currentCount++; } } public void Exit() { lock (guard) { currentCount--; Monitor.Pulse(guard); } } public int CurrentCount{get { return currentCount; }} }  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/centos/",
	"title": "Centos",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/cmd/",
	"title": "Cmd",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/code/",
	"title": "Code",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/coding/",
	"title": "Coding",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/coding/",
	"title": "Coding",
	"tags": ["coding", "code"],
	"description": "",
	"content": "\r\rC / C\u0026#43;\u0026#43;\r\rC Lecture - 1\rExercise 0 ~ 31 C Lecture - 2\rExercise 32 ~ 40 C Lecture - 3\rExercise 41~ 48 C Lecture - 4\rExercise 48 ~ 51 \r\rC#\r\rC# Note - 1\rHow to create C# console application without Visual Studio C# Note - 2\rHow to build a configurable scheduled task on Window Service? \r\rJava\rJava Note - 1: Enum\rReplace constant property of the interface or abstract class with Enum Java Note - 2: Concurrency\rCommon good practice for Java Concurrency programming Java Note - 3: Path and Files\rSome good part of Java 7 - Path and Files API Java Note - 4: Date Time Java 8 provides a comprehensive Date-Time API to work with date, time, and datetime\n\r\rPython\r\rPython Note1\rGood practices for package \u0026amp; module Python Note2\rClosure \u0026amp; Decorator Python Note3\rString \u0026amp; Representation Python Note4\rIterables \u0026amp; Iteration Python Note5\rPython Note5 Python Note6\rPython Note6 Python Note7\rPython Note7 Python Note8\rPython Note8 \r\rShell\r\rPowershell Note - 1\rIntroduction of Powershell ... \r\r"
},
{
	"uri": "/tags/cpp/",
	"title": "Cpp",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/csharp/",
	"title": "Csharp",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hacks/php-debug/",
	"title": "Debug PHP with Free IDE",
	"tags": ["php"],
	"description": "Eclipse PDT and Netbeans for PHP development",
	"content": " PDT and Netbeans  PDT and Netbeans are two most popluar free PHP IDEs. We choose such IDE for productivity, so code intelligence and debug are two key factors, which let us love IDE. Because both are not created for PHP development at the start, there is no built-in server to support the PHP web debug. When we want to use it to debug, we would come across some wierd problems. Here is how to prepare the IDE for PHP debug.\n AMP package or without AMP Use AMP package as smart choice  If you haven\u0026rsquo;t installed install any MySQL, Apache, PHP on your computer, I will recommend you to choose AMP ( Apache, MySQL, PHP ) package first, especially when project is small, the time is so tight, your client just want you to do some minor change. In that scenario, AMP package is a much better choice. Popular AMP packages include : EasyPHP, MAMP, WAMP, XAMPP. You can pick any of them on your favor.\n Here is not going to discuss any specific AMP package. You can find more detailed instruction from their official website. If you still have problem, you can take a look how to do without the AMP package, but I won\u0026rsquo;t guarantee you the solution below will work for your AMP.\n  Manage your shits without AMP package  Here we just focus on how to work with shits ( Apache, PHP ) which you download and install them piece by piece. 10 years ago, it was easier to choose which one to download and install, because there was no much option, but now there are many options which make us confused.\n The more worst and nastiest problem today is compatible issue between x86 and x64 applications in Windows. Even sometimes they are claimed compiled as x86, until you test it you will never they are really compatible. The reason is Windows has different versions of C++ redistributed compiler, if you use different compilers from Windows to compile your source code, you cannot ensure they are compatible to work together.\n To avoid this problem, it is better to make sure the package or software are compatible at the beginning. That is why the AMP package is much better and easy to do that. They help you solve such nasty problem by bundling all you need together.\n Download the compatible packages, especially Apache and PHP. When you download PHP, you need to know the PHP is compiled by VC9, VC11, or VC14, and x86 or x64. After that, you need to download proper Apache from here\n  Prerequisites  Apache path c:\\apache. Version 2.4.x, VC11, x86 PHP path c:\\php, Version 5.6.x, VC11, x86 Use localhost:1234 as test website URL Project workspace path c:\\php_workspace Website root path c:\\php_workspace\\phpsite, the index.php is under this root path  Prepare PHP for debugging Download XDebug and install it  Go to xdebug site. Use the wizard tool to find the xdebug tool.\n Type c:\\php\\php.exe -i | clip to copy the php info to memory. And then paste the content to the input area, and click Analyse my phpinfo() output. It will show the correct file to download.\n Download the dll file and put it into php folder c:\\php\\ext. Update the php.ini file by adding the following lines at the bottom of file.\n  [XDebug] zend_extension=\u0026quot;c:/php/ext/php_xdebug-x.x.x-x.x-vcxx.dll\u0026quot; xdebug.remote_enable=1 xdebug.remote_host=localhost xdebug.remote_port=9000 xdebug.remote_autostart=1 xdebug.remote_connect_back=1  Setup Apache to load PHP  Add php module loading inside your apache configuration file. On the file c:\\apache\\conf\\httpd.conf with nodepad and update as following setting  ### Update apache root ### ServerRoot \u0026quot;c:/Apache24\u0026quot; ServerRoot \u0026quot;c:/apache\u0026quot; ### Change origin 80 to 1234 ### Listen 80 Listen 1234 ### Add ServerName ServerName localhost:1234 ### Add PHP directory PHPIniDir \u0026quot;C:/php\u0026quot; ### Add PHP module and handler LoadModule php5_module \u0026quot;c:/php/php5apache2_4.dll\u0026quot; AddHandler application/x-httpd-php .php \u0026lt;FilesMatch \\.php$\u0026gt; SetHandler application/x-httpd-php \u0026lt;/FilesMatch\u0026gt; ### Change origin doc root htdocs ### DocumentRoot \u0026quot;c:/Apache24/htdocs\u0026quot; DocumentRoot \u0026quot;c:/php_workspace/phpsite\u0026quot; \u0026lt;Directory \u0026quot;c:/php_workspace/phpsite\u0026quot;\u0026gt; Options Indexes FollowSymLinks AllowOverride All Require all granted \u0026lt;/Directory\u0026gt;  Debug PHP with PDT If you have PHP 7 installed, please choose the up to PHP 5.6.x as PHP runtime.\n Open phpsite as PHP the project with Eclipse PDT\n Setup PHP Web Application for debugging\n Choose menu Run \u0026gt; Debug Configurations \u0026gt; PHP Web Application Add new configuration by clicking   Configure PHP Web Server\n Choose Default PHP Web Server from the dropdown list Click the button configuration, it prop up a Window dialog. On the tab Server, Set the localhost:1234 as Base URL. It should be the same as ServerName in your httd.conf On the tab Debugger, choose XDebug from the dropdown list, then other setting as default. On the tab Path Mapping, add new mapping. Enter / as Path on Server, Put c:\\php_workspace\\phpsite as Path in File system, then leave other setting as default. Close the Window dialog. Choose the File c:\\php_workspace\\phpsite\\index.php as startup page. If the Auto Generated URL is not localhost:1234/index.php, then manually update it. After all these done, you can debug your website now.   Debug PHP with Netbeans If you have PHP 7 installed, please choose the up to PHP 5.6.x as PHP runtime.\n Open phpsite as PHP the project with Netbeans.\n Configure PHP Web Server\n On the Projects panel, choose the project phpsite , right click and choose Properties Choose Sources within the categories. Check the PHP version is the same as your PHP version. Choose Run Configurations within the categories, and update the default configuration. Choose Local Web Site from Run As dropdown list. Set localhost:1234 as Project URL Click the button Advanced ... to update web server Add a new path mapping. Enter / as Path on Server, Put c:\\php_workspace\\phpsite as Path in File system, then leave other setting as default. Leave other default setting and click button OK Now you can debug php site with Netbeans   Use Nginx instead of Apache  Download RunHiddenConsole\n Download RunHiddenConsole Extract the file RunHiddenConsole.exe to folder c:\\bin\\  Install Nginx 32 bit version.\n We assume the ngnix\u0026rsquo;s path is c:\\nginx\\  Confirm php-cgi.exe is within the PHP folder c:\\php.\n Setup Nginx FastCGI with PHP\n Back the original nginx.conf Create a script to launch nginx and php in sequence.   @ECHO OFF ECHO Start PHP FastCGI... SET PATH=c:\\php;%PATH% c:\\bin\\RunHiddenConsole.exe c:\\php\\php-cgi.exe -b 127.0.0.1:9000 ECHO Start Nginx ... c:\\bin\\RunHiddenConsole.exe c:\\nginx\\nginx.exe   Open the nginx.conf via notepad Replace the server block with following setting  server { listen 1234; server_name localhost; root c:/php_workspace/phpsite; #charset koi8-r; ### Static location / { index index.php; ### try_files $uri $uri/ @missing; } location ~ /\\.ht { deny all; } location ~ /\\.rewrite { deny all; } ### PHP FastCGI location ~ \\.php$ { root c:/php_workspace/phpsite; ### root html; fastcgi_pass 127.0.0.1:41234; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME c:/php_workspace/phpsite/$fastcgi_script_name; include fastcgi_params; } }  cat file | xclip -selection clipboard\nPHP 5.x anp PHP 7.x on Ubuntu 16 Add repo sudo add-apt-repository -y ppa:ondrej/php sudo apt-get update sudo apt-get install php5.6-fpm sudo apt-get install  Trouble shooting Update Today I got again problem with PHP 7 running despite I have disabled php7.0 apache module: phpinfo was showing php 7 using fastCGI \u0026hellip; \u0026hellip; So if after you follow the below instructions you face this situation, you may need to disable the proxy_fcgi apache module:\nsudo a2dismod proxy_fcgi proxy; sudo service apache2 restart   Re-Install PHP 5.6  What worked for me was this guide: http://www.lornajane.net/posts/2016/php-7-0-and-5-6-on-ubuntu\nActually is not required to remove php7.0, you can install php5.6 together ( also because you will have dependency problem with phpmyadmin package that required php7.0)\nAssuming libapache2-mod-php is a suitable way to enable PHP in Apache for you, you can proceed in this way:\nsudo add-apt-repository ppa:ondrej/php sudo apt-get update sudo apt-get install php7.0 php5.6 php5.6-mysql php-gettext php5.6-mbstring \\ php-mbstring php7.0-mbstring php-xdebug libapache2-mod-php5.6 libapache2-mod-php7.0   Switch PHP version:  From php5.6 to php7.0:\nApache:\nsudo a2dismod php5.6 ; sudo a2enmod php7.0 ; sudo service apache2 restart  CLI:\nsudo update-alternatives --set php /usr/bin/php7.0  From php7.0 to php5.6:\nApache:\nsudo a2dismod php7.0 ; sudo a2enmod php5.6 ; sudo service apache2 restart  CLI:\nsudo update-alternatives --set php /usr/bin/php5.6  Build xdebug for different PHP PHP 5.6 php5.6 -i | xsel --clipboard ### open url http://xdebug.org/wizard.php ### copy the content and download the correct xdebug tar ball xdebug-2.5.3.tar.gz tar -xvf xdebug-2.5.3.tar.gz cd xdebug-2.5.3 phpize5.6 ### You will output as below ### ... ### Zend Module Api No: 20131226 ### Zend Extension Api No: 220131226 ./configure --with-php-config=/usr/bin/php-config5.6 make sudo cp modules/xdebug.so /usr/lib/php/20131226  Create xdebug.ini with mods-available zend_extension=\u0026quot;/usr/lib/php/20131226/xdebug.so\u0026quot; xdebug.remote_enable=1 xdebug.remote_handler=dbgp xdebug.remote_mode=req xdebug.remote_host=127.0.0.1 xdebug.remote_port=9000  Create symbolic links sudo ln -s /etc/php/5.6/mods-available/xdebug.ini /etc/php/5.6/cli/conf.d/20-xdebug.ini sudo ln -s /etc/php/5.6/mods-available/xdebug.ini /etc/php/5.6/fpm/conf.d/20-xdebug.ini  PHP 7.0  php7.0 -i | xsel --clipboard ### open url http://xdebug.org/wizard.php ### copy the content and download the correct xdebug tar ball xdebug-2.5.3.tar.gz tar -xvf xdebug-2.5.3.tar.gz cd xdebug-2.5.3 phpize7.0 ### You will output as below ### ... ### Zend Module Api No: 20151012 ### Zend Extension Api No: 320151012 ./configure --with-php-config=/usr/bin/php-config7.0 make sudo cp modules/xdebug.so /usr/lib/php/20151012  Create xdebug.ini with mods-available zend_extension=\u0026quot;/usr/lib/php/20151012/xdebug.so\u0026quot; xdebug.remote_enable=1 xdebug.remote_handler=dbgp xdebug.remote_mode=req xdebug.remote_host=127.0.0.1 xdebug.remote_port=9000  Create symbolic links sudo ln -s /etc/php/7.0/mods-available/xdebug.ini /etc/php/7.0/cli/conf.d/20-xdebug.ini sudo ln -s /etc/php/7.0/mods-available/xdebug.ini /etc/php/7.0/fpm/conf.d/20-xdebug.ini  "
},
{
	"uri": "/tags/developmment/",
	"title": "Developmment",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/framework/",
	"title": "Framework",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/frameworks/",
	"title": "Frameworks",
	"tags": ["Developmment", "Framework"],
	"description": "",
	"content": "\r\rCNTK Note - 1\rAI Framework from Microsoft\n\r\rPHP Web Framework\rIntroduction of PHP Web Frameworks: Zend Framework, Laravel ...\n\r\rPython Web Framework\rIntroduction of Django - Most popular python web framework\n\r\rTensorflow Note - 1\rTensorflow Note - 1\n\r\rTensorflow Note - 2\rTensorflow Note - 2\n\r\r"
},
{
	"uri": "/tags/hack/",
	"title": "Hack",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/hacking/",
	"title": "Hacking",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hacks/",
	"title": "Hacks",
	"tags": ["hack", "hacking"],
	"description": "",
	"content": "\r\rDebug PHP with Free IDE\rEclipse PDT and Netbeans for PHP development\n\r\rWindows command \u0026amp; hotkey - 1\rA note for everyone who wants to use Commnd and Hot Key as hacker ...\n\r\rWindows command \u0026amp; hotkey - 2\rA note for everyone who wants to use Commnd and Hot Key as hacker ...\n\r\rWindows command \u0026amp; hotkey - 3\rA note for everyone who wants to use Commnd and Hot Key as hacker ...\n\r\r"
},
{
	"uri": "/",
	"title": "Hello World",
	"tags": [],
	"description": "",
	"content": " *Hello World* is the classic starter project for any programmer. --  After I moved the old blog site from WordPress to github pages, I found it is much easier for managing my site with hugo and github. I am not passionate blogger. Blog to me is kind of note or collection of knowledge base, which comes from work, hobby and project. Github is the developer\u0026rsquo;s favor instead of mainstream user, so I won\u0026rsquo;t suggest everyone give a go. Comparing to markdown and command line, WordPress\u0026rsquo;s UI is more friendly to non-tech people. If you want to give a shot on your own, you can check out my note - Create a blog on GitHub Pages, it shows you how I did it on Windows machine and make it available on your github page.\nThe Hello World home page comes from my old site. It has been updated for few times by adding some new programming languages and it is not supposed for developer. It is prepared for non-tech people who want to know what the program actually looks llike.\n Dutch : \u0026quot;Hello wereld\u0026quot;, English : \u0026quot;Hello world\u0026quot;, French : \u0026quot;Bonjour monde\u0026quot;, German : \u0026quot;Hallo Welt\u0026quot;, Greek : \u0026quot;γειά σου κόσμος\u0026quot;, Italian : \u0026quot;Ciao mondo\u0026quot;, Japanese : \u0026quot;こんにちは世界\u0026quot;, Korean : \u0026quot;여보세요 세계\u0026quot;, Mandarin : \u0026quot;你好世界\u0026quot;, Portuguese : \u0026quot;Olá mundo\u0026quot;, Russian : \u0026quot;Здравствулте мир\u0026quot;, Spanish : \u0026quot;Hola mundo\u0026quot;  The different languages above say the same two words \u0026ldquo;Hello World\u0026rdquo; are just for fun. Basically most software engineers start writing \u0026ldquo;Hello World\u0026rdquo; application from the very beginning with different programming language. I hope after you read through this page, you will find programming is not rock science and everyone can do it with fun.\nAs I mentioned before, here is for beginner to code for fun instead of terrifying them, so I just pick some which is useful or popular you might already heard or convenient for people to try on your own. The languages are simply ordered by alphabet.\nAssumptions  You have a proper computer instead of a tablet or ipad. Actually you can write some code to create an app directly on your smart phone or tablet after installing some development apps. AIDE, DroidScript and QPython are such applications you can try if you want to play around.\n If you use Mac, the code for Linux should work on Mac as well. You know how to start a terminal on Mac or a command prompt on Windows. Finally, you are ready to get your hands dirty.\n  Online Programming Editor I list some online programming editor and compiler here, then you can simply try without installing any framework or tool on your PC or laptop.\n repl.it tutorialspoint codingground  Bash/Batch script Bash is built-in script on Unix/Linux-like operating system. Bash script file is end with sh as extension. Batch is built-in script on Windows operating system. Bash script is known as one of Unix shell scripts. The other shell scrips include ksh, csh, zsh, etc. Bash is one of most important and powerful tool for system admin.\nBatch script file is end with bat as extension. On Windows there is another file end with cmd, it works the same as batch file. From November 2006, Microsoft create a new powerful language PowerShell, which is similar to Unix shells. Basically PowerShell has replaced Batch as first option for system admin.\n Unix/Linux\n Create a script file hello.sh with vi or nano  #!/bin/bash var=\u0026quot;Hello World!\u0026quot; echo $var   Change mode chmod 755 hello.sh Run the script ./hello.sh  Batch/Cmd (Windows)\n Create a script file hello.bat or hello.cmd with any editor  @echo off set var='Hello World!' echo.%var%   Run the script hello.bat or hello.cmd   C/C++ The C programming language was originally developed as a language to replace assembler in systems programming. It was very successful, making system code portable and easier to write and read. So Basically the kernel of most operating systems, Windows, Mac, Linux are coded in C.\nToday C is one of the most used programming languages. Since C was designed to replace assembler language, and that in several important ways, it retains a very low level view of the machine. The C++ programming language was designed as a higher level version of C, providing support for object-oriented programming. It gives developer more power to handle the problem of real world.\n Create a program file hello.c or hello.cpp with vi or any editor\n#include\u0026lt;stdio.h\u0026gt; int main( ) { char var[] = \u0026quot;World\u0026quot;; printf( \u0026quot;Hello %s \\n Press any key to exit.\u0026quot;, var ); char key = getchar(); return 0; }  Unix/Linux includes gcc by default. You just need to compile and run the console app. For Windows, you might need install another tool cygwin or MinGW\ng++ hello.c -o hello ./hello   C# C# is a multi-paradigm programming language encompassing strong typing, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines. In January 1999, Anders Hejlsberg formed a team to build a new language at the time called Cool, which stood for \u0026ldquo;C-like Object Oriented Language\u0026rdquo;. By the time the .NET project was publicly announced at the July 2000,Microsoft the language had been renamed C#.\n Download and install .net framework from Microsoft website Create a program file helloworld.cs\npublic class Hello { public static void Main() { System.Console.WriteLine(\u0026quot;Hello, World!\u0026quot;); } }  Compile with .net framework command.\n Run helloworld.exe file\nC:\\Windows\\Microsoft.NET\\Framework\\v3.5\\csc.exe helloworld.cs helloworld.exe   Go Go ,as known as golang, is a free and open source programming language created at Google. It is a compiled, statically typed language in the tradition of Algol and C, with garbage collection, expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction.\n Download Go binary from www.golang.org Follow the instruction to install golang on your computer Create a program file hello.go\npackage main import \u0026quot;fmt\u0026quot; func main() { fmt.Println(\u0026quot;hello world\u0026quot;) }  Compile \u0026amp; run go run hello.go\n  Java Java is a general-purpose computer programming language that is concurrent, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \u0026ldquo;write once, run anywhere\u0026rdquo;, meaning that compiled Java code can run on all platforms with JVM without the need for recompilation.\n Download and install Java JDK 8\n For any Ubuntu 12 or higher version I recommand you follow this instruction. It is pretty simple. For CentOS 6 or higher version, please follow this instruction For Windows please make sure you click the JDK Download button. The installer file end with exe is best option for beginner, instead of the zip file, because you don\u0026rsquo;t need to setup PATH system environment by yourself.\n  Create a program file HelloWorld.java\npublic class HelloWorld { public static void main(String[] args) { System.out.println(\u0026quot;Hello, World\u0026quot;); } }  Compile \u0026amp; run\njavac HelloWorld.java java HelloWorld   Javascript JavaScript, not to be confused with Java, was created in 10 days in May 1995 by Brendan Eich, then working at Netscape and now of Mozilla. The original name of this language was Mocha, in September of 1995 it was changed to LiveScript, then in December of the same year, the name JavaScript was adopted, because of very popular Java around then.\nJavaScript is the programming language of the web. It\u0026rsquo;s one of the most popular and in demand skills in today\u0026rsquo;s job market for good reason. As a web developer, it is essential that you have a solid understanding of this versatile language.\n The sample will be presented as web page. Create a program file HelloWorld.html\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script\u0026gt; function helloWorld() { document.write(\u0026quot;Hello World\u0026quot;); } helloWorld(); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/html\u0026gt;  Open file HelloWorld.html with your browser.\n  PHP PHP as it\u0026rsquo;s known today is actually the successor to a product named PHP/FI. Created in 1994 by Rasmus Lerdorf, the very first incarnation of PHP was a simple set of Common Gateway Interface (CGI) binaries written in the C programming language. Originally used for tracking visits to his online resume, he named the suite of scripts \u0026ldquo;Personal Home Page Tools,\u0026rdquo; more frequently referenced as \u0026ldquo;PHP Tools.\u0026rdquo; Over time, more functionality was desired, and Rasmus rewrote PHP Tools, producing a much larger and richer implementation.\n Download and install  Linux Please find the install command here\nWindows\n* Download the file PHP 5.x here * Pick the Thread safe zip file, download extra it to \\path\\to\\php_folder. * Update the PATH environment variable with your php directory\n Create a python script hello.py with any editor\n\u0026lt;?php echo \u0026quot;Hello World!\u0026quot; ?\u0026gt;  Run the script php hello.php\n  Python Python is currently one of the most popular dynamic programming languages, along with Perl, Tcl, PHP, and newcomer Ruby. Although it is often viewed as a \u0026ldquo;scripting\u0026rdquo; language, it is really a general purpose programming language along the lines of Lisp or Smalltalk (as are the others, by the way). Today, Python is used for everything from throw-away scripts to large scalable web servers that provide uninterrupted service 24x7. It is used for GUI and database programming, client- and server-side web programming, and application testing. It is used by scientists writing applications for the world\u0026rsquo;s fastest supercomputers and by children first learning to program.\n Download and install python 3.x Create a python script hello.py with any editor\nprint \u0026quot;Hello World!\u0026quot;  Run the script python hello.py\n  Rust Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety. Rust programming language is fundamentally about empowerment: no matter what kind of code you are writing now, Rust empowers you to reach farther, to program with confidence in a wider variety of domains than you did before.\n Download and install rust rust 1.x\n Create a project\ncargo new helloworld\n Copy the content below into the rust file main.rs with any editor\nfn main() { println!(\u0026quot;Hello World !\u0026quot;) }  Run with rust app with cargo\ncargo run\n  "
},
{
	"uri": "/tags/hugo/",
	"title": "Hugo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/java/",
	"title": "Java",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/coding/java/",
	"title": "Java",
	"tags": ["java"],
	"description": "",
	"content": "\r\rJava Note - 1: Enum\rReplace constant property of the interface or abstract class with Enum\n\r\rJava Note - 2: Concurrency\rCommon good practice for Java Concurrency programming\n\r\rJava Note - 3: Path and Files\rSome good part of Java 7 - Path and Files API\n\r\rJava Note - 4: Date Time \rJava 8 provides a comprehensive Date-Time API to work with date, time, and datetime\n\r\rJava Note - 5: Lambda \rLambda expressions are Java\u0026#39;s first step into functional programming\n\r\r"
},
{
	"uri": "/coding/java/java-note-1/",
	"title": "Java Note - 1: Enum",
	"tags": ["java"],
	"description": "Replace constant property of the interface or abstract class with Enum",
	"content": " Prerequisites  Java 1.5+\n New type: Enum Enum was a great improvement in Java 1.5. From that more and more developer abandom the interface or abstract class as constant variable container.\nBefore Java 5 Before Java 1.5 you will following coding in many Java program.\n// Use interface or abstract class as constant variable container public interface Country { public static final String AU = \u0026quot;Australian\u0026quot;; public static final String UK = \u0026quot;United Kingdom\u0026quot;; public static final String US = \u0026quot;United State\u0026quot;; } public class Util { public static String getLanguageCode(String country) { String languageCode = \u0026quot;en\u0026quot;; switch (country) { case Country.AU: languageCode = \u0026quot;en-au\u0026quot;; break; case Country.UK: languageCode = \u0026quot;en-uk\u0026quot;; break; case Country.US: languageCode = \u0026quot;en-us\u0026quot;; break; } return languageCode; } }  Above program looks very good. Please take a close look and check it carefully. You will find the program will never return en-au, since there is a typo in the constant AU. It should be Australia instead of Australian. I believe many developers have short sight problem like me, and it happened again and again. Using string as constant flag is not a good option, but there is no other better solution before Java 1.5.\nAfter Java 5 After Java 1.5, you will see the change below. Enum is the best container for constants. It can help you check the program time. Meanwhile, it can simplfy your coding.\n// Use Enum as constant variable container public enum Country { Australia, UnitedKingdom, UnitedState } public class Util { public static String getLanguageCode(Country country) { String languageCode = \u0026quot;en\u0026quot;; switch (country) { case Australia: languageCode = \u0026quot;en-au\u0026quot;; break; case UnitedKingdom: languageCode = \u0026quot;en-uk\u0026quot;; break; case UnitedState: languageCode = \u0026quot;en-us\u0026quot;; break; } return languageCode; } }  Now you program will not be by any unintentional typo, since it will throw you compile error before you run the application. If you haven\u0026rsquo;t refactor your static constants container, it is time to improve it now.\nAfter Java Java 1.7, there are some new features. One of these new features is Switch statement. Now it supports String. It is a great for Java developer.With this new feature, the old Enum can be enhanced and the Util class can provide more handy methods (Overload method getLanguageCode) for development.\nNew Enum class can support flexible requirement. In the early version of Enum, the toString method only will return exactly the specified constanct name. Now it can be overrided with toString to return different constant name.\n// It can return customized name and simplify coding public enum Country { AU(\u0026quot;Australia\u0026quot;, \u0026quot;au\u0026quot;,\u0026quot;en-au\u0026quot;), UK(\u0026quot;United Kingdom\u0026quot;, \u0026quot;en-uk\u0026quot;), US(\u0026quot;United State\u0026quot;, \u0026quot;us\u0026quot;,\u0026quot;en-us\u0026quot;); String countryName; String countryCode; String languageCode; private Country(String name, String code) { countryName = name; countryCode = code; } public String getCode() { return countryCode; } public String getLanguageCode() { return languageCode; } @Override public String toString() { return countryName; } }  The Uitl class can convert any country name or country code to Enum Country, vice versa. Now developer can seamless convert the String from UI to the Enum, since on the UI, usually the country name will Australia or United Kingdom instead of just AU or UK. For coding, use AU or UK can simplify coding and is friendly to developer.\npublic class Util { public static Country convertCountryNameOrCode(String nameOrCode ) { Country country = null; switch (nameOrCode) { case \u0026quot;au\u0026quot;: case \u0026quot;AU\u0026quot;: case \u0026quot;Australia\u0026quot;: country = Country.AU; break; case \u0026quot;uk\u0026quot;: case \u0026quot;UK\u0026quot;: case \u0026quot;United Kingdom\u0026quot;: country = Country.UK; break; case \u0026quot;us\u0026quot;: case \u0026quot;US\u0026quot;: case \u0026quot;United State\u0026quot;: country = Country.UK; break; } return country; } public static String getCountryName( Country country ){ String countryName = null; switch (country){ case AU: countryName = Country.AU.toString(); break; case US: countryName = Country.UK.toString(); break; case UK: countryName = Country.US.toString(); break; default: System.err.println(\u0026quot;Unknow Country\u0026quot;); assert false; break; } return countryName; } public static String getCountryCode( Country country ){ String countryCode = null; switch (country){ case AU: countryCode = Country.AU.getCode(); break; case US: countryCode = Country.UK.getCode(); break; case UK: countryCode = Country.US.getCode(); break; default: System.err.println(\u0026quot;Unknow Country\u0026quot;); assert false; break; } return countryCode; } public static String getLanguageCode(Country country) { String languageCode = \u0026quot;en\u0026quot;; switch (country) { case AU: languageCode = Country.AU.getLanguageCode() ; break; case UK: languageCode = Country.UK.getLanguageCode(); break; case US: languageCode = Country.US.getLanguageCode(); break; } return languageCode; } }  "
},
{
	"uri": "/coding/java/java-note-2/",
	"title": "Java Note - 2: Concurrency",
	"tags": ["java"],
	"description": "Common good practice for Java Concurrency programming",
	"content": " Thread Join  The join method allows one thread to wait for the completion of another. join responds to an interrupt by exiting with an InterruptedException.\n Demo code of thread join\n  public class JoinDemo implements Runnable { private Random rand = new Random(System.currentTimeMillis()); public void run() { //simulate some CPU expensive task for (int i = 0; i \u0026lt; 100000000; i++) { rand.nextInt(); } System.out.println(\u0026quot;[\u0026quot; + Thread.currentThread().getName() + \u0026quot;] finished .\u0026quot;); } public static void main(String[] args) throws InterruptedException { Thread[] threads = new Thread[5]; for (int i = 0; i \u0026lt; threads.length; i++) { threads[i] = new Thread(new JoinDemo(), \u0026quot;joinThread \u0026quot; + i); threads[i].start(); } for (int i = 0; i \u0026lt; threads.length; i++) { threads[i].join(); } System.out.println(\u0026quot;[\u0026quot; + Thread.currentThread().getName() + \u0026quot;] All -threads have finished.\u0026quot;); } }  Common problem of multithred program  When there are many threads running, the exact sequence in which all running threads are executed depends next to the thread configuration like priority also on the available CPU resources and the way the scheduler chooses the next thread to execute. Although the behavior of the scheduler is completely deterministic, it is hard to predict which threads execute in which moment at a given point in time. This makes access to shared resources critical as it is hard to predict which thread will be the first thread that tries to access it.\n Sample code without sync can show you what the problem is. If you run the following sample code, you may get different output from mine here. It is also common Thread safe issue for multiple threads program.\n  public class NotSyncCounter implements Runnable { private static int counter = 0; public void run() { while (counter \u0026lt; 10) { System.out.println(\u0026quot;[\u0026quot; + Thread.currentThread().getName() + \u0026quot;] - before: \u0026quot; + counter); counter++; System.out.println(\u0026quot;[\u0026quot; + Thread.currentThread().getName() + \u0026quot;] - after: \u0026quot; + counter); } } public static void main(String[] args) throws InterruptedException { Thread[] threads = new Thread[5]; for (int i = 0; i \u0026lt; threads.length; i++) { threads[i] = new Thread(new NotSyncCounter(), \u0026quot; - thread-\u0026quot; + i); threads[i].start(); } for (int i = 0; i \u0026lt; threads.length; i++) { threads[i].join(); } } } //Possible output: // [ - thread-2] - before: 0 // [ - thread-1] - before: 0 // [ - thread-4] - before: 0 // [ - thread-3] - before: 0 // [ - thread-0] - before: 0 // [ - thread-3] - after: 4 // [ - thread-3] - before: 5 // [ - thread-4] - after: 3 // [ - thread-1] - after: 2 // [ - thread-1] - before: 6 // [ - thread-1] - after: 7 // [ - thread-2] - after: 1 // [ - thread-1] - before: 7 // [ - thread-4] - before: 6 // [ - thread-4] - after: 9 // [ - thread-4] - before: 9 // [ - thread-3] - after: 6 // [ - thread-0] - after: 5 // [ - thread-4] - after: 10 // [ - thread-1] - after: 8 // [ - thread-2] - before: 7 // [ - thread-2] - after: 11   To solve the problme, there is synchronized keyword in Java available for us to handle the multiple threads program.\n Demo code of synchronized to solve the problem on above sample.\n  public class SyncCounter implements Runnable { private static int counter = 0; public void run() { while (counter \u0026lt; 10) { synchronized (SyncCounter.class) { System.out.println(\u0026quot;[\u0026quot; + Thread.currentThread().getName() + \u0026quot;] - before: \u0026quot; + counter); counter++; System.out.println(\u0026quot;[\u0026quot; + Thread.currentThread().getName() + \u0026quot;] - after: \u0026quot; + counter); } } } public static void main(String[] args) throws InterruptedException { Thread[] threads = new Thread[5]; for (int i = 0; i \u0026lt; threads.length; i++) { threads[i] = new Thread(new SyncCounter(), \u0026quot; - thread-\u0026quot; + i); threads[i].start(); } for (int i = 0; i \u0026lt; threads.length; i++) { threads[i].join(); } } }  Deadlock In general the following requirements for a deadlock can be identified: * Mutual exclusion: There is a resource which can be accessed only by one thread at any point in time. * Resource holding: While having locked one resource, the thread tries to acquire another lock on some other exclusive resource. * No preemption: There is no mechanism, which frees the resource if one threads holds the lock for a specific period of time. * Circular wait: During runtime a constellation occurs in which two (or more) threads are each waiting on the other thread to free a resource that it has locked.\n Monitor with wait and notify  import java.util.Queue; import java.util.concurrent.ConcurrentLinkedQueue; public class SyncWaitNotfiyDemo { private static final Queue \u0026lt;Integer\u0026gt;queue = new ConcurrentLinkedQueue\u0026lt;Integer\u0026gt;(); public Integer getNextInt() { Integer retVal = null; synchronized (queue) { try { while (queue.isEmpty()) { queue.wait(); } } catch (InterruptedException e) { e.printStackTrace(); } retVal = queue.poll(); } return retVal; } public synchronized void putInt(Integer value) { synchronized (queue) { queue.add(value); queue.notify(); } } public static void main(String[] args) throws InterruptedException { final SyncWaitNotfiyDemo queue = new SyncWaitNotfiyDemo(); Thread thread1 = new Thread(new Runnable() { public void run() { for (int i = 0; i \u0026lt; 10; i++) { queue.putInt(i); } } }); Thread thread2 = new Thread(new Runnable() { public void run() { for (int i = 0; i \u0026lt; 10; i++) { Integer nextInt = queue.getNextInt(); System.out.println(\u0026quot;Next int: \u0026quot; + nextInt); } } }); thread1.start(); thread2.start(); thread1.join(); thread2.join(); } }  Useful concurrent collections ConcurrentHashMap  ConcurrentHashMap is undoubtedly most popular collection class introduced in Java 5 and most of us are already using it. It provides a concurrent alternative of Hashtable or Synchronized Map classes with aim to support higher level of concurrency by implementing fined grained locking. Multiple reader can access the Map concurrently while a portion of Map gets locked for write operation depends upon concurrency level of Map. Also it provides better scalability than there synchronized counter part. Iterator of ConcurrentHashMap are fail-safe iterators which doesn\u0026rsquo;t throw ConcurrencModificationException thus eliminates another requirement of locking during iteration which result in further scalability and performance.\n CopyOnWriteArrayList and CopyOnWriteArraySet  CopyOnWriteArrayList is a concurrent alternative of synchronized List. It provides better concurrency than synchronized List by allowing multiple concurrent reader and replacing the whole list on write operation. Yes, write operation is costly on CopyOnWriteArrayList but it performs better when there are multiple reader and requirement of iteration is more than writing. Since CopyOnWriteArrayList Iterator also don\u0026rsquo;t throw ConcurrencModificationException it eliminates need to lock the collection during iteration. Remember both ConcurrentHashMap and CopyOnWriteArrayList doesn\u0026rsquo;t provides same level of locking as Synchronized Collection and achieves thread-safety by there locking and mutability strategy. So they perform better if requirements suits there nature. Similarly, CopyOnWriteArraySet is a concurrent replacement to Synchronized Set.\n BlockingQueue and Deque  BlockingQueue makes it easy to implement producer-consumer design pattern by providing inbuilt blocking support for put() and take() method. put() method will block if Queue is full while take() method will block if Queue is empty. Java 5 API provides two concrete implementation of BlockingQueue in form of ArrayBlockingQueue and LinkedBlockingQueue, both of them implement FIFO ordering of element. ArrayBlockingQueue is backed by Array and its bounded in nature while LinkedBlockingQueue is optionally bounded. Consider using BlockingQueue to solve producer Consumer problem in Java instead of writing your won wait-notify code. Java 5 also provides PriorityBlockingQueue, another implementation of BlockingQueue which is ordered on priority and useful if you want to process elements on order other than FIFO.\nDeque interface is added in Java 6 and it extends Queue interface to support insertion and removal from both end of Queue referred as head and tail. Java6 also provides concurrent implementation of Deque like ArrayDeque and LinkedBlockingDeque. Deque Can be used efficiently to increase parallelism in program by allowing set of worker thread to help each other by taking some of work load from other thread by utilizing Deque double end consumption property. So if all Thread has there own set of task Queue and they are consuming from head; helper thread can also share some work load via consumption from tail.\n ConcurrentSkipListMap and ConcurrentSkipListSet  Just like ConcurrentHashMap provides a concurrent alternative of synchronized HashMap. ConcurrentSkipListMap and ConcurrentSkipListSet provide concurrent alternative for synchronized version of SortedMap and SortedSet. For example instead of using TreeMap or TreeSet wrapped inside synchronized Collection, You can consider using ConcurrentSkipListMap or ConcurrentSkipListSet from java.util.concurrent package. They also implement NavigableMap and NavigableSet to add additional navigation method.\n Synchronizer Counter Semaphore  Counting Semaphore in Java maintains specified number of pass or permits, In order to access a shared resource, Current Thread must acquire a permit. If permit is already exhausted by other thread than it can wait until a permit is available due to release of permit from different thread. This concurrency utility can be very useful to implement producer consumer design pattern or implement bounded pool or resources like Thread Pool, DB Connection pool etc.  import java.util.concurrent.Semaphore; public class SemaphoreDemo { Semaphore binary = new Semaphore(1); public static void main(String args[]) { final SemaphoreDemo test = new SemaphoreDemo(); new Thread(){ @Override public void run(){ test.mutualExclusion(); } }.start(); new Thread(){ @Override public void run(){ test.mutualExclusion(); } }.start(); } private void mutualExclusion() { try { binary.acquire(); //mutual exclusive region System.out.println(Thread.currentThread().getName() + \u0026quot; inside mutual exclusive region\u0026quot;); Thread.sleep(1000); } catch (InterruptedException i.e.) { ie.printStackTrace(); } finally { binary.release(); System.out.println(Thread.currentThread().getName() + \u0026quot; outside of mutual exclusive region\u0026quot;); } } } // Output: // Thread-0 inside mutual exclusive region // Thread-0 outside of mutual exclusive region // Thread-1 inside mutual exclusive region // Thread-1 outside of mutual exclusive region  CountDownLatch  CountDownLatch in Java is a kind of synchronizer which allows one Thread to wait for one or more Threads before starts processing. You can also implement same functionality using wait and notify mechanism in Java but it requires lot of code and getting it write in first attempt is tricky, With CountDownLatch it can be done in just few lines. CountDownLatch also allows flexibility on number of thread for which main thread should wait, It can wait for one thread or n number of thread, there is not much change on code.\n The difficulty to use it properly is where to use CountDownLatch. First, let us figour out how CountDownLatch works. usaullly main thread of application, which calls CountDownLatch.await() will wait until count reaches zero or its interrupted by another Thread. All other thread are required to do count down by calling CountDownLatch.countDown() once they are completed. One disadvantage of CountDownLatch is not reusable, once its count reaches zero.\n Sample program requires 3 services namely CacheService, AlertService and ValidationService to be started and ready before application can handle any request.\n  import java.util.Date; import java.util.concurrent.CountDownLatch; import java.util.logging.Level; import java.util.logging.Logger; public class CountDownLatchDemo { public static void main(String args[]) { final CountDownLatch latch = new CountDownLatch(3); Thread cacheService = new Thread(new Service(\u0026quot;CacheService\u0026quot;, 1000, latch)); Thread alertService = new Thread(new Service(\u0026quot;AlertService\u0026quot;, 1000, latch)); Thread validationService = new Thread(new Service(\u0026quot;ValidationService\u0026quot;, 1000, latch)); cacheService.start(); //separate thread will initialize CacheService alertService.start(); //another thread for AlertService initialization validationService.start(); //count is 3 since we have 3 Threads (Services) try{ latch.await(); //main thread is waiting on CountDownLatch to finish System.out.println(\u0026quot;All services are up, Application is starting now\u0026quot;); }catch(InterruptedException ie){ ie.printStackTrace(); } } } /** * Service class which will be executed by Thread using CountDownLatch synchronizer. */ class Service implements Runnable{ private final String name; private final int timeToStart; private final CountDownLatch latch; public Service(String name, int timeToStart, CountDownLatch latch){ this.name = name; this.timeToStart = timeToStart; this.latch = latch; } @Override public void run() { try { Thread.sleep(timeToStart); } catch (InterruptedException ex) { Logger.getLogger(Service.class.getName()).log(Level.SEVERE, null, ex); } System.out.println( name + \u0026quot; is Up\u0026quot;); latch.countDown(); //reduce count of CountDownLatch by 1 } }  CylicBarrier  CyclicBarrier is similar to CountDownLatch which we have seen in the last article What is CountDownLatch in Java and allows multiple threads to wait for each other (barrier) before proceeding. The difference between CountDownLatch and CyclicBarrier is an also very popular multi-threading interview question in Java. CyclicBarrier is a natural requirement for a concurrent program because it can be used to perform final part of the task once individual tasks are completed.\n The demo of CyclicBarrier on which we initialize CyclicBarrier with 3 parties, means in order to cross barrier, 3 thread needs to call await() method. each thread calls await method in short duration but they don\u0026rsquo;t proceed until all 3 threads reached the barrier, once all thread reach the barrier, barrier gets broker and each thread started their execution from that point.\n  import java.util.concurrent.BrokenBarrierException; import java.util.concurrent.`CyclicBarrier`; import java.util.logging.Level; import java.util.logging.Logger; public class CyclicBarrierDemo { //Runnable task for each thread private static class Task implements Runnable { private CyclicBarrier barrier; public Task(CyclicBarrier barrier) { this.barrier = barrier; } @Override public void run() { try { System.out.println(Thread.currentThread().getName() + \u0026quot; is waiting on barrier\u0026quot;); barrier.await(); System.out.println(Thread.currentThread().getName() + \u0026quot; has crossed the barrier\u0026quot;); } catch (InterruptedException ex) { Logger.getLogger(CyclicBarrierDemo.class.getName()).log(Level.SEVERE, null, ex); } catch (BrokenBarrierException ex) { Logger.getLogger(CyclicBarrierDemo.class.getName()).log(Level.SEVERE, null, ex); } } } public static void main(String args[]) { //creating CyclicBarrier with 3 parties i.e. 3 Threads needs to call await() final CyclicBarrier cb = new CyclicBarrier(3, new Runnable(){ @Override public void run(){ //This task will be executed once all thread reaches barrier System.out.println(\u0026quot;All parties are arrived at barrier, lets play\u0026quot;); } }); //starting each of thread Thread t1 = new Thread(new Task(cb), \u0026quot;Thread 1\u0026quot;); Thread t2 = new Thread(new Task(cb), \u0026quot;Thread 2\u0026quot;); Thread t3 = new Thread(new Task(cb), \u0026quot;Thread 3\u0026quot;); t1.start(); t2.start(); t3.start(); } } // Output: // Thread 1 is waiting on barrier // Thread 3 is waiting on barrier // Thread 2 is waiting on barrier // All parties have arrived at barrier, lets play // Thread 3 has crossed the barrier // Thread 1 has crossed the barrier // Thread 2 has crossed the barrier  Producer / Consumer pattern  Producer Consumer Design pattern is a classic concurrency or threading pattern which reduces coupling between Producer and Consumer by separating Identification of work with Execution of Work. In producer consumer design pattern a shared queue is used to control the flow and this separation allows you to code producer and consumer separately.\n It is everywhere in real life and depict coordination and collaboration. Like one person is preparing food (Producer) while other one is serving food (Consumer), both will use shared table for putting food plates and taking food plates. Producer which is the person preparing food will wait if table is full and Consumer (Person who is serving food) will wait if table is empty. table is a shared object here. On Java library Executor framework itself implement Producer Consumer design pattern be separating responsibility of addition and execution of task.\n  import java.util.concurrent.BlockingQueue; import java.util.concurrent.LinkedBlockingQueue; import java.util.logging.Level; import java.util.logging.Logger; public class ProducerConsumerPattern { public static void main(String args[]){ //Creating shared object BlockingQueue sharedQueue = new LinkedBlockingQueue(); //Creating Producer and Consumer Thread Thread prodThread = new Thread(new Producer(sharedQueue)); Thread consThread = new Thread(new Consumer(sharedQueue)); //Starting producer and Consumer thread prodThread.start(); consThread.start(); } } //Producer Class in java class Producer implements Runnable { private final BlockingQueue sharedQueue; public Producer(BlockingQueue sharedQueue) { this.sharedQueue = sharedQueue; } @Override public void run() { for(int i=0; i\u0026lt;10; i++){ try { System.out.println(\u0026quot;Produced: \u0026quot; + i); sharedQueue.put(i); } catch (InterruptedException ex) { Logger.getLogger(Producer.class.getName()).log(Level.SEVERE, null, ex); } } } } //Consumer Class in Java class Consumer implements Runnable{ private final BlockingQueue sharedQueue; public Consumer (BlockingQueue sharedQueue) { this.sharedQueue = sharedQueue; } @Override public void run() { while(true){ try { System.out.println(\u0026quot;Consumed: \u0026quot;+ sharedQueue.take()); } catch (InterruptedException ex) { Logger.getLogger(Consumer.class.getName()).log(Level.SEVERE, null, ex); } } } } // Output: // Produced: 0 // Produced: 1 // Consumed: 0 // Produced: 2 // Consumed: 1 // Produced: 3 // Consumed: 2 // Produced: 4 // Consumed: 3 // Produced: 5 // Consumed: 4 // Produced: 6 // Consumed: 5 // Produced: 7 // Consumed: 6 // Produced: 8 // Consumed: 7 // Produced: 9 // Consumed: 8 // Consumed: 9  Executor \u0026ndash; Thread Pool  Java 1.5 introduced Thread pool in Java in the form of Executor framework, which allows Java programmer to decouple submission of a task to execution of the task. It also introduced a full feature built-in Thread Pool framework commonly known as Executor framework. Executor framework also provides different kind of Thread Pool e.g. SingleThreadExecutor which creates just one worker thread or CachedThreadPool which creates worker threads as and when necessary.\n Demo of thread pool\n  import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class ThreadPoolDemo { public static void main(String args[]) { ExecutorService service = Executors.newFixedThreadPool(10); for (int i =0; i\u0026lt;100; i++){ service.submit(new Task(i)); } } } final class Task implements Runnable{ private int taskId; public Task(int id){ this.taskId = id; } @Override public void run() { System.out.println(\u0026quot;Task ID : \u0026quot; + this.taskId +\u0026quot; performed by \u0026quot; + Thread.currentThread().getName()); } } // Output: // Task ID : 0 performed by pool-1-thread-1 // Task ID : 7 performed by pool-1-thread-8 // Task ID : 8 performed by pool-1-thread-9 // Task ID : 6 performed by pool-1-thread-7 // Task ID : 4 performed by pool-1-thread-5 // Task ID : 5 performed by pool-1-thread-6 // Task ID : 3 performed by pool-1-thread-4 // Task ID : 1 performed by pool-1-thread-2 // ...  Submit(Runnable)  The submit(Runnable) method also takes a Runnable implementation, but returns a Future object. This Future object can be used to check if the Runnable as finished executing.\n Submit(Callable)  The submit(Callable) method is similar to the submit(Runnable) method except for the type of parameter it takes. The Callable instance is very similar to a Runnable except that its call() method can return a result.\n InvokeAny()  The invokeAny() method takes a collection of Callable objects, or subinterfaces of Callable. If one of the tasks complete (or throws an exception), the rest of the Callable\u0026rsquo;s are cancelled.\n InvokeAll()  The invokeAll() method invokes all of the Callable objects and returns a list of Future objects. Keep in mind that a task might finish due to an exception, so it may not have \u0026ldquo;succeeded\u0026rdquo;. There is no way on a Future to tell the difference.\n Demo of submit, InvokeAny import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Callable; import java.util.concurrent.Future; import java.util.concurrent.ExecutionException; import java.util.HashSet; import java.util.Set; public class SubmitInvokeDemo { public static void main(String args[]) throws InterruptedException, ExecutionException { ExecutorService executorService = Executors.newSingleThreadExecutor(); Future future = executorService.submit(new Runnable() { public void run() { System.out.println(\u0026quot;Asynchronous task\u0026quot;); } }); future.get(); //returns null if the task has finished correctly. Set\u0026lt;Callable\u0026lt;String\u0026gt;\u0026gt; callables = new HashSet\u0026lt;Callable\u0026lt;String\u0026gt;\u0026gt;(); callables.add(new Callable\u0026lt;String\u0026gt;() { public String call() throws Exception { return \u0026quot;Task 1\u0026quot;; } }); callables.add(new Callable\u0026lt;String\u0026gt;() { public String call() throws Exception { return \u0026quot;Task 2\u0026quot;; } }); callables.add(new Callable\u0026lt;String\u0026gt;() { public String call() throws Exception { return \u0026quot;Task 3\u0026quot;; } }); String result = executorService.invokeAny(callables); System.out.println(\u0026quot;result = \u0026quot; + result); executorService.shutdown(); } }  Join and Fork  Here is an introduction into the Fork/Join Framework that is part of the JDK since version 1.7.  Join and Fork with Executor Service  The demo code submit() our tasks to the ExecutorService and then use the returned instance of Future to wait() for the result. The normal ExecutorService where you would have to block the current thread while waiting for a result. If we would only provide as many threads to the pool as we have CPUs available, the program would run out of resources and hang indefinitely.  import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Callable; import java.util.concurrent.Future; import java.util.concurrent.ExecutionException; import java.util.Random; public class FindMinTask implements Callable\u0026lt;Integer\u0026gt; { private int[] numbers; private int startIndex; private int endIndex; private ExecutorService executorService; public FindMinTask( ExecutorService executorService, int[] numbers, int startIndex, int endIndex) { this.executorService = executorService; this.numbers = numbers; this.startIndex = startIndex; this.endIndex = endIndex; } public Integer call() throws Exception { int sliceLength = (endIndex - startIndex) + 1; if (sliceLength \u0026gt; 2) { FindMinTask lowerFindMin = new FindMinTask( executorService, numbers, startIndex, startIndex + (sliceLength / 2) - 1); Future\u0026lt;Integer\u0026gt; futureLowerFindMin = executorService.submit(lowerFindMin); FindMinTask upperFindMin = new FindMinTask( executorService, numbers, startIndex + (sliceLength / 2), endIndex); Future\u0026lt;Integer\u0026gt; futureUpperFindMin = executorService.submit(upperFindMin); return Math.min(futureLowerFindMin.get(), futureUpperFindMin.get()); } else { return Math.min(numbers[startIndex], numbers[endIndex]); } } public static void main(String[] args) throws InterruptedException, ExecutionException { int[] numbers = new int[100]; Random random = new Random(System.currentTimeMillis()); for (int i = 0; i \u0026lt; numbers.length; i++) { numbers[i] = random.nextInt(100); } ExecutorService executorService = Executors.newFixedThreadPool(64); Future\u0026lt;Integer\u0026gt; futureResult = executorService .submit(new FindMinTask( executorService, numbers, 0, numbers.length - 1)); System.out.println(futureResult.get()); executorService.shutdown(); } }  Join and Fork with JoinForkPool  The ForkJoinPool implements the already mentioned work-stealing strategy, i.e. every time a running thread has to wait for some result; the thread removes the current task from the work queue and executes some other task ready to run. This way the current thread is not blocked and can be used to execute other tasks. Once the result for the originally suspended task has been computed the task gets executed again and the join() method returns the result. This is an important difference between JoinForkPool and ExecutorService.\n Demo of JoinForkPool\n  import java.awt.*; import java.awt.image.*; import java.io.*; import java.util.concurrent.ForkJoinPool; import javax.imageio.*; import java.util.concurrent.RecursiveAction; public class GrayscaleImageAction extends RecursiveAction { private static final long serialVersionUID = 1L; private int row; private BufferedImage bufferedImage; public GrayscaleImageAction(int row, BufferedImage bufferedImage) { this.row = row; this.bufferedImage = bufferedImage; } @Override protected void compute() { for (int column = 0; column \u0026lt; bufferedImage.getWidth(); column++) { int rgb = bufferedImage.getRGB(column, row); int r = (rgb \u0026gt;\u0026gt; 16) \u0026amp; 0xFF; int g = (rgb \u0026gt;\u0026gt; 8) \u0026amp; 0xFF; int b = (rgb \u0026amp; 0xFF); int gray = (int) (0.2126 * (float) r + 0.7152 * (float) g + 0.0722 * (float) b); gray = (gray \u0026lt;\u0026lt; 16) + (gray \u0026lt;\u0026lt; 8) + gray; bufferedImage.setRGB(column, row, gray); } } public static void main(String[] args) throws IOException { ForkJoinPool pool = new ForkJoinPool( Runtime.getRuntime().availableProcessors()); BufferedImage bufferedImage = ImageIO.read(new File(args[0])); for (int row = 0; row \u0026lt; bufferedImage.getHeight(); row++) { GrayscaleImageAction action = new GrayscaleImageAction( row, bufferedImage); pool.execute(action); } pool.shutdown(); ImageIO.write(bufferedImage, \u0026quot;jpg\u0026quot;, new File(args[1])); } }  "
},
{
	"uri": "/coding/java/java-note-3/",
	"title": "Java Note - 3: Path and Files",
	"tags": ["java"],
	"description": "Some good part of Java 7 - Path and Files API",
	"content": " Prerequisites  Java 7+\n Good stuff from not shiny Java 7 If you are planning to refactor your code, please give a second thought. It is time to dump to try these new features. When the Java 7 was released, I was kind of disappointed without lambda, jigsaw as most developers, but when I tried new Path, Files API, I found that is great improvement. The enhancement of this new IO is really useful. It save so much effort for Java developer.\nTo be hoenst, before Java 7, Coding file manipulation in Java is very headache task. I say \u0026ldquo;headache\u0026rdquo; it doesn\u0026rsquo;t mean it is difficult. Just comparing with other program lanugage, you had to take much more effort to take care of the boilerplate, and all are tedious job. That is why sometimes I prefer cmd in Window or bash in Linux to complete the task instead of using Java to handle file manipulation. Now I think I can refactor old file manipulation coding and make it much more elegant.\nBetter file visitor implementation Following is simple customizaed file visitor which has been the part of my old util.\nimport java.io.IOException; import java.nio.file.FileVisitResult; import java.nio.file.Path; import java.nio.file.SimpleFileVisitor; import java.nio.file.attribute.BasicFileAttributes; public class CustomFileVisitor extends SimpleFileVisitor\u0026lt;Path\u0026gt; { @Override public FileVisitResult postVisitDirectory(Path dir , IOException arg1) throws IOException { System.out.println( \u0026quot;post visit dir : \u0026quot;+ dir ); return FileVisitResult.CONTINUE; } @Override public FileVisitResult preVisitDirectory(Path dir , IOException arg1) throws IOException { System.out.println( \u0026quot;post visit dir : \u0026quot;+ dir ); return FileVisitResult.CONTINUE; } @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attr) throws IOException { if ( attr.isSymbolicLink() ) { System.out.println( \u0026quot; symbolic link : \u0026quot;+ file ); }else if ( attr.isSymbolicLink() ){ System.out.println( \u0026quot; regular file : \u0026quot;+ file ); } return FileVisitResult.CONTINUE; } @Override public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException { System.err.println( exc.getMessage()); return FileVisitResult.CONTINUE; } }  To use this customized is so easy. Just 3 lines coding you can test it by yourself.\n CustomFileVisitor fileVisitor = new CustomFileVisitor(); Path path = Paths.get(\u0026quot;TestDir\u0026quot;); Files.walkFileTree(path, fileVisitor);  ARM Automatic resource management is another attractive features of Java 7 and project coin. As name itself implies that now JVM is going to be handling all the external resource and make programmer free to bother about resource management, especially for people like me miss the using statement in C#. Sometimes I wonder why Java is such stubborn not to learn some good features from C#. As we know, C# comes after Java and copies most concept at the early stage, but it really pushed Object Oriented Concept (OOC) to a new level and inspired Java world a lot with its many good feature. I really hope someday I can code in Java as simple as C#. Wise men learn by other men\u0026rsquo;s mistakes; fools by their own.\nIn the past, java programmers use any external resources like file, printer or any devices to close after my program execution complete. Normally we close the resources which we have open in beginning of our program or we decide that if program finish normally how to manage the resource or if our program finish abnormally how to close the resource. Following are comparison of old and new style.\nSnippet of old style\nFileInputStream exchangeCurrencyReader= null; FileOutputStream exchangeCurrencyWriter = null; try { exchangeCurrencyReader = new FileInputStream(\u0026quot;AUDvsUSD.txt\u0026quot;); exchangeCurrencyWriter = new FileOutputStream(\u0026quot;AUDvsUSD.txt\u0026quot;); int var; while (var = exchangeCurrencyReader.read()) != -1) exchangeCurrencyWriter.write(var); } finally { if (exchangeCurrencyReader!= null) exchangeCurrencyReader.close(); if (exchangeCurrencyWriter!= null) exchangeCurrencyWriter.close(); }  Code in Java 7\ntry ( FileInputStream exchangeCurrencyReader = new FileInputStream(\u0026quot;AUDvsUSD.txt\u0026quot;); FileOutputStream exchangeCurrencyWriter = new FileOutputStream(\u0026quot;AUDvsUSD.txt\u0026quot;)){ int var; while((var= exchangeCurrencyReader.read()) != -1 ) exchangeCurrencyWriter.write(); }  In the code above we have declare two file stream one is input file we are reading from one file and writing to another file. After the whole process both streams will be closed automatically either the code has been executed properly or not. Both exchangeCurrencyReader.close() and exchangeCurrencyWriter.close() methods will be called automatically which is the best part of ARM. We should not miss good part from Java 7.\nNew file change monitor service After some homework for new features of Java 7, I am tring to use file watch serviice from Java 7 to replace old file monitor program. It is great and quite simple to use. I have updated to production.\nUsually most Java based system somehow needs such monitor function, there will be separate process or thread to run this service, and there should be a call back handler triggered by this service. Everytime there is any file amended, the service will trigger the call back handler to complete some tasks.\nFollowing is sample of file watching service. I removed call back part which is relevant to the business.\nimport java.nio.file.FileSystems; import java.nio.file.Path; import java.nio.file.Paths; import java.nio.file.StandardWatchEventKinds; import java.nio.file.WatchEvent; import java.nio.file.WatchKey; import java.nio.file.WatchService; import java.util.HashMap; import java.util.Map; public class FileWatchService { public static void watchFileUpdate() { try (WatchService service = FileSystems.getDefault().newWatchService()) { Map\u0026lt;WatchKey, Path\u0026gt; eventMap = new HashMap\u0026lt;\u0026gt;(); Path dir = Paths.get(\u0026quot;TestDir\u0026quot;); eventMap.put(dir.register(service, StandardWatchEventKinds.ENTRY_MODIFY),dir); WatchKey key; do { key = service.take(); Path eventPath = eventMap.get(key); for (WatchEvent\u0026lt;?\u0026gt; event : key.pollEvents()) { WatchEvent.Kind\u0026lt;?\u0026gt; kind = event.kind(); Path path = (Path) event.context(); System.out.println(eventPath + \u0026quot; : \u0026quot; + kind + \u0026quot; : \u0026quot; + path); } } while (key.reset()); } catch (Exception e) { e.printStackTrace(); } } public static void main (String [] args ){ watchFileUpdate(); } }  The sample above shows one kind of events. Actually if you check the API doc, there are another two kinds of event. One is StandardWatchEventKinds.ENTRY_CREATE , the other is StandardWatchEventKinds.ENTRY_DELETE. These events cover almostly all business requirements.\n"
},
{
	"uri": "/coding/java/java-note-4/",
	"title": "Java Note - 4: Date Time ",
	"tags": ["java"],
	"description": "Java 8 provides a comprehensive Date-Time API to work with date, time, and datetime",
	"content": " Date-Time API Through the java.time packages, Java 8 provides a comprehensive Date-Time API to work with date, time, and datetime. By default, most of the classes are based on the ISO-8601 standards. The main classes are\n Instant  represents an instant on the timeline and it is suitable for machines, for example, as timestamps for event  LocalDate, LocalTime, LocalDateTime\n represents human readable date, time, and datetime without a time zone.  OffsetTime, OffsetDateTime\n It represent a time and datetime with a zone offset from UTC.   ZonedDateTime\n It represents a datetime for a time zone with zone rules, which will adjust the time according to the daylight saving time changes in the time zone.    ISO-8601 Standards for Datetime  [date]T[time][zone offset] A date component consists of three calendar fields: year, month, and day. Two fields in a date are separated by a hyphen: year-month-day\n Epoch is Midnight January 1, 1970 UTC  Useful Datetime-Related Enums  Month DayOfWeek ChronoField ChronoUnit  Period A period is an amount of time defined in terms of calendar fields years, months, and days. A duration is also an amount of time measured in terms of seconds and nanoseconds. Negative periods are supported. What is the difference between a period and a duration? A duration represents an exact number of nanoseconds, whereas a period represents an inexact amount of time. A period is for humans what a duration is for machines.\nPartial Partials A partial is a date, time, or datetime that does not fully specify an instant on a timeline, but still makes sense to humans. With some more information, a partial may match multiple instants on the timeline.\nAdjusting Dates Sometimes you want to adjust a date and time to have a particular characteristic, for example, the first Monday of the month, the next Tuesday, etc. You can perform adjustments to a date and time using an instance of the TemporalAdjuster interface. The interface has one method, adjustInto(), that takes a Temporal and returns a Temporal.\nFormatting The most important point to keep in mind is that formatting and parsing are always performed by an object of the DateTimeFormatter class.\nDateTimeApiDemo import java.time.Duration; import java.time.DayOfWeek; import java.time.format.DateTimeFormatter; import java.time.format.DateTimeParseException; import java.time.Instant; import java.time.LocalDate; import java.time.LocalTime; import java.time.LocalDateTime; import java.time.Month; import java.time.MonthDay; import java.time.OffsetDateTime; import java.time.Period; import java.time.temporal.Temporal; import java.time.temporal.TemporalAdjusters; import java.time.temporal.ChronoField; import java.time.temporal.TemporalAccessor; import java.time.Year; import java.time.YearMonth; import java.time.ZoneOffset; import java.time.ZonedDateTime; import java.time.ZoneId; import java.util.Locale; import java.util.Set; import static java.time.Month.JANUARY; import static java.time.temporal.ChronoUnit.DAYS; import static java.time.temporal.ChronoUnit.HOURS; import static java.time.temporal.ChronoUnit.MINUTES; public class DateTimeApiDemo { public static String format(Temporal co, String pattern) { DateTimeFormatter fmt = DateTimeFormatter.ofPattern(pattern, Locale.US); return fmt.format(co); } public static void parseStr(DateTimeFormatter formatter, String text) { try { TemporalAccessor ta = formatter.parseBest(text, OffsetDateTime::from, LocalDateTime::from, LocalDate::from); if (ta instanceof OffsetDateTime) { OffsetDateTime odt = OffsetDateTime.from(ta); System.out.println(\u0026quot;OffsetDateTime: \u0026quot; + odt); } else if (ta instanceof LocalDateTime) { LocalDateTime ldt = LocalDateTime.from(ta); System.out.println(\u0026quot;LocalDateTime: \u0026quot; + ldt); } else if (ta instanceof LocalDate) { LocalDate ld = LocalDate.from(ta); System.out.println(\u0026quot;LocalDate: \u0026quot; + ld); } else { System.out.println(\u0026quot;Parsing returned: \u0026quot; + ta); } } catch (DateTimeParseException e) { System.out.println(e.getMessage()); } } public static void main(String[] args) { // Get current date, time, and datetime LocalDate dateOnly = LocalDate.now(); // 2016-03-12 LocalTime timeOnly = LocalTime.now(); // 09:17:56.200 LocalDateTime dateTime = LocalDateTime.now(); // 2016-03-12T09:17:56.200 ZonedDateTime dateTimeWithZone = ZonedDateTime.now(); // 2016-03-12T09:17:56.202+11:00[Australia/Sydney] // ofXXX() method LocalDate ld1 = LocalDate.of(2012, 5, 2); // 2012-05-02 LocalDate ld2 = LocalDate.of(2012, Month.JULY, 4); // 2012-07-04 LocalDate ld3 = LocalDate.ofEpochDay(2002); // 1975-06-26 LocalDate ld4 = LocalDate.ofYearDay(2014, 40); // 2014-02-09 // The plusXXX( ) and minusXXX( ) Methods LocalDate ld = LocalDate.of(2015, 5, 2); // 2015-05-02 LocalDate ldp1 = ld.plusDays(5); // 2015-05-07 LocalDate ldp2 = ld.plusMonths(3); // 2015-08-02 LocalDate ldp3 = ld.plusWeeks(3); // 2015-05-23 LocalDate ldm1 = ld.minusMonths(7); // 2014-10-02 LocalDate ldm2 = ld.minusWeeks(3); // 2015-04-11 // Instant Instant i1 = Instant.ofEpochSecond(20); // i1:1970-01-01T00:00:20Z Instant i2 = Instant.ofEpochSecond(55); // i2:1970-01-01T00:00:55Z Duration d1 = Duration.ofSeconds(55); Duration d2 = Duration.ofSeconds(-17); // Compare instants System.out.println(\u0026quot;i1.isBefore(i2):\u0026quot; + i1.isBefore(i2)); // i1.isBefore(i2):true System.out.println(\u0026quot;i1.isAfter(i2):\u0026quot; + i1.isAfter(i2)); // i1.isAfter(i2):false // Add and subtract durations to instants Instant i3 = i1.plus(d1); Instant i4 = i2.minus(d2); System.out.println(\u0026quot;i1.plus(d1):\u0026quot; + i3); // i1.plus(d1):1970-01-01T00:01:15Z System.out.println(\u0026quot;i2.minus(d2):\u0026quot; + i4); // i2.minus(d2):1970-01-01T00:01:12Z // Add two durations System.out.println(\u0026quot;d1.plus(d2):\u0026quot; + d1.plus(d2)); // d1.plus(d2):PT38S // Print All Zone Id Set\u0026lt;String\u0026gt; zoneIds = ZoneId.getAvailableZoneIds(); for (String zoneId: zoneIds) { System.out.println(zoneId); } // DayOfWeek DayOfWeek dw1 = DayOfWeek.from(ld); // THURSDAY // Chrono LocalDateTime now = LocalDateTime.now(); System.out.println(\u0026quot;Year: \u0026quot; + now.get(ChronoField.YEAR)); System.out.println(\u0026quot;Month: \u0026quot; + now.get(ChronoField.MONTH_OF_YEAR)); System.out.println(\u0026quot;Day: \u0026quot; + now.get(ChronoField.DAY_OF_MONTH)); System.out.println(\u0026quot;Hour-of-day: \u0026quot; + now.get(ChronoField.HOUR_OF_DAY)); System.out.println(\u0026quot;Hour-of-AMPM: \u0026quot; + now.get(ChronoField.HOUR_OF_AMPM)); System.out.println(\u0026quot;AMPM-of-day: \u0026quot; + now.get(ChronoField.AMPM_OF_DAY)); Period p1 = Period.of(2, 3, 5); // 2 years, 3 months, and 5 days Period p2 = Period.ofDays(25); // 25 days Period p3 = Period.ofMonths(-3); // -3 months Period p4 = Period.ofWeeks(3); // 3 weeks (21 days) // Date Adjuster LocalDate ld3 = ld1.with(TemporalAdjusters.next(DayOfWeek.MONDAY)); System.out.println(ld3); ld3 = ld1.with(TemporalAdjusters.nextOrSame(DayOfWeek.TUESDAY)); System.out.println(ld3); // Date Time Format System.out.println(format(ld, \u0026quot;M/d/yyyy\u0026quot;)); System.out.println(format(ld, \u0026quot;MM/dd/yyyy\u0026quot;)); System.out.println(format(ld, \u0026quot;MMM dd, yyyy\u0026quot;)); System.out.println(format(ld, \u0026quot;MMMM dd, yyyy\u0026quot;)); System.out.println(format(ld, \u0026quot;EEEE, MMMM dd, yyyy\u0026quot;)); System.out.println(format(ld, \u0026quot;'Month' q 'in' QQQ\u0026quot;)); System.out.println(format(ld, \u0026quot;[MM-dd-yyyy][' at' HH:mm:ss]\u0026quot;)); // Parse date time DateTimeFormatter parser = DateTimeFormatter.ofPattern(\u0026quot;yyyy-MM-dd['T'HH:mm:ss[Z]]\u0026quot;); parseStr(parser, \u0026quot;2012-05-31\u0026quot;); // LocalDate: 2012-05-31 parseStr(parser, \u0026quot;2012-05-31T16:30:12\u0026quot;); // LocalDateTime: 2012-05-31T16:30:12 parseStr(parser, \u0026quot;2012-05-31T16:30:12-0500\u0026quot;); // OffsetDateTime: 2012-05-31T16:30:12-05:00 parseStr(parser, \u0026quot;2012-05-31Hello\u0026quot;); // Text '2012-05-31Hello' could not be parsed, unparsed text found at index 10 } }  "
},
{
	"uri": "/coding/java/java-note-5/",
	"title": "Java Note - 5: Lambda ",
	"tags": ["java"],
	"description": "Lambda expressions are Java&#39;s first step into functional programming",
	"content": " Lamda Lambda Best Practices Use Interfaces The most common misstep taken by an over-eager functional programmer is the use of functional interfaces in type signatures. In general, you should avoid using the functional interface types directly and instead provide single-method interfaces as arguments to your methods. These interfaces become a way to create self-documenting code and to provide meaningful type information, as well as leaving open the opportunity for your user to provide an actual Java type.\nUse Method Reference As much as possible, use a method reference instead of a lambda. Method references are not only shorter and easier to read, but using method references will get you thinking directly about the methods as values.\nDefine Lambdas Inline When you do use lambdas, define them inline. Unless you are doing some kind of fancy manipulation of your lambda, there is no reason to be assigning them to a variable. The reason that you want to define your lambdas inline is that it will allow your code to be more flexible when types change: you are letting type inference do more heavy lifting for you, and adapting your code to changing contexts.\nLambdas Should Always Be Threadsafe As we go through the rest of this book, we will see many places where lambdas make concurrent programming much easier. Many of the structures built off of lambdas will perform concurrent executions, sometimes without much warning. Because of this, your lambdas always need to be threadsafe. Pay particular attention to this with instance method handles, since thread-dangerous state can often be hiding within those instances.\nDon’t Use Null The null keyword should never be used in your code. Now that Java has the Optional type, there is simply no need for it. Whenever you have a method, you should be explicit about whether or not you accept null, and you generally shouldn’t accept it. This will save you from NullPointerException cropping up in obnoxious places, far from the site of the actual error. This is an especially painful problem when you start working with streams and lambdas, because the stack trace may not be very useful for you when you go to debug. The solution is to never accept null and to aggressively check for it, exploding loudly as soon as it occurs.\nDon’t Release Zalgo  Don\u0026rsquo;t mix asynchronous and synchronous execution in the same lamda expressoin.  Build Complexity from Simple Parts Use Types and the Compiler to Your Advantage Common functional Interfaces    Functional Interface Parameter Types Return Abstract Description Method Description Other Methods     Runnable none void run Runs an action    Supplier none T get Supplies a value of type T    Consumer T void accept Consumes a value of type T chain   BiConsumer T, U void accept Consumes a value of type T and U chain   Function T R apply A function with argument oftype T compose, andThen,identity   BiFunction T, U R apply A function with argument of type T and U andThen   UnaryOperator T T apply A unary operator on type T compose, andThen, identity   BiUnaryOperator T,T T apply A binary operator on type T andThen   Predicate T boolean test A Boolean-valued function and, or, negate, isEqual   BiPredicate T,T boolean test A Boolean-valued function with tow arguments and, or, negate    Method Reference    Syntax Description     TypeName::staticMethod A method reference to a static method of a class, an interface, or an enum   objectRef::instanceMethod A method reference to an instance method of the specified object   ClassName::instanceMethod A method reference to an instance method of an arbitrary object of the specified class   TypeName.super::instanceMethod A method reference to an instance method of the supertype of a particular object   ClassName::new A constructor reference to the constructor of the specified class   ArrayTypeName::new An array constructor reference to the constructor of the specified   array type     Lambda Demo import java.util.Locale; import java.util.Arrays; import java.util.List; import java.util.ArrayList; import java.util.function.Supplier; import java.util.function.Consumer; import java.util.function.Function; import java.util.function.BiFunction; import java.util.function.Predicate; import java.util.function.UnaryOperator; import java.util.function.BinaryOperator; import java.util.function.IntFunction; public class LambdaDemo { public static void main(String[] args) { // FunctionalInterface System.out.println(\u0026quot;x + y:\u0026quot; + engine((x, y) -\u0026gt; x + y)); // 6 System.out.println(\u0026quot;x - y:\u0026quot; + engine((x, y) -\u0026gt; x * y)); // 8 System.out.println(\u0026quot;x * y:\u0026quot; + engine((x, y) -\u0026gt; x / y)); // 0 System.out.println(\u0026quot;x / y:\u0026quot; + engine((x, y) -\u0026gt; x % y)); // 2 String[] strArray = new String[] { \u0026quot;abc\u0026quot;, \u0026quot;klm\u0026quot;, \u0026quot;xyz\u0026quot;, \u0026quot;pqr\u0026quot; }; List list = Arrays.asList(strArray); // Default Methods list.forEach(System.out::println); // abc // klm // xyz // pqr Arrays.sort(strArray, (first, second) -\u0026gt; first.compareToIgnoreCase(second)); list = Arrays.asList(strArray); System.out.println(\u0026quot;After sorting ... \u0026quot;); list.forEach(System.out::println); // After sorting ... // abc // klm // pqr // xyz // Common Functional Interfaces // Runnable repeat(5, () -\u0026gt; System.out.println(\u0026quot;Hello\u0026quot;)); UnaryOperator\u0026lt;String\u0026gt; upperCase = str -\u0026gt; str.toUpperCase(); BinaryOperator\u0026lt;String\u0026gt; concat = (left, right) -\u0026gt; left + right; System.out.println(\u0026quot; UnaryOperator upperCase \u0026quot; + upperCase.apply(\u0026quot;hello\u0026quot;)); System.out.println(\u0026quot; BinaryOperator\u0026lt;String\u0026gt; concat \u0026quot; + concat.apply(\u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;)); // Function Function\u0026lt;Long, Long\u0026gt; square = x -\u0026gt; x * x; Function\u0026lt;Long, Long\u0026gt; plusOne = x -\u0026gt; x + 1; // Function with andThen, Function\u0026lt;Long, Long\u0026gt; squarePlusOne = square.andThen(plusOne); Function\u0026lt;Long, Long\u0026gt; plusOneSquare = square.compose(plusOne); System.out.println(\u0026quot; 5 squarePlusOne is \u0026quot; + squarePlusOne.apply(5L)); // 26 System.out.println(\u0026quot; 5 plusOneSquare is \u0026quot; + plusOneSquare.apply(5L)); // 36 // Predicate Predicate\u0026lt;Integer\u0026gt; divisibleByThree = x -\u0026gt; x % 3 == 0; Predicate\u0026lt;Integer\u0026gt; divisibleByFive = x -\u0026gt; x % 5 == 0; Predicate\u0026lt;Integer\u0026gt; isNegative = x -\u0026gt; x \u0026lt; 0; // Predicate with AND , OR , NOT Predicate\u0026lt;Integer\u0026gt; divisibleByThreeAndFive = divisibleByThree.and(divisibleByFive); Predicate\u0026lt;Integer\u0026gt; divisibleByThreeOrFive = divisibleByThree.or(divisibleByFive); Predicate\u0026lt;Integer\u0026gt; isPositive = isNegative.negate(); System.out.println(\u0026quot; 15 is divisibleByThreeAndFive \u0026quot; + divisibleByThreeAndFive.test(15)); System.out.println(\u0026quot; 7 is divisibleByThreeAndFive \u0026quot; + divisibleByThreeOrFive.test(7)); System.out.println(\u0026quot; -1 is isPositive \u0026quot; + isPositive.test(7)); // static method reference Function\u0026lt;Integer, String\u0026gt; toBinary = x -\u0026gt; Integer.toBinaryString(x); System.out.println(toBinary.apply(19)); // Using a method reference Function\u0026lt;Integer, String\u0026gt; toBinary2 = Integer::toBinaryString; System.out.println(toBinary2.apply(19)); // static method lambda expression BiFunction\u0026lt;Integer, Integer, Integer\u0026gt; sum = (a, b) -\u0026gt; Integer.sum(a, b); System.out.println(sum.apply(3, 4)); // Instance method Supplier\u0026lt;Person\u0026gt; personSup = () -\u0026gt; new Person(); Function\u0026lt;String, Person\u0026gt; personFunc = (x) -\u0026gt; new Person(x); BiFunction\u0026lt;String, String, Person\u0026gt; personBiFunc = (x, y) -\u0026gt; new Person(x, y); // Consumer\u0026lt;String\u0026gt; personCon = (Person p) -\u0026gt; p.setTitle; System.out.println(personSup.get()); // Person() constructor called // name = Unknown, title = Unknown System.out.println(personFunc.apply(\u0026quot;John Doe\u0026quot;)); // Person( fullName ) constructor called // name = John Doe, title = Unknown System.out.println(personBiFunc.apply(\u0026quot;John\u0026quot;, \u0026quot;Doe\u0026quot;)); // Person(firstName, lastName ) constructor called // name = John, title = Unknown // Recursive Lambda Expressions IntFunction\u0026lt;Long\u0026gt; factorialCalc = new IntFunction\u0026lt;Long\u0026gt;() { @Override public Long apply(int n) { if (n \u0026lt; 0) { String msg = \u0026quot;Number must not be negative.\u0026quot;; throw new IllegalArgumentException(msg); } if (n == 0) { return 1L; } else { return n * this.apply(n - 1); } } }; int n = 5; long fact = factorialCalc.apply(n); System.out.println(\u0026quot;Factorial of \u0026quot; + n + \u0026quot; is \u0026quot; + fact); // Factorial of 5 is 120 } private static int engine(Calculator calculator) { int x = 2, y = 4; return calculator.calculate(x, y); } public static void repeat(int n, Runnable action) { for (int i = 0; i \u0026lt; n; i++) action.run(); } } @FunctionalInterface interface Calculator { int calculate(int x, int y); } final class Person { String firstName; String lastName; String fullName; String title; public Person() { System.out.println(\u0026quot; Person() constructor called \u0026quot;); } public Person(String fullName) { this.fullName = fullName; System.out.println(\u0026quot; Person( fullName ) constructor called \u0026quot;); } public Person(String firstName, String lastName) { this.firstName = firstName; this.lastName = lastName; System.out.println(\u0026quot; Person(firstName, lastName ) constructor called \u0026quot;); } public void setTitle(String t) { this.title = t; System.out.println(\u0026quot; Person setTitle ( t ) called \u0026quot;); } public String getFirstName() { return firstName; } public String getFullName() { return fullName == null ?( firstName != null ? firstName : \u0026quot;Unknown\u0026quot; ): fullName; } @Override public String toString() { return \u0026quot;name = \u0026quot; + getFullName() + \u0026quot;, title = \u0026quot; + (title != null ? title : \u0026quot;Unknown\u0026quot;); } }  "
},
{
	"uri": "/coding/java/java-note-7/",
	"title": "Java Note - 7: Stream API",
	"tags": ["java"],
	"description": "Java Stream",
	"content": " Stream Iterations Collections and Maps Filtering Mapping LambdaCollectionDemo Lambda Collection Map Demo public class LambdaCollectionMapDemo { public static void main(String[] args) { // FunctionalInterface System.out.println(\u0026quot;x + y:\u0026quot; + engine((x, y) -\u0026gt; x + y));// w w w .j av a 2s. c om System.out.println(\u0026quot;x - y:\u0026quot; + engine((x, y) -\u0026gt; x * y)); System.out.println(\u0026quot;x * y:\u0026quot; + engine((x, y) -\u0026gt; x / y)); System.out.println(\u0026quot;x / y:\u0026quot; + engine((x, y) -\u0026gt; x % y)); String[] strArray = new String[] { \u0026quot;abc\u0026quot;, \u0026quot;klm\u0026quot;, \u0026quot;xyz\u0026quot;, \u0026quot;pqr\u0026quot; }; List list = Arrays.asList(strArray); // Default Methods list.forEach(System.out::println); Arrays.sort(strArray, (first, second) -\u0026gt; first.compareToIgnoreCase(second)); list = Arrays.asList(strArray); System.out.println(\u0026quot;After sorting ... \u0026quot;); list.forEach(System.out::println); // Common Functional Interfaces // Runnable repeat(5, () -\u0026gt; System.out.println(\u0026quot;Hello\u0026quot;)) ; // UnaryOperator UnaryOperator\u0026lt;String\u0026gt; upperCase = str -\u0026gt; str.toUpperCase(); // BiUnaryOperator BinaryOperator\u0026lt;String\u0026gt; concat = (left,right) -\u0026gt; left + right; System.out.println( \u0026quot; UnaryOperator upperCase \u0026quot;+upperCase.apply( \u0026quot;hello\u0026quot;) ); System.out.println( \u0026quot; BinaryOperator\u0026lt;String\u0026gt; concat \u0026quot;+ concat.apply(\u0026quot;hello\u0026quot;,\u0026quot;world\u0026quot;)); } private static int engine(Calculator calculator) { int x = 2, y = 4; return calculator.calculate(x, y); } public static void repeat(int n, Runnable action) { for (int i = 0; i \u0026lt; n; i++) action.run(); } } @FunctionalInterface interface Calculator { int calculate(int x, int y); }  "
},
{
	"uri": "/coding/java/java-note-6/",
	"title": "Java Note - Part 6: Lambda &amp; Collection",
	"tags": ["java"],
	"description": "",
	"content": " Lambda and Collection Iterations Collections and Maps Filtering Mapping LambdaCollectionDemo Lambda Collection Map Demo public class LambdaCollectionMapDemo { public static void main(String[] args) { // FunctionalInterface System.out.println(\u0026quot;x + y:\u0026quot; + engine((x, y) -\u0026gt; x + y));// w w w .j av a 2s. c om System.out.println(\u0026quot;x - y:\u0026quot; + engine((x, y) -\u0026gt; x * y)); System.out.println(\u0026quot;x * y:\u0026quot; + engine((x, y) -\u0026gt; x / y)); System.out.println(\u0026quot;x / y:\u0026quot; + engine((x, y) -\u0026gt; x % y)); String[] strArray = new String[] { \u0026quot;abc\u0026quot;, \u0026quot;klm\u0026quot;, \u0026quot;xyz\u0026quot;, \u0026quot;pqr\u0026quot; }; List list = Arrays.asList(strArray); // Default Methods list.forEach(System.out::println); Arrays.sort(strArray, (first, second) -\u0026gt; first.compareToIgnoreCase(second)); list = Arrays.asList(strArray); System.out.println(\u0026quot;After sorting ... \u0026quot;); list.forEach(System.out::println); // Common Functional Interfaces // Runnable repeat(5, () -\u0026gt; System.out.println(\u0026quot;Hello\u0026quot;)) ; // UnaryOperator UnaryOperator\u0026lt;String\u0026gt; upperCase = str -\u0026gt; str.toUpperCase(); // BiUnaryOperator BinaryOperator\u0026lt;String\u0026gt; concat = (left,right) -\u0026gt; left + right; System.out.println( \u0026quot; UnaryOperator upperCase \u0026quot;+upperCase.apply( \u0026quot;hello\u0026quot;) ); System.out.println( \u0026quot; BinaryOperator\u0026lt;String\u0026gt; concat \u0026quot;+ concat.apply(\u0026quot;hello\u0026quot;,\u0026quot;world\u0026quot;)); } private static int engine(Calculator calculator) { int x = 2, y = 4; return calculator.calculate(x, y); } public static void repeat(int n, Runnable action) { for (int i = 0; i \u0026lt; n; i++) action.run(); } } @FunctionalInterface interface Calculator { int calculate(int x, int y); }  "
},
{
	"uri": "/tags/javascript/",
	"title": "Javascript",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/linux/",
	"title": "Linux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/mobile/",
	"title": "Mobile",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/os/",
	"title": "OS",
	"tags": ["os"],
	"description": "",
	"content": "\r\rCentOS 6/7 Multi-Boot Setup\rBootable usb preparation Download dvd iso from url or torrent Use Win32 Image Writer to create usb. ( Bootice is useful tool to reformat the USB as origin ) Install CentOS on virtual machine Before you install, you are better to backup anything on the device which you are going to install, and chcek your internet is working properly. CentOS provide a friendly and nice installation process.\n\r\rCentOS 7 Server note\rPrelude This article is mainly to help experienced user install and setup CentOS 7 Server. Prerequisites You are familiar with CentOS, at least you have some experience working on Linux system. You are familiar with basic bash/shell command Things to do after installing CentOS server How to setup your server Firewall setup sudo firewall-cmd --permanent --add-port=22/tcp sudo firewall-cmd --permanent --add-port=21/tcp sudo firewall-cmd --permanent --add-port=80/tcp sudo firewall-cmd --permanent --add-port=443/tcp sudo firewall-cmd --permanent --add-port=8080/tcp sudo firewall-cmd --reload SSH server setup !\n\r\rGrub Trouble Shooting\rUpdate Grub Menu for dual OS boot Change BIOS * Start your PC by pressing a pressing a special function key (usually F12, F10 or F2 depending on the vendor specifications). * Some PC\u0026rsquo;s BIOS has BOOT tab option, open the BOOT tab, you will find the OS Boot Manager. It is the simplest way to fix the issue. If your PC\u0026rsquo;s BIOS has no such setting feature, you need to check the next section.\n\r\rLubuntu 16 desktop\rPrelude There is no big difference against setup between Lubuntu and Ubuntu. I just want to keep a latest version of setup for myself as reference Prerequisites You have Lubuntu 16 in place Internet is available UFW setup sudo ufw enable sudo ufw allow 80/tcp sudo ufw allow ssh sudo ufw allow 443/tcp sudo ufw allow 8000/tcp SSH server setup !!! For production environment, SSH should be secured by the CA\n\r\rRaspberry Pi setup\rPrelude *This note is mainly to record how to setup Raspberry Pi as file server. Prerequisites You have a Raspberry Pi with pre-installed raspbian SD card You are happy to get your hands dirty You have some basic computer concept. RPi is short for Raspberry Pi My Raspberry Pi is a bit old I only have the RPi 1 model B with pre-installed raspbian SD card in place.\n\r\rUbuntu 14 -- desktop setup \u0026amp; dual boot \rThis article is mainly to help beginner install Ubuntu desktop at the first time. If you are looking for setup of Ubuntu server, please check out the blog \u0026ndash; Ubuntu server setup Where to install Linux? How to answer this quetion really depends user\u0026rsquo;s computer knowledge and skills. Basically Linux can be installed on almost any PC, laptop, embedded device or tablet. So there are some suggestions for people with different level skills.\n\r\rUbuntu 14 -- desktop, extra tools\rPrerequisites Install Ubunt 14 Desktop Internet is availble Install chrome wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i google-chrome-stable_current_amd64.deb Install Umake sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make sudo apt-get update sudo apt-get install ubuntu-make Install IDEs via Umake umake ide pycharm umake web visual-studio-code umake android android-studio General prerequest sed -i \u0026quot;/^## deb .*partner/ s/^## //\u0026quot; /etc/apt/sources.list \u0026amp;\u0026amp; apt-get update sudo apt-get install geany byobu p7zip-full gimp pdfshuffler scribus \\ filezilla lftp ubuntu-restricted-extras vlc pyrenamer \\ imagemagick hugin darktable skype avidemux Remove Games sudo apt-get remove aisleriot gnome-mahjongg gnomine gnome-sudoku Geany themes cd ~/Downloads git clone https://github.\n\r\rUbuntu 14 -- server setup\rPrelude This article is mainly to help experienced user install and setup Ubuntu server. If you are not familiar with Ubuntu system, please install Ubuntu desktop version at first, and you can follow Ubuntu deskstop setup Prerequisites You are familiar with Ubuntu, at least you have some experience working on Linux system. You are familiar with bash/shell script You are going to setup Ubuntu server for special purpose.\n\r\rUbuntu 16 server note\rPrelude This article is mainly to help experienced user install and setup Ubuntu 16 LTS Server. If you are looking for the information for Ubuntu 14, please go to the page Ubuntu 14 server setup Prerequisites You are familiar with Ubuntu, at least you have some experience working on Linux system. You are familiar with basic bash/shell command Wireless Setup If you install ubuntu server on a laptop, you might end up to setup the wifi first.\n\r\r"
},
{
	"uri": "/tags/os/",
	"title": "Os",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/php/",
	"title": "Php",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/powershell/",
	"title": "Powershell",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/coding/shell/ps-note-1/",
	"title": "Powershell Note - 1",
	"tags": ["powershell"],
	"description": "Introduction of Powershell ...",
	"content": " Prerequisites  The OS of Windows 7 or later version Install Powershell 4 or later version. You can find it on Microsoft website Has basic computer knowledge  Launch PS command prompt  Type command on windows command prompt: powershell  Get PS Version  Type $psversiontable   PS C:\\\u0026gt;$psversiontable ## You might see sth below Name Value ---- ----- PSVersion 4.0 WSManStackVersion 3.0 SerializationVersion 1.1.0.1 CLRVersion 4.0.30319.42000 BuildVersion 6.3.9600.18773 PSCompatibleVersions {1.0, 2.0, 3.0, 4.0} PSRemotingProtocolVersion 2.2  "
},
{
	"uri": "/tags/project/",
	"title": "Project",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/projects/",
	"title": "Projects",
	"tags": ["project"],
	"description": "",
	"content": "\r\rAngular 4 Crm Project\rNg4Crm is reusable CRM project for real-world business based on Angular 4\n\r\rAngularjs Webpack ES6 Starter\rThis starter was inspired by another similar angular webpack starter repository\n\r\rFlatApi - Restful API for python dev\rFlatApi is a zero coding and zero configuration restful API server inspired by Json-Server and Eve\n\r\rLaravel MVC Starter\rThis starter is the starting point of laravel 5 MVC project. \r\rReact Redux Crm Project\rReact-Crm is reusable CRM starter project for real-world business based on React 15.4\n\r\rVue 2 Admin Project\rVue2Admin is a fully responsive admin template that is inspired by AdminLTE\n\r\rVue 2 Crm Project\rVue2Crm is a reusable Vue.js CRM starter project for real-world business based on Vue 2 PWA template\n\r\rZend Framework 2 MVC Starter\rThis starter is the starting point of zend framework 2 MVC project\n\r\r"
},
{
	"uri": "/tags/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/coding/python/",
	"title": "Python",
	"tags": ["python"],
	"description": "",
	"content": "\r\rPython Note1\rGood practices for package \u0026amp; module\n\r\rPython Note2\rClosure \u0026amp; Decorator\n\r\rPython Note3\rString \u0026amp; Representation\n\r\rPython Note4\rIterables \u0026amp; Iteration\n\r\rPython Note5\rPython Note5\n\r\rPython Note6\rPython Note6\n\r\rPython Note7\rPython Note7\n\r\rPython Note8\rPython Note8\n\r\r"
},
{
	"uri": "/coding/python/python-note-1/",
	"title": "Python Note1",
	"tags": ["python"],
	"description": "Good practices for package &amp; module",
	"content": " Package \u0026amp; Module  Packages are modules that contain other modules. Packages are generally implemented as directories containing a special __init__.py file. The __init__.py file is executed when the package is imported. Packages can contain sub packages which themselves are implemented with __init__.py files in directories. The module objects for packages have a __path__ attribute.  sys.path  List of directories which Python searches for modules.  # list directories \u0026gt;\u0026gt;\u0026gt;import sys \u0026gt;\u0026gt;\u0026gt;sys.path   Use append to attach the package directory to sys.path\n Append the package to sys.path If you append the relative path of the package to sys.path, you need to make sure the it is correct.  Example\n path: path_root\\package0\\module0.py The code of module0.py  def test(): print('module0 -- test !')   Test module importing  cd root python \u0026gt;\u0026gt;\u0026gt;import sys \u0026gt;\u0026gt;\u0026gt;sys.append('package0') \u0026gt;\u0026gt;\u0026gt;import module0 \u0026gt;\u0026gt;\u0026gt;module0.test module0 -- test ! \u0026gt;\u0026gt;\u0026gt;exit() # It will fail if you launch python at the parent directory of root cd .. python \u0026gt;\u0026gt;\u0026gt;import sys \u0026gt;\u0026gt;\u0026gt;sys.append('package0') \u0026gt;\u0026gt;\u0026gt;import module0 Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; ImportError: No module named 'module0' ### It will success if you adjust relative path as below \u0026gt;\u0026gt;\u0026gt;sys.append('path_root/package0') \u0026gt;\u0026gt;\u0026gt;import module0 \u0026gt;\u0026gt;\u0026gt;module0.test module0 -- test !   PYTHONPATH  Environment variable adds paths to sys.path Use previous module0.py to test Linux  export PYTHONPATH=package0 python \u0026gt;\u0026gt;\u0026gt;import module0 module0 -- test !   Windows  set PYTHONPATH=package0 python \u0026gt;\u0026gt;\u0026gt;import module0 module0 -- test !  Package structure  Convert a package into a module Basic structure of package0  path_root \u0026lt;--// it must be attached sys.path +---package0 \u0026lt;--// package root +---__init__.py \u0026lt;--// package init file \\---module0.py   * Sample code -init.py` ( The sample code is for demo purpose)\nprint('package0 --init...')   Test\npython \u0026gt;\u0026gt;\u0026gt;import package0 package0 --init... \u0026gt;\u0026gt;\u0026gt;import package0.module0 \u0026gt;\u0026gt;\u0026gt;package0.module0.test() module0 -- test !  Add a FileReader class into module0.py\n Sample code of module0.py\n  class FileReader: def __init__(self, filename): self.filename = filename self.f = open(self.filename, 'rt') def close(self): self.f.close() def read(self): return self.f.read()   Test  fr=package0.module0.FileReader('package0/module0.py') \u0026gt;\u0026gt;\u0026gt;fr.read() \u0026gt;\u0026gt;\u0026gt;fr.close()   Update __init__.py  from package0.module0 import FileReader   Test again  \u0026gt;\u0026gt;\u0026gt;import package0 \u0026gt;\u0026gt;\u0026gt;r=package0.FileReader('package0/module0.py') \u0026gt;\u0026gt;\u0026gt;r.read() \u0026gt;\u0026gt;\u0026gt;r.close()  Subpackage  Demo below shows how to add subpackages Add sub-package under the package0 Structure  path_root \u0026lt;--// it must be attached sys.path +---package0 \u0026lt;--// package root +---compress | +---__init__.py | +---bz.py | +---gz.py +---__init__.py \u0026lt;--// package init file \\---module0.py   Sample code - gz.py  import gzip import sys opener=gzip.open if __name__ == '__main__': f = gzip.open(sys.argv[1], mode='wt') f.write(' '.join(sys.argv[2:])) f.close()   Sample code - bz.py  import bz2 import sys opener = bz2.open if __name__ == '__main__': f = bz2.open(sys.argv[1], mode='wt') f.write(' '.join(sys.argv[2:])) f.close()   Test by creating two compressed files  python3 -m package0.compress.gz test.gz data compressed with gz python3 -m package0.compress.bz test.bz2 data compressed with bz2   Change FileReader.py to read above files  from package0.compress import gz, bz import os extension_map = { '.gz':gz.opener, '.bz2':bz.opener } class FileReader: def __init__(self, filename): self.filename = filename extension = os.path.splitext(filename)[1] opener = extension_map.get(extension, open) self.f = opener(self.filename, 'rt') def close(self): self.f.close() def read(self): return self.f.read()   Test  \u0026gt;\u0026gt;\u0026gt; import package0 \u0026gt;\u0026gt;\u0026gt; r=package0.FileReader('test.gz') \u0026gt;\u0026gt;\u0026gt; r.read() 'data compressed with gz' \u0026gt;\u0026gt;\u0026gt; r=package0.FileReader('test.bz2') \u0026gt;\u0026gt;\u0026gt; r.read() 'data compressed with bz2'  Import with relative path  Example below show how to use relative path to import packages  path_root +---package0 +---compress | +---__init__.py | +---bz.py \u0026lt;--// from ..module0 import FileReader | +---gz.py \u0026lt;--// from .bz import bz.opener +---__init__.py \\---module0.py  Namespace package  Namespace packages have no __init__.py Python scans all entries in sys.path. If a matching directory with __init__.py is found, a normal package is loaded Otherwise, all matching directories in sys.path are considered part of the namespace package Example 1\n Structure of package  path_root0 +---package0 +---module0.py path_root1 +---package0 +---module0.py   Test  \u0026gt;\u0026gt;\u0026gt; import sys \u0026gt;\u0026gt;\u0026gt; sys.path.append('gh') \u0026gt;\u0026gt;\u0026gt; sys.path.append('path_root0') \u0026gt;\u0026gt;\u0026gt; sys.path.append('path_root1') \u0026gt;\u0026gt;\u0026gt; import package0 \u0026gt;\u0026gt;\u0026gt; package0.__path__ _NamespacePath(['gh\\\\package0', 'path_root0\\\\package0', 'path_root0\\\\package0'])  Example 2\n Structure of package  path_root0 +---package0 +---module0.py path_root1 +---package0 +---module0.py path_root2 +---package0 +---__init__.py \u0026lt;--// Namespace should not include __init__.py +---module0.py   Test  \u0026gt;\u0026gt;\u0026gt; import sys \u0026gt;\u0026gt;\u0026gt; sys.path.append('path_root0') \u0026gt;\u0026gt;\u0026gt; sys.path.append('path_root1') \u0026gt;\u0026gt;\u0026gt; sys.path.append('path_root2') \u0026gt;\u0026gt;\u0026gt; import package0 \u0026gt;\u0026gt;\u0026gt; package0.__path__ _NamespacePath(['path_root2\\\\package0'])   Recommended Executable directories project_root \u0026lt;--// Project root directory contains everything +---__main__.py +---project_name | +---__init__.py | +---resource.py | +---package0 | | +---__init__.py | | +---module0.py | +---test | +---__init__.py | +---test.py \\---setup.py  Visual Studio Code setup  Install python plugin Python - donjayamanne Setup launch.json  { \u0026quot;version\u0026quot;: \u0026quot;0.2.0\u0026quot;, \u0026quot;configurations\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;Python\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;python\u0026quot;, \u0026quot;request\u0026quot;: \u0026quot;launch\u0026quot;, \u0026quot;stopOnEntry\u0026quot;: true, \u0026quot;pythonPath\u0026quot;: \u0026quot;${config:python.pythonPath}\u0026quot;, \u0026quot;program\u0026quot;: \u0026quot;${workspaceRoot}/__main__.py\u0026quot;, \u0026quot;cwd\u0026quot;: \u0026quot;${workspaceRoot}\u0026quot;, \u0026quot;env\u0026quot;:{}, \u0026quot;envFile\u0026quot;: \u0026quot;${workspaceRoot}/.env\u0026quot;, \u0026quot;debugOptions\u0026quot;: [ \u0026quot;WaitOnAbnormalExit\u0026quot;, \u0026quot;WaitOnNormalExit\u0026quot;, \u0026quot;RedirectOutput\u0026quot; ] } ] ... }   Sample code - __main__.py  from package1 import FileReader if __name__ == \u0026quot;__main__\u0026quot;: app = FileReader('C:/ws/python/plural/pbb/gh/test.gz') print(app.read()) app.close() app = FileReader('C:/ws/python/plural/pbb/gh/test.bz2') print(app.read()) app.close()  Function \u0026amp; Lambda Function  statement which defines a function and binds it to a name Must have a name Arguments delimited by parentheses, separated by commas Zero or more arguments supported -zero arguments ⇒ empty parentheses Body is an indented block of statements A return statement is required to return anything other than None Regular functions can have docstrings‣ Easy to access for testing  Lambda  Expression which evaluates to a function Anonymous Argument list terminated by colon, separated by commas Zero or more arguments supported - zero arguments ⇒ lambda: Body is a single expression The return value is given by the body expression. No return statement is permitted. Lambdas cannot have docstrings Awkward or impossible to test Example  \u0026gt;\u0026gt;\u0026gt;names=list(['Harry Ho', 'Harry Porter', 'Harry Charles']) \u0026gt;\u0026gt;\u0026gt;sorted(names, key=lambda name:name.split()[-1])) ['Harry Charles', 'Harry Ho', 'Harry Porter']  Callable  Callable instance\n Example Sample code - Resolver.py  class Resolver: def __init__(self): self.cache={} def __call__(self, host): if host not in self.cache: self.cache[host]= socket.gethostbyname(host) return self.cache[host]   Sample code - __main__.py  from package1 import Resolver if __name__ == \u0026quot;__main__\u0026quot;: app = Resolver() print(app('harryho.github.io')) print(app.__call__('harryho.github.io'))  Callable class\n  \u0026gt;\u0026gt;\u0026gt;seq_class_1 = list \u0026gt;\u0026gt;\u0026gt;sequence= seq_class_1('abc') \u0026gt;\u0026gt;\u0026gt;type(sequence) \u0026lt;class 'list'\u0026gt; \u0026gt;\u0026gt;\u0026gt;seq_class_1 = tuple \u0026gt;\u0026gt;\u0026gt;sequence= seq_class_1('abc') \u0026gt;\u0026gt;\u0026gt;type(sequence) \u0026lt;class 'tuple'\u0026gt;  Extended arguments and call  Extended arguments - syntax: def extend( *args, **kargs)\n Example\n  \u0026gt;\u0026gt;\u0026gt; def tag(name, **attrs): ... t='\u0026lt;' ... for k,v in attrs.items(): ... t+= '{key}=\u0026quot;{val}\u0026quot;'.format(key=k, val=str(v)) ... t+='\u0026gt;' ... return t ... \u0026gt;\u0026gt;\u0026gt; tag('a', href=\u0026quot;harryho.github.io\u0026quot;, target=\u0026quot;_blank\u0026quot;, id=\u0026quot;link\u0026quot;) '\u0026lt;href=\u0026quot;harryho.github.io\u0026quot;id=\u0026quot;link\u0026quot;target=\u0026quot;_blank\u0026quot;\u0026gt;'   Extended call - sample  \u0026gt;\u0026gt;\u0026gt; def f1 ( a1, a2, *a3): ... print(a1) ... print(a2) ... print(a3) ... \u0026gt;\u0026gt;\u0026gt; aa=(2,3) \u0026gt;\u0026gt;\u0026gt; f1(aa) Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: f1() missing 1 required positional argument: 'a2' \u0026gt;\u0026gt;\u0026gt; f1(*aa) 2 3 () \u0026gt;\u0026gt;\u0026gt; def f2(a1, a2): ... print(a1) ... print(a2) ... \u0026gt;\u0026gt;\u0026gt; f2(*aa) 2 3 \u0026gt;\u0026gt;\u0026gt; aa=(1,2,3,4) \u0026gt;\u0026gt;\u0026gt; f2(*aa) Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: f2() takes 2 positional arguments but 4 were given   Transpose example  \u0026gt;\u0026gt;\u0026gt; mon=[12,13,15,12,14,18,13] \u0026gt;\u0026gt;\u0026gt; tue=[11,14,16,12,11,17,14] \u0026gt;\u0026gt;\u0026gt; for d in zip(mon, tue): ... print(d) ... (12, 11) (13, 14) (15, 16) (12, 12) (14, 11) (18, 17) (13, 14) \u0026gt;\u0026gt;\u0026gt; daily = [mon, tue] \u0026gt;\u0026gt;\u0026gt; from pprint import pprint as pp \u0026gt;\u0026gt;\u0026gt; pp(daily) [[12, 13, 15, 12, 14, 18, 13], [11, 14, 16, 12, 11, 17, 14]] \u0026gt;\u0026gt;\u0026gt; transposed = list(zip(*daily)) \u0026gt;\u0026gt;\u0026gt; pp(transposed) [(12, 11), (13, 14), (15, 16), (12, 12), (14, 11), (18, 17), (13, 14)]  "
},
{
	"uri": "/coding/python/python-note-2/",
	"title": "Python Note2",
	"tags": ["python"],
	"description": "Closure &amp; Decorator",
	"content": " Closure \u0026amp; Decorator LEGB rules  Local, Enclosing, Gloable, Built-in  Local function  Useful for specialized, one-off functions Aid in code organization and readability Similar to lambdas, but more general May contain multiple expressions May contain statements  Closure  Closure maintain references to objects from earlier scopes LEGB does not apply when making new bindings Usage of nonlocal\n Example  def make_timer(): last_called = None def elapsed(): nonlocal last_called now = time.time() if last_called is None: last_called = now return None result = now - last_called last_called = now return result return elapsed if __name__ == \u0026quot;__main__\u0026quot;: mt = make_timer() print(mt ()) print('-----------------------------') print(mt ()) print('-----------------------------') print(mt ())  Use as function factory\n Example   def raise_to(exp): def raise_to_exp(x): return pow(x, exp) return raise_to_exp if __name__ == \u0026quot;__main__\u0026quot;: square=raise_to(2) cube= raise_to(3) print(square(2)) print(cube(2)) ## test result: ## 4 ## 8   Decorator  Replace, enhance, or modify existing functions Does not change the original function definition Calling code does not need to change Decorator mechanism uses the modified function’s original name Example\n use function as decorator  def escape_unicode(f): def wrap(*args, **kwargs): x = f(*args, **kwargs) return ascii(x) return wrap @escape_unicode def hello_greek(): return 'γειά σου κόσμος' if __name__ == \u0026quot;__main__\u0026quot;: print(hello_greek()) ## test result: ## '\\u03b3\\u03b5\\u03b9\\u03ac \\u03c3\\u03bf\\u03c5 \\u03ba\\u03cc\\u03c3\\u03bc\\u03bf\\u03c2'   Example: multiple decorators including function and instance  class Trace: def __init__(self): self.enabled = True def __call__(self, f): @functools.wraps(f) def wrap(*args, **kwargs): if self.enabled: print('Calling {}'.format(f.__name__)) return f(*args, **kwargs) return wrap def escape_unicode(f): @functools.wraps(f) def wrap(*args, **kwargs): x = f(*args, **kwargs) return ascii(x) return wrap @tracer @escape_unicode def hello_greek(): return 'γειά σου κόσμος' ## test result ## Calling hello_greek ## '\\u03b3\\u03b5\\u03b9\\u03ac \\u03c3\\u03bf\\u03c5 \\u03ba\\u03cc\\u03c3\\u03bc\\u03bf\\u03c2'   Use as validator  def check_non_negative(index): def validator(f): def wrap(*args): if args[index] \u0026lt; 0: raise ValueError( 'Arg {} must be non-negative'.format(index) ) return f(*args) return wrap return validator @check_non_negative(1) def create_seq(value, size): return [value]*size if __name__ == \u0026quot;__main__\u0026quot;: create_seq('0', -3) ## test result .... 'Arg {} must be non-negative'.format(index) ValueError: Arg 1 must be non-negative   Properties \u0026amp; Class @staticmethod  No access needed to either class or instance objects. Most likely an implementation detail of the class. May be able to be moved to become a module-scope function  @classmethod  Requires access to the class object to call other class methods or the constructor Always use self for the first argument to instance methods. Always use cls for the first argument to class methods. Use case: use as named constructors  class FileStream(object): @classmethod def from_file(cls, filepath, ignore_comments=False, *args, **kwargs): with open(filepath, 'r') as fileobj: for obj in cls(fileobj, ignore_comments, *args, **kwargs): yield obj @classmethod def from_socket(cls, socket, ignore_comments=False, *args, **kwargs): raise NotImplemented ## Placeholder until implemented def __init__(self, iterable, ignore_comments=False, *args, **kwargs): ...  @property  Encapsulation Example\nclass A @property def prop(self): return self._prop @prop.setter def prop(self, value): self._prop = value   "
},
{
	"uri": "/coding/python/python-note-3/",
	"title": "Python Note3",
	"tags": ["python"],
	"description": "String &amp; Representation",
	"content": " String \u0026amp; Representation str()  print() -\u0026gt; str() -\u0026gt; __str(self)__ Fallback to repr(). By default, str() simply calls repr() Produces a readable, human-friendly representation of an object It is also the string constructor  repr()  Exactness is more important than human-friendliness Suited for debugging. Unambiguous, precise, include type Includes identifying information. Generally best for logging and developers The default repr() is not very helpful As a rule, you should always write a repr() for your classes standard library reprlib.repr() is a replacement for repr()\n Example  \u0026gt;\u0026gt;\u0026gt; l = ['a'] * 1000 \u0026gt;\u0026gt;\u0026gt; import reprlib \u0026gt;\u0026gt;\u0026gt; reprlib.repr(l) \u0026quot;['a', 'a', 'a', 'a', 'a', 'a', ...]\u0026quot;   format  \u0026quot;{:f}\u0026quot;.format(obj) -\u0026gt; __format__(self, f) Fallback to str()  built-in functions  ascii() replaces non-ASCII characters with escape sequences chr() converts an integer Unicode codepoint to a single character string ord() converts a single character to its integer Unicode codepoint  Numeric \u0026amp; scalar types int  unlimited precision signed integer bool in an int\n\u0026gt;\u0026gt;\u0026gt; False - True -1 \u0026gt;\u0026gt;\u0026gt; False - False 0 \u0026gt;\u0026gt;\u0026gt; True - False 1 \u0026gt;\u0026gt;\u0026gt; True - True 0   float  IEEE-754 double precision (64-bit) 53 bits of binary precision 15 to 17 bits of decimal precision Floating-point numbers are represented in computer hardware as base 2 (binary) fractions.\n 0.001 has value 0/2 + 0/4 + 1\u0026frasl;8. These two fractions have identical values, the only real difference being that the first is written in base 10 fractional notation, and the second in base 2\n Unfortunately, most decimal fractions cannot be represented exactly as binary fractions. A consequence is that, in general, the decimal floating-point numbers you enter are only approximated by the binary floating-point numbers actually stored in the machine.\n  Example of float data\n\u0026gt;\u0026gt;\u0026gt; f=0.9-0.8 \u0026gt;\u0026gt;\u0026gt; f 0.09999999999999998 \u0026gt;\u0026gt;\u0026gt; f=0.2-0.1 \u0026gt;\u0026gt;\u0026gt; f 0.1 \u0026gt;\u0026gt;\u0026gt; f=0.8-0.7 \u0026gt;\u0026gt;\u0026gt; f 0.10000000000000009 \u0026gt;\u0026gt;\u0026gt; float(2**53) 9007199254740992.0 \u0026gt;\u0026gt;\u0026gt; float(2**53+1) 9007199254740992.0 \u0026gt;\u0026gt;\u0026gt; float(2**53+2) 9007199254740994.0 \u0026gt;\u0026gt;\u0026gt; float(2**53+3) 9007199254740996.0 \u0026gt;\u0026gt;\u0026gt; float(2**53+4) 9007199254740996.0   decimal  standard library module decimal containing the class Decimal decimal floating point configurable (although finite) precision defaults to 28 digits of decimal precision identity is preserved. x == (x // y) * y + x % y, so integer division and modulus are consistent Example\n\u0026gt;\u0026gt;\u0026gt; from decimal import Decimal \u0026gt;\u0026gt;\u0026gt; Decimal(0.6)-Decimal(0.5) Decimal('0.09999999999999997779553950750') \u0026gt;\u0026gt;\u0026gt; Decimal('0.6')-Decimal('0.5') Decimal('0.1') \u0026gt;\u0026gt;\u0026gt; Decimal(0.2)-Decimal(0.1) Decimal('0.1000000000000000055511151231') \u0026gt;\u0026gt;\u0026gt; Decimal(0.8)-Decimal(0.7) Decimal('0.1000000000000000888178419700') \u0026gt;\u0026gt;\u0026gt; Decimal('0.8')-Decimal('0.7') Decimal('0.1') ## Change the precise \u0026gt;\u0026gt;\u0026gt; import decimal \u0026gt;\u0026gt;\u0026gt; decimal.getcontext().prec=4 \u0026gt;\u0026gt;\u0026gt; Decimal(-7) / Decimal(3) Decimal('-2.333') ## Python handle different type in different way with % \u0026gt;\u0026gt;\u0026gt; Decimal(-7) % Decimal(3) Decimal('-1') ## \u0026gt;\u0026gt;\u0026gt; Decimal(-7) // Decimal(3) Decimal('-2') ## The next multiple of 3 towards zero is -6 \u0026gt;\u0026gt;\u0026gt; (-7) // (3) -3 ## The largest multiple of 3 less than -7 is -9 \u0026gt;\u0026gt;\u0026gt; (-7) % (3) 2 ## The   fraction  standard library module fractions containing the class Fraction for rational numbers\n Denominator cannot be zero. e.g. 2 / 3, 2 is numerator, 3 is denominator.  Example\n\u0026gt;\u0026gt;\u0026gt;from fractions import Fraction \u0026gt;\u0026gt;\u0026gt;f = Fraction(\u0026quot;2/3\u0026quot;) \u0026gt;\u0026gt;\u0026gt;f Faction(2,3) \u0026gt;\u0026gt;\u0026gt; Fraction(0.2) Fraction(3602879701896397, 18014398509481984) \u0026gt;\u0026gt;\u0026gt; Fraction(0.5) Fraction(1, 2) \u0026gt;\u0026gt;\u0026gt; Fraction(Decimal('0.3')) Fraction(3, 10) \u0026gt;\u0026gt;\u0026gt; Fraction(Decimal('0.3')) // Fraction(6, 7) 0 \u0026gt;\u0026gt;\u0026gt; Fraction(Decimal('0.3')) % Fraction(6, 7) Fraction(3, 10) \u0026gt;\u0026gt;\u0026gt; Fraction(Decimal('0.3')) - Fraction(6, 7) Fraction(-39, 70) \u0026gt;\u0026gt;\u0026gt; Fraction(Decimal('0.3')) + Fraction(6, 7) Fraction(81, 70) \u0026gt;\u0026gt;\u0026gt; Fraction(Decimal('0.3')) * Fraction(6, 7) Fraction(9, 35) \u0026gt;\u0026gt;\u0026gt; from math import floor, ceil \u0026gt;\u0026gt;\u0026gt; ceil(Fraction('8/7')) 2 \u0026gt;\u0026gt;\u0026gt; floor(Fraction('8/7')) 1   number base conversions    bin() oct() hex() int(x, base)     base 2 base 8 base 16 bases 2 to 36     Example  \u0026gt;\u0026gt;\u0026gt; 0b0101 5 \u0026gt;\u0026gt;\u0026gt; 0o63527 26455 \u0026gt;\u0026gt;\u0026gt; 0o63 51 \u0026gt;\u0026gt;\u0026gt; 0xad2 2770 \u0026gt;\u0026gt;\u0026gt; hex(22) '0x16' \u0026gt;\u0026gt;\u0026gt; oct(22) '0o26' \u0026gt;\u0026gt;\u0026gt; bin(22) '0b10110'  complex  complex construction string argument may have parentheses but must not contain spaces cmath standard Library module contains complex equivalents of math Example\n\u0026gt;\u0026gt;\u0026gt; 1+1j (1+1j) \u0026gt;\u0026gt;\u0026gt; type(1+1j) \u0026lt;class 'complex'\u0026gt; \u0026gt;\u0026gt;\u0026gt; (1+1j) + (1-1j) (2+0j) \u0026gt;\u0026gt;\u0026gt; (1+1j) + (2-2j) (3-1j) \u0026gt;\u0026gt;\u0026gt; (1+1j) - (2-2j) (-1+3j) \u0026gt;\u0026gt;\u0026gt; complex('-2+1j') (-2+1j) \u0026gt;\u0026gt;\u0026gt; complex('(-2+1j)') (-2+1j) \u0026gt;\u0026gt;\u0026gt; complex(-2, 1) (-2+1j)   date \u0026amp; time  Gregorian calendar weekday()\n0 Monday 1 Tuesday 2 Wednesday 3 Thursday 4 Friday 5 Saturday 6 Sunday  isoweekday()\n1 Monday 2 Tuesday 3 Wednesday 4 Thursday 5 Friday 6 Saturday 7 Sunday  timedelta\n Constructor accepts and sums • days • seconds • microseconds • milliseconds • minutes • hours • weeks Instances store only • days • seconds • microseconds  Example\nfrom datetime import (date, time) from datetime import datetime as Datetime from datetime import timedelta from datetime import (tzinfo, timezone) ### date \u0026gt;\u0026gt;\u0026gt; datetime.date(2000,month=2, day=10) datetime.date(2000, 2, 10) \u0026gt;\u0026gt;\u0026gt; datetime.date.today() datetime.date(2014, 3, 14) \u0026gt;\u0026gt;\u0026gt; datetime.date.fromtimestamp(99999999) datetime.date(1973, 3, 3) \u0026gt;\u0026gt;\u0026gt; datetime.date.fromordinal(9999) datetime.date(28, 5, 17) \u0026gt;\u0026gt;\u0026gt; datetime.date.max datetime.date(9999, 12, 31) \u0026gt;\u0026gt;\u0026gt; datetime.date.min datetime.date(1, 1, 1) \u0026gt;\u0026gt;\u0026gt; datetime.date.today().weekday() 4 \u0026gt;\u0026gt;\u0026gt; datetime.date.today().isoweekday() 5 \u0026gt;\u0026gt;\u0026gt; d = datetime.date.fromtimestamp(99999999) \u0026gt;\u0026gt;\u0026gt; d.strftime('%A %d %B %b') 'Saturday 03 March Mar' \u0026gt;\u0026gt;\u0026gt; d.strftime('%A %d %B %b %Y') 'Saturday 03 March Mar 1973' \u0026gt;\u0026gt;\u0026gt; \u0026quot;The date is {:%A %d %B %b %y}\u0026quot;.format(d) 'The date is Saturday 03 March Mar 73' \u0026gt;\u0026gt;\u0026gt; \u0026quot;{date:%A} {date.day} {date:%B} {date:%Y}\u0026quot;.format(date=d) 'Saturday 3 March 1973' ### time \u0026gt;\u0026gt;\u0026gt; t=datetime.time(23,59,1,7451) \u0026gt;\u0026gt;\u0026gt; t.isoformat() '23:59:01.007451' \u0026gt;\u0026gt;\u0026gt; t.strftime('%Hh%Mm%Ss') '23h59m01s' \u0026gt;\u0026gt;\u0026gt; datetime.time.max datetime.time(23, 59, 59, 999999) \u0026gt;\u0026gt;\u0026gt; datetime.time.min datetime.time(0, 0) ### datetime \u0026gt;\u0026gt;\u0026gt; datetime.datetime(2001,6,7,8,15,25,895) datetime.datetime(2001, 6, 7, 8, 15, 25, 895) \u0026gt;\u0026gt;\u0026gt; dt= datetime.datetime(2001,6,7,8,15,25,895) \u0026gt;\u0026gt;\u0026gt; dt.isoformat() '2001-06-07T08:15:25.000895' ### timedelta \u0026gt;\u0026gt;\u0026gt; td = datetime.timedelta(weeks=2, days=1, hours=1, minutes=1, microseconds=2, milliseconds= 1) \u0026gt;\u0026gt;\u0026gt; td datetime.timedelta(15, 3660, 1002)   "
},
{
	"uri": "/coding/python/python-note-4/",
	"title": "Python Note4",
	"tags": ["python"],
	"description": "Iterables &amp; Iteration",
	"content": " Iterables \u0026amp; Iteration Comprehensions  Comprehensions can process more than one input sequence Multiple input sequences in comprehensions work like nested for-loops Comprehensions can also have multiple if-clauses interspersed with the for-clauses Later clauses in a comprehension can reference variables bound in earlier clauses Comprehension can also appear in the result expression of a comprehension, resulting in nested sequences Python provides a number of functional-style tools for working with iterators map() calls a function for each element in its input sequences map() returns an iterable object, not a fully-evaluated collection map() results are lazily evaluated, meaning that you must access them to force their calculation map() results are typically evaluated through the use of iteration constructs such as for-loops You must provide as many input sequences to map() as the callable argument has parameters map() takes one element from each input sequence for each output element it produces map() stops producing output when its shortest input sequence is exhausted map() can be used to implement the same behavior as comprehensions in some cases filter() selects values from an input sequence which match a specified criteria filter() passes each element in its input sequence to the function argument filter() returns an iterable over the input elements for which the function argument is truthy Like map(), filter() produces its output lazily If you pass None as the first argument to filter(), it yields the input values which evaluate to True in a boolean context reduce() cumulatively applies a function to the elements of an input sequence reduce() calls the input function with two arguments: the accumulated result so far, and the next element in the sequence reduce() is a generalization of summation reduce() returns the accumulated result after all of the input has been processed If you pass an empty sequence to reduce() it will raise a TypeError reduce() accepts an optional initial value argument This initial value is conceptually added to the front of the input sequence The initial value is returned if the input sequence is empty The map() and reduce() functions in Python are related to the ideas in the map-reduce algorithm  Example ```python ## Comprehensions \u0026gt;\u0026gt;\u0026gt; points [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)] \u0026gt;\u0026gt;\u0026gt; points_c=[(x,y) for x in range(3) for y in range(4) ] \u0026gt;\u0026gt;\u0026gt; points_c [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)] \u0026gt;\u0026gt;\u0026gt; points_d=[(x,y) ... for x in range(3) ... if x \u0026gt; 0 ... for y in range(4) ... if y \u0026gt; x ] \u0026gt;\u0026gt;\u0026gt; points_d [(1, 2), (1, 3), (2, 3)] \u0026gt;\u0026gt;\u0026gt; points_e = [ [ y-1 for y in range(x) ] for x in range(3)] \u0026gt;\u0026gt;\u0026gt; points_e [[], [-1], [-1, 0]] ## map \u0026gt;\u0026gt;\u0026gt; sizes =['small','medium', 'large'] \u0026gt;\u0026gt;\u0026gt; colors = ['lavender', 'teal', 'burnt orange'] \u0026gt;\u0026gt;\u0026gt; animals = ['koala', 'platypus', 'salamander'] \u0026gt;\u0026gt;\u0026gt; def combine( size, color, animal): ... return '{} {} {}'.format(size, color, animal) ... \u0026gt;\u0026gt;\u0026gt; list(map(combine, sizes, colors, animals )) ['small lavender koala', 'medium teal platypus', 'large burnt orange salamander'] \u0026gt;\u0026gt;\u0026gt; import itertools \u0026gt;\u0026gt;\u0026gt; def combine2(quantity, size, color, animal): ... return '{} - {} {} {}'.format(quantity, size, color, animal) ... \u0026gt;\u0026gt;\u0026gt; list(map(combine2, itertools.count(), sizes, colors, animals )) ['0 - small lavender koala', '1 - medium teal platypus', '2 - large burnt orange salamander'] ## filter \u0026gt;\u0026gt;\u0026gt; negs = filter(lambda x: x\u0026lt;0 , [3, -1, 2,-4,0,9,-33]) \u0026gt;\u0026gt;\u0026gt; list(negs) [-1, -4, -33] \u0026gt;\u0026gt;\u0026gt; notnones = filter(None, [0,1, False, True, [], () , {}, (1,2,), [1,2], '', 'yes']) \u0026gt;\u0026gt;\u0026gt; list(map(type, list(notnones))) [\u0026lt;class 'int'\u0026gt;, \u0026lt;class 'bool'\u0026gt;, \u0026lt;class 'tuple'\u0026gt;, \u0026lt;class 'list'\u0026gt;, \u0026lt;class 'str'\u0026gt;] ## reduce \u0026gt;\u0026gt;\u0026gt; from functools import reduce \u0026gt;\u0026gt;\u0026gt; import operator \u0026gt;\u0026gt;\u0026gt; reduce(operator.add, [1,2,3,4,5]) 15 ### x is interim result , y is the next sequence value \u0026gt;\u0026gt;\u0026gt; def mul(x, y): ... print(' mul {} {} '.format(x,y)) ... return x * y ... \u0026gt;\u0026gt;\u0026gt; reduce( mul, range(1, 5)) mul 1 2 mul 2 3 mul 6 4 24 ```   Python\u0026rsquo;s next() function calls __next__() on its argument Iterators in Python must support the __next__() method __next__() should return the next item in the sequence, or raise StopIteration if it is exhausted Python\u0026rsquo;s iter() function calls __iter__() on its argument Iterable objects in Python must support the __iter__() method __iter__() should return an iterator for the iterable object Objects with a __getitem__() method that accepts consecutive integer indices starting at zero are also iterables Iterables implemented via __getitem__() must raise IndexError when they are exhausted Example\n Iterator  class ExampleIterator: def __init__(self, data): self.index = 0 self.data = data def __iter__(self): return self def __next__(self): if self.index \u0026gt;= len(self.data): raise StopIteration() rslt = self.data[self.index] self.index += 1 return rslt   Iterable   class ExampleIterable: def __init__(self): self.data = [1, 2, 3] def __iter__(self): return ExampleIterator(self.data)   AnotherIterable  class AnotherIterable: def __init__(self): self.data = [1, 2, 3] def __getitem__(self, idx): return self.data[idx]  The extended form of iter() accepts a zero-argument callable and a sentinel value\n Extended iter() repeatedly calls the callable argument until it returns the sentinel value\n The values produced by extended iter() are those returned from the callable\n Example\n\u0026gt;\u0026gt;\u0026gt; ts = iter(datetime.datetime.now, None) \u0026gt;\u0026gt;\u0026gt; next(ts) datetime.datetime(2017, 7, 14, 14, 38, 10, 752761) \u0026gt;\u0026gt;\u0026gt; next(ts) datetime.datetime(2017, 7, 14, 14, 38, 13, 373613) \u0026gt;\u0026gt;\u0026gt; next(ts) datetime.datetime(2017, 7, 14, 14, 38, 14, 754588) ## Read file ## Content of the file file.txt ## You are reading ## the file ## you won't read ## the ## END ## but not see the END above \u0026gt;\u0026gt;\u0026gt; with open('file.txt', 'rt') as f: ... for line in iter(lambda: f.readline().strip(), 'END'): ... print(line) ... You are reading the file you won't read the  One use case for extended iter() is to iterate using simple functions\n Protocol conforming iterators must also be iterable\n Example\n Sensor  import datetime import itertools import random import time class Sensor: def __iter__(self): return self def __next__(self): return random.random() sensor = Sensor() timestamps = iter(datetime.datetime.now, None) for stamp, value in itertools.islice(zip(timestamps, sensor), 10): print(stamp, value) time.sleep(1)   "
},
{
	"uri": "/coding/python/python-note-5/",
	"title": "Python Note5",
	"tags": ["python"],
	"description": "Python Note5",
	"content": " Inheritance \u0026amp; Polymorphism  Specify single inheritance by putting a base class in parentheses after defining a class\u0026rsquo;s name Subclasses have all of the methods of their base class It\u0026rsquo;s often best to explicitly call a base class initializer from a subclass\u0026rsquo;s initializer If a class with a single base class doesn\u0026rsquo;t define an initializer, the base class\u0026rsquo;s initializer will be called automatically on construction Python treats __init__() like any other method Base class __init__() is not called if overridden Use super() to call base class __init__() isinstance() takes an object as its first argument and a type as its second isinstance() determines if its first argument is an instance of the second argument, or any subclass of the second argument isinstance() can accept a tuple of types as its second argument, in which it returns True if the first argument is of any of those types Checking for specific types is rare in Python and is sometimes regarded as bad design isinstance() determines if its first argument is a direct or indirect subclass of, or the same type as, the second argument Multiple inheritance means having more than one direct base class You declare multiple base classes with a comma-separated list of class names in parentheses after a class\u0026rsquo;s name in a class definition A class can have as many base classes as you want Python uses a well-defined \u0026ldquo;method resolution order\u0026rdquo; to resolve methods at runtime If a multiply-inheriting class defines no initializer, Python will automatically call the initializer of its first base class on construction __bases__ is a tuple of types on a class object which defines the base classes for the class __bases__ is in the same order as in the class definition __bases__ is populated for both single and multiple inheritance Method resolution order defines the order in which Python will search an inheritance graph for methods MRO is short for Method Resolution Order MRO is stored as a tuple of types in the __mro__ attribute of a class The mro() method on type objects returns the contents of __mro__ as a list To resolve a method, Python uses the first entry in a class\u0026rsquo;s MRO which has the requested method MRO is dependent on base class declaration order MRO is calculated by Python using the C3 algorithm MRO honors base-class ordering from class definitions MRO puts subclasses before base classes The relative order of classes in an MRO is consistent across all classes It is possible to specify an inconsistent base class ordering, in which case Python will raise a TypeError when the class definition is reached super() operates by using the elements in an MRO that come after some specified type super() returns a proxy object which forwards calls to the correct objects There are two distinct types of super() proxies, bound and unbound Unbound super() proxies are primarily used for implementing other Python features Bound proxies can be bound to either class objects or instances Calling super() with a base-class and derived-class argument returns a proxy bound to a class Calling super() with a class and an instance of that class returns a proxy bound to an instance A super() proxy takes the MRO of its second argument (or the type of its second argument), finds the first argument in that MRO, and uses everything after it in the MRO for method resolution Since class-bound proxies aren\u0026rsquo;t bound to an instance, you can’t directly call instance methods that they resolve for you However, classmethods resolved by class-bound proxies can be called directly Python will raise a TypeError if the second argument is not a subclass or instance of the first argument Inappropriate use of super() can violate some design constraints * Calling super() with no arguments inside an instance method produces an instance-bound proxy Calling super() with no arguments inside a classmethod produces a class-bound proxy In both cases, the no-argument form of super() is the same as calling super() with the method\u0026rsquo;s class as the first argument and the method\u0026rsquo;s first argument as the second Since super() works on MROs and not just a class\u0026rsquo;s base classes, class can be designed to cooperate without prior knowledge of one another The class object is at the core of Python\u0026rsquo;s object model object is the ultimate base class for all other classes in Python If you don\u0026rsquo;t specify a base class for a class, Python automatically uses object as the base Because object is in every class\u0026rsquo;s inheritance graph, it shows up in every MRO. object provides hooks for Python\u0026rsquo;s comparison operators object provides default __repr__() and __str__() implementations object implements the core attribute lookup and management functionality in Python Inheritance in Python is best used as a way to share implementation  Explanation with example  Example to demo the weird super() in Python\nfrom pprint import pprint as pp class Parent(object): name = 'Parent' @classmethod def do_otherthing(self): print('This is from Parent. {} do_otherthing'.format(self.name)) ## print('This is from Parent. do_otherthing {}'.format(self.name)) def do_something(self): print('This is from Parent. The name is {}'.format(self.name)) class Child(Parent): name = 'Child' @classmethod def do_otherthing(self): print('This is from Child. {} do_otherthing'.format(self.name)) ## print('This is from Child. do_otherthing {}'.format(self.name)) def do_something(self): print(\u0026quot;This is from Child. The name is {} \u0026quot;.format(self.name)) class OtherChild(Parent): name = 'OtherChild' def do_something(self): print(\u0026quot;This is from OtherChild. The name is {} \u0026quot;.format(self.name)) class OtherOtherChild(Parent): name = 'OtherOtherChild' def do_something(self): print(\u0026quot;This is from OtherOtherChild. The name is {} \u0026quot;.format(self.name)) class GrandChild(Child, OtherChild, OtherOtherChild): name = 'GrandChild' @classmethod def do_otherthing(self): print('This is from GrandChild. {} do_otherthing'.format(self.name)) def do_something(self): print(\u0026quot;This is from GrandChild. The name is {}\u0026quot;.format(self.name)) if __name__ == \u0026quot;__main__\u0026quot;: pp(Child.__mro__) pp(GrandChild.__mro__) c = Child() c.do_something() gc = GrandChild() gc.do_something() print('Class bound super()') super(Child, Child).do_otherthing() super(Child, GrandChild).do_otherthing() super(GrandChild, GrandChild).do_otherthing() print('Instance bound super()') super(Child, gc).do_something() super(OtherChild, gc).do_something() super(GrandChild , gc).do_something() ### test result #(\u0026lt;class '__main__.Child'\u0026gt;, #\u0026lt;class '__main__.Parent'\u0026gt;, #\u0026lt;class 'object'\u0026gt;) #(\u0026lt;class '__main__.GrandChild'\u0026gt;, ## \u0026lt;class '__main__.Child'\u0026gt;, ## \u0026lt;class '__main__.OtherChild'\u0026gt;, ## \u0026lt;class '__main__.OtherOtherChild'\u0026gt;, ## \u0026lt;class '__main__.Parent'\u0026gt;, ## \u0026lt;class 'object'\u0026gt;) ## This is from Child. The name is Child ## This is from GrandChild. The name is GrandChild ## Class bound super() ## This is from Parent. Child do_otherthing ## This is from Parent. GrandChild do_otherthing ## This is from Child. GrandChild do_otherthing ## Instance bound super() ## This is from OtherChild. The name is GrandChild ## This is from OtherOtherChild. The name is GrandChild ## This is from Child. The name is GrandChild ## Multi-inheritance in Python is very different from ## other OO language like C++, C#, Java ## Above result make me surprised a the first time, ## but after I check the MRO then I can understand ## why many veterans suggest to avoid multi-inheritance. ## Its `super` \u0026quot;Magic\u0026quot; really confuses many people.  Let\u0026rsquo;s break down the how the super works with sample code\n Case 1:\n code : super(Child, Child).do_otherthing() super takes the MRO of its second argument Child\n\u0026lt;class '__main__.Child'\u0026gt;, \u0026lt;class '__main__.Parent'\u0026gt;, \u0026lt;class 'object'\u0026gt;  super finds the first argument Child in that MRO, and uses everything after it in the MRO for method resolution\n super uses the method from Parent which is after Child, and bind the Child class object\n  Case 2:\n code : super(GrandChild, GrandChild).do_otherthing() super takes the MRO of its second argument GrandChild\n\u0026lt;class '__main__.GrandChild'\u0026gt;, \u0026lt;class '__main__.Child'\u0026gt;, \u0026lt;class '__main__.OtherChild'\u0026gt;, \u0026lt;class '__main__.OtherOtherChild'\u0026gt;, \u0026lt;class '__main__.Parent'\u0026gt;, \u0026lt;class 'object'\u0026gt;  super finds the first argument GrandChild in that MRO, and uses everything after it in the MRO for method resolution\n super uses the method from Child which is after GrandChild, and bind the GrandChild class object\n  Case 3:\n code : super(OtherChild, gc).do_something() super takes the MRO of the type GrandChild of its second argument gc\n\u0026lt;class '__main__.GrandChild'\u0026gt;, \u0026lt;class '__main__.Child'\u0026gt;, \u0026lt;class '__main__.OtherChild'\u0026gt;, \u0026lt;class '__main__.OtherOtherChild'\u0026gt;, \u0026lt;class '__main__.Parent'\u0026gt;, \u0026lt;class 'object'\u0026gt;  super finds the first argument OtherChild in that MRO, and uses everything after it in the MRO for method resolution\n super uses the method from OtherOtherChild which is after OtherChild, and bind the gc class object\n   "
},
{
	"uri": "/coding/python/python-note-6/",
	"title": "Python Note6",
	"tags": ["python"],
	"description": "Python Note6",
	"content": " Collection Collection protocols  To implement a protocol, objects must support certain operations. Most collections implement container, sized and iterable. All except dict and set are sequences Container: membership testing using in and not in Sized: Determine number of elements with len(s) Iterable: Can produce an iterator with iter(s), e.g.\n for item in iterable: do_something(item) `len(s)`  Sequence:\n Retrieve elements by index, e.g. item = seq[index] Find items by value index = seq.index(item) Count items num = seq.count(item) Produce a reversed sequence r = reversed(seq)  Set: set algebra operations, including method and infix operators . e.g.\n subset proper subset equal not equal proper superset superset intersections union symmetric difference difference  Built-in collections\n     Protocol Implementing Collections     Container str, list, range, tuple, set, bytes, dict   Sized str, list, range, tuple, set, bytes, dict   Iterable str, list, range, tuple, set, bytes, dict   Sequence str, list, range, tuple, bytes   Set set   Mutable Sequence list   Mutable Set set   Mutable Mapping dict    Example * sortedset ```python from bisect import bisect_left from collections.abc import Sequence, Set from itertools import chain class SortedSet(Sequence, Set): def __init__(self, items=None): self._items = sorted(set(items)) if items is not None else [] def __contains__(self, item): try: self.index(item) return True except ValueError: return False def __len__(self): return len(self._items) def __iter__(self): return iter(self._items) def __getitem__(self, index): result = self._items[index] return SortedSet(result) if isinstance(index, slice) else result def __repr__(self): return \u0026quot;SortedSet({})\u0026quot;.format(repr(self._items) if self._items else '') def __eq__(self, rhs): if not isinstance(rhs, SortedSet): return False return self._items == rhs._items def _is_unique_and_sorted(self): return all(self[i] \u0026lt; self[i + 1] for i in range(len(self) - 1)) def index(self, item): assert self._is_unique_and_sorted() index = bisect_left(self._items, item) if (index != len(self._items)) and self._items[index] == item: return index raise ValueError(\u0026quot;{} not found\u0026quot;.format(repr(item))) def count(self, item): assert self._is_unique_and_sorted() return int(item in self._items) def __add__(self, rhs): return SortedSet(chain(self._items, rhs._items)) def __mul__(self, rhs): return SortedSet(self) if rhs \u0026gt; 0 else SortedSet() def __rmul__(self, lhs): return self * lhs def issubset(self, iterable): return self \u0026lt;= SortedSet(iterable) def issuperset(self, iterable): return self \u0026gt;= SortedSet(iterable) def intersection(self, iterable): return self \u0026amp; SortedSet(iterable) def union(self, iterable): return self | SortedSet(iterable) def symmetric_difference(self, iterable): return self ^ SortedSet(iterable) def difference(self, iterable): return self - SortedSet(iterable) ``` * test case ```python import unittest from sorted_set import SortedSet class TestConstruction(unittest.TestCase): def test_empty(self): s = SortedSet([]) def test_from_sequence(self): s = SortedSet([7, 8, 3, 1]) def test_with_duplicates(self): s = SortedSet([8, 8, 8]) def test_from_iterable(self): def gen6842(): yield 6 yield 8 yield 4 yield 2 g = gen6842() s = SortedSet(g) def test_default_empty(self): s = SortedSet() class TestContainerProtocol(unittest.TestCase): def setUp(self): self.s = SortedSet([6, 7, 3, 9]) def test_positive_contained(self): self.assertTrue(6 in self.s) def test_negative_contained(self): self.assertFalse(2 in self.s) def test_positive_not_contained(self): self.assertTrue(5 not in self.s) def test_negative_not_contained(self): self.assertFalse(9 not in self.s) class TestSizedProtocol(unittest.TestCase): def test_empty(self): s = SortedSet() self.assertEqual(len(s), 0) def test_one(self): s = SortedSet([42]) self.assertEqual(len(s), 1) def test_ten(self): s = SortedSet(range(10)) self.assertEqual(len(s), 10) def test_with_duplicates(self): s = SortedSet([5, 5, 5]) self.assertEqual(len(s), 1) class TestIterableProtocol(unittest.TestCase): def setUp(self): self.s = SortedSet([7, 2, 1, 1, 9]) def test_iter(self): i = iter(self.s) self.assertEqual(next(i), 1) self.assertEqual(next(i), 2) self.assertEqual(next(i), 7) self.assertEqual(next(i), 9) self.assertRaises(StopIteration, lambda: next(i)) def test_for_loop(self): index = 0 expected = [1, 2, 7, 9] for item in self.s: self.assertEqual(item, expected[index]) index += 1 class TestSequenceProtocol(unittest.TestCase): def setUp(self): self.s = SortedSet([1, 4, 9, 13, 15]) def test_index_zero(self): self.assertEqual(self.s[0], 1) def test_index_four(self): self.assertEqual(self.s[4], 15) def test_index_one_beyond_the_end(self): with self.assertRaises(IndexError): self.s[5] def test_index_minus_one(self): self.assertEqual(self.s[-1], 15) def test_index_minus_five(self): self.assertEqual(self.s[-5], 1) def test_index_one_before_the_beginning(self): with self.assertRaises(IndexError): self.s[-6] def test_slice_from_start(self): self.assertEqual(self.s[:3], SortedSet([1, 4, 9])) def test_slice_to_end(self): self.assertEqual(self.s[3:], SortedSet([13, 15])) def test_slice_empty(self): self.assertEqual(self.s[10:], SortedSet()) def test_slice_arbitrary(self): self.assertEqual(self.s[2:4], SortedSet([9, 13])) def test_slice_full(self): self.assertEqual(self.s[:], self.s) class TestReprProtocol(unittest.TestCase): def test_repr_empty(self): s = SortedSet() self.assertEqual(repr(s), \u0026quot;SortedSet()\u0026quot;) def test_repr_some(self): s = SortedSet([42, 40, 19]) self.assertEqual(repr(s), \u0026quot;SortedSet([19, 40, 42])\u0026quot;) if __name__ == '__main__': unittest.main() ```  "
},
{
	"uri": "/coding/python/python-note-7/",
	"title": "Python Note7",
	"tags": ["python"],
	"description": "Python Note7",
	"content": " Exception \u0026amp; Assertion  Avoid bad practices in Python exception handling. Always specify an exception type with except, but don\u0026rsquo;t be too general.\n Don\u0026rsquo;t Use Assertions for checking arguments EXamples\n lookup exception  def lookups(): s = [1, 4, 6] try: item = s[5] except LookupError: print(\u0026quot;Handled IndexError\u0026quot;) d = dict(a=65, b=66, c=67) try: value = d['x'] except LookupError: print(\u0026quot;Handled KeyError\u0026quot;) if __name__ == '__main__': lookups() ## test result ## Handled IndexError ## Handled KeyError   unicode exception  def unicode_exception(): try: b'\\x81'.decode('utf-8') except UnicodeError as e: print(e) print(\u0026quot;encoding:\u0026quot;, e.encoding) print(\u0026quot;reason:\u0026quot;, e.reason) print(\u0026quot;object:\u0026quot;, e.object) print(\u0026quot;start:\u0026quot;, e.start) print(\u0026quot;end\u0026quot;, e.end) if __name__ == '__main__': unicode_exception() ## test result ## 'utf-8' codec can't decode byte 0x81 in position 0: invalid start byte ## encoding: utf-8 ## reason: invalid start byte ## object: b'\\x81' ## start: 0 ## end 1   customized exception with parameters  import sys import io class TriangleError(Exception): def __init__(self, text, sides): super().__init__(text) self._sides = tuple(sides) @property def sides(self): return self._sides def __str__(self): return \u0026quot;'{}' for sides {}\u0026quot;.format(self.args[0], self._sides) def __repr__(self): return \u0026quot;TriangleError({!r}, {!r}\u0026quot;.format(self.args[0], self._sides) def triangle_area(a, b, c): sides = sorted((a, b, c)) if sides[2] \u0026gt; sides[0] + sides[1]: raise TriangleError(\u0026quot;Illegal triangle\u0026quot;, sides) p = (a + b + c) / 2 a = math.sqrt(p * (p - a) * (p - b) * (p - c)) return a def triangle_exception(): try: a = triangle_area(3, 4, 10) print(a) except TriangleError as e: try: print(e, file=sys.stdin) except io.UnsupportedOperation as f: print(e) print(f) print(f.__context__ is e) if __name__ == '__main__': triangle_exception() ## test result ## 'Illegal triangle' for sides (3, 4, 10) ## not writable ## True   chaining \u0026amp; trackback  import math import traceback class InclinationError(Exception): pass def inclination(dx, dy): try: return math.degrees(math.atan(dy / dx)) except ZeroDivisionError as e: raise InclinationError(\u0026quot;Slope cannot be vertical\u0026quot;) from e def traceback_inclination(): try: inclination(0, 5) except InclinationError as e: print(e.__traceback__) traceback.print_tb(e.__traceback__) s = traceback.format_tb(e.__traceback__) print(s) if __name__ == '__main__': traceback_inclination() print(\u0026quot;Done.\u0026quot;) ## test result #\u0026lt;traceback object at 0x000000BE3B4F5108\u0026gt; ## File \u0026quot;/path/to/your_project/__main__.py\u0026quot;, line 190, in traceback_inclination ## inclination(0, 5) ## File \u0026quot;/path/to/your_project/__main__.py\u0026quot;, line 185, in inclination ## raise InclinationError(\u0026quot;Slope cannot be vertical\u0026quot;) from e #[' File \u0026quot;/path/to/your_project/__main__.py\u0026quot;, line 190, ## in traceback_inclination\\n ## inclination(0,## 5)\\n', ## ' File \u0026quot;/path/to/your_project/__main__.py\u0026quot;, line 185, ## in inclination\\n ## raise ## InclinationError(\u0026quot;Slope cannot be vertical\u0026quot;) from e\\n']   assertion \u0026amp; exception  from pprint import pprint as pp def wrap(text, line_length): \u0026quot;\u0026quot;\u0026quot;Wrap a string to a specified line length. Args: text: The string to wrap. line_length: The line length in characters. Returns: A wrapped string. Raises: ValueError: If line_length is not positive. \u0026quot;\u0026quot;\u0026quot; if line_length \u0026lt; 1: raise ValueError(\u0026quot;line_length {} is not positive\u0026quot;.format(line_length)) words = text.split() if max(map(len, words)) \u0026gt; line_length: raise ValueError(\u0026quot;line_length must be at least as long as the longest word\u0026quot;) lines_of_words = [] current_line_length = line_length for word in words: if current_line_length + len(word) \u0026gt; line_length: lines_of_words.append([]) ## new line current_line_length = 0 lines_of_words[-1].append(word) current_line_length += len(word) + len(' ') lines = [' '.join(line_of_words) for line_of_words in lines_of_words] result = '\\n'.join(lines) assert all(len(line) \u0026lt;= line_length for line in result.splitlines()) return result wealth_of_nations = \u0026quot;The annual labour of every nation is the fund which or\u0026quot; \\ \u0026quot;iginally supplies it with all the necessaries and conveniencies of life wh\u0026quot; \\ \u0026quot;ich it annually consumes, and which consist always either in the immediate\u0026quot; \\ \u0026quot; produce of that labour, or in what is purchased with that produce from ot\u0026quot; \\ \u0026quot;her nations. According, therefore, as this produce, or what is purchased w\u0026quot; \\ \u0026quot;ith it, bears a greater or smaller proportion to the number of those who a\u0026quot; \\ \u0026quot;re to consume it, the nation will be better or worse supplied with all the\u0026quot; \\ \u0026quot; necessaries and conveniencies for which it has occasion.\u0026quot; if __name__ == \u0026quot;__main__\u0026quot;: pp(wrap( wealth_of_nations, 40)) ## test result ## ('The annual labour of every nation is the\\n' ## 'fund which originally supplies it with\\n' ## 'all the necessaries and conveniencies of\\n' ## 'life which it annually consumes, and\\n' ## 'which consist always either in the\\n' ## 'immediate produce of that labour, or in\\n' ## 'what is purchased with that produce from\\n' ## 'other nations. According, therefore, as\\n' ## 'this produce, or what is purchased with\\n' ## 'it, bears a greater or smaller\\n' ## 'proportion to the number of those who\\n' ## 'are to consume it, the nation will be\\n' ## 'better or worse supplied with all the\\n' ## 'necessaries and conveniencies for which\\n' ## 'it has occasion.')   "
},
{
	"uri": "/coding/python/python-note-8/",
	"title": "Python Note8",
	"tags": ["python"],
	"description": "Python Note8",
	"content": " Context managers context manager  context manager an object designed to be used in a with-statement\nwith context-manager: body with context-manager: context-manager.begin() body context-manager.end() with context-manager: setup() body teardown() with context-manager: context-manager.begin() body context-manager.end() with context-manager: allocation() body deallocation() with context-manager: enter() body exit()  A context-manager ensures that resources are properly and automatically managed\n enter() prepares the manager for use exit() cleans it up  Context-manager Protocol\n__enter__(self) __exit__(self, exc_type, ## exception type exc_val, ## exception object exc_tb) ## exception traceback  __enter__()\n called before entering with-statement body return value bound to as variable can return value of any type commonly returns context-manager itself  __exit__() called when with-statement body exits\n By default __exit__() propagates exceptions thrown from the with-statement’s code block\n __exit__() should never explicitly re-raise exceptions\n __exit__() should only raise exceptions if it fails itself\n  contextlib  contextlib : standard library module for working with context managers contextmanager is a decorator you can use to create new context managers\n@contextlib.contextmanager def my_context_manager(): ## \u0026lt;ENTER\u0026gt; try: yield [value] ## \u0026lt;NORMAL EXIT\u0026gt; except: ## \u0026lt;EXCEPTIONAL EXIT\u0026gt; raise with my_context_manager() as x: ## . . .  contextmanager lets you define context-managers with simple control flow It allows you to leverage the statefulness of generators\n contextmanager uses standard exception handling to propagate exceptions\n contextmanager explicitly re-raises – or doesn’t catch – to propagate exceptions\n contextmanager swallows exceptions by not re-raising them\n Exceptions propagated from inner context managers will be seen by outer context managers\n multiple context managers with-statements can use as many context-managers as you need\n Never pass list\n Example \u0026ndash; The code below is the same   with cm1() as a, cm2() as b: BODY with cm1() as a: with cm2() as b: BODY  Examples\n simple sample  import contextlib class LoggingContextManager: def __enter__(self): print('LoggingContextManager.__enter__()') return \u0026quot;You're in a with-block!\u0026quot; def __exit__(self, exc_type, exc_val, exc_tb): if exc_type is None: print('LoggingContextManager.__exit__: ' 'normal exit detected') else: print('LoggingContextManager.__exit__: ' 'Exception detected! ' 'type={}, value={}, traceback={}'.format( exc_type, exc_val, exc_tb)) @contextlib.contextmanager def logging_context_manager(): print('logging_context_manager: enter') try: yield \u0026quot;You're in a with-block!\u0026quot; print('logging_context_manager: normal exit') except Exception: print('logging_context_manager: exceptional exit', sys.exc_info()) raise if __name__ == \u0026quot;__main__\u0026quot;: with LoggingContextManager() as log: pass with logging_context_manager() as clog: pass ## test result ## LoggingContextManager.__enter__() ## LoggingContextManager.__exit__: normal exit detected ## logging_context_manager: enter ## logging_context_manager: normal exit   nested  @contextlib.contextmanager def nest_test(name): print('Entering', name) yield name print('Exiting', name) if __name__ == \u0026quot;__main__\u0026quot;: with nest_test('outer') as n1, nest_test('inner nested in ' + n1): pass ## test result ## Entering outer ## Entering inner nested in outer ## Exiting inner nested in outer ## Exiting outer   db \u0026amp; transaction  import contextlib class Connection: def __init__(self): self.xid = 0 def _start_transaction(self, read_only=True): print('starting transaction', self.xid) rslt = self.xid self.xid = self.xid + 1 return rslt def _commit_transaction(self, xid): print('committing transaction', xid) def _rollback_transaction(self, xid): print('rolling back transaction', xid) class Transaction: def __init__(self, conn, read_only=True): self.conn = conn self.xid = conn._start_transaction(read_only=read_only) def commit(self): self.conn._commit_transaction(self.xid) def rollback(self): self.conn._rollback_transaction(self.xid) @contextlib.contextmanager def start_transaction(connection): tx = Transaction(connection) try: yield tx except Exception: tx.rollback() raise tx.commit()   Introspection  type of object is type\n Example\n introspector  import inspect import reprlib import itertools ## from sorted_set import SortedSet from bisect import bisect_left from collections.abc import Sequence, Set from itertools import chain class SortedSet(Sequence, Set): def __init__(self, items=None): self._items = sorted(set(items)) if items is not None else [] def __contains__(self, item): try: self.index(item) return True except ValueError: return False def __len__(self): return len(self._items) def __iter__(self): return iter(self._items) def __getitem__(self, index): result = self._items[index] return SortedSet(result) if isinstance(index, slice) else result def __repr__(self): return \u0026quot;SortedSet({})\u0026quot;.format( repr(self._items) if self._items else '' ) def __eq__(self, rhs): if not isinstance(rhs, SortedSet): return NotImplemented return self._items == rhs._items def __ne__(self, rhs): if not isinstance(rhs, SortedSet): return NotImplemented return self._items != rhs._items def _is_unique_and_sorted(self): return all(self[i] \u0026lt; self[i + 1] for i in range(len(self) - 1)) def index(self, item): assert self._is_unique_and_sorted() index = bisect_left(self._items, item) if (index != len(self._items)) and (self._items[index] == item): return index raise ValueError(\u0026quot;{} not found\u0026quot;.format(repr(item))) def count(self, item): assert self._is_unique_and_sorted() return int(item in self) def __add__(self, rhs): return SortedSet(chain(self._items, rhs._items)) def __mul__(self, rhs): return self if rhs \u0026gt; 0 else SortedSet() def __rmul__(self, lhs): return self * lhs def issubset(self, iterable): return self \u0026lt;= SortedSet(iterable) def issuperset(self, iterable): return self \u0026gt;= SortedSet(iterable) def intersection(self, iterable): return self \u0026amp; SortedSet(iterable) def union(self, iterable): return self | SortedSet(iterable) def symmetric_difference(self, iterable): return self ^ SortedSet(iterable) def difference(self, iterable): return self - SortedSet(iterable) def full_sig(method): try: return method.__name__ + str(inspect.signature(method)) except ValueError: return method.__name__ + '(...)' def brief_doc(obj): doc = obj.__doc__ if doc is not None: lines = doc.splitlines() if len(lines) \u0026gt; 0: return lines[0] return '' def print_table(rows_of_columns, *headers): num_columns = len(rows_of_columns[0]) num_headers = len(headers) if len(headers) != num_columns: raise TypeError(\u0026quot;Expected {} header arguments, \u0026quot; \u0026quot;got {}\u0026quot;.format(num_columns, num_headers)) rows_of_columns_with_header = itertools.chain([headers], rows_of_columns) columns_of_rows = list(zip(*rows_of_columns_with_header)) column_widths = [max(map(len, column)) for column in columns_of_rows] column_specs = ('{{:{w}}}'.format(w=width) for width in column_widths) format_spec = ' '.join(column_specs) print(format_spec.format(*headers)) rules = ('-' * width for width in column_widths) print(format_spec.format(*rules)) for row in rows_of_columns: print(format_spec.format(*row)) def dump(obj): print(\u0026quot;Type\u0026quot;) print(\u0026quot;====\u0026quot;) print(type(obj)) print() print(\u0026quot;Documentation\u0026quot;) print(\u0026quot;=============\u0026quot;) print(inspect.getdoc(obj)) print() print(\u0026quot;Attributes\u0026quot;) print(\u0026quot;==========\u0026quot;) all_attr_names = SortedSet(dir(obj)) method_names = SortedSet( filter(lambda attr_name: callable(getattr(obj, attr_name)), all_attr_names)) assert method_names \u0026lt;= all_attr_names attr_names = all_attr_names - method_names attr_names_and_values = [(name, reprlib.repr(getattr(obj, name))) for name in attr_names] print_table(attr_names_and_values, \u0026quot;Name\u0026quot;, \u0026quot;Value\u0026quot;) print() print(\u0026quot;Methods\u0026quot;) print(\u0026quot;=======\u0026quot;) methods = (getattr(obj, method_name) for method_name in method_names) method_names_and_doc = [(full_sig(method), brief_doc(method)) for method in methods] print_table(method_names_and_doc, \u0026quot;Name\u0026quot;, \u0026quot;Description\u0026quot;) print() if __name__ == \u0026quot;__main__\u0026quot;: dump('a') ## test result ## Type ## ==== ## \u0026lt;class 'str'\u0026gt; # ## Documentation ## ============= ## str(object='') -\u0026gt; str ## str(bytes_or_buffer[, encoding[, errors]]) -\u0026gt; str ## Create a new string object from the given object. If encoding or ## errors is specified, then the object must expose a data buffer ## that will be decoded using the given encoding and error handler. ## Otherwise, returns the result of object.__str__() (if defined) ## or repr(object). ## encoding defaults to sys.getdefaultencoding(). ## errors defaults to 'strict'. # ## Attributes ## ========== ## Name Value ## ------- ------------------------------ ## __doc__ \u0026quot;str(object='... to 'strict'.\u0026quot; # ## Methods ## ======= ## Name Description ## ----------------- ----------------------------------------------------------------------- ## __add__(value, /) Return self+value. ## str(...) str(object='') -\u0026gt; str ## __contains__(key, /) Return key in self. ## __delattr__(name, /) Implement delattr(self, name). ## __dir__(...) __dir__() -\u0026gt; list ## __eq__(value, /) Return self==value. ## __format__(...) S.__format__(format_spec) -\u0026gt; str ## __ge__(value, /) Return self\u0026gt;=value. ## __getattribute__(name, /) Return getattr(self, name). ## __getitem__(key, /) Return self[key]. ## __getnewargs__(...) ## __gt__(value, /) Return self\u0026gt;value. ## __hash__() Return hash(self). ## __init__(*args, **kwargs) Initialize self. See help(type(self)) for accurate signature. ## __init_subclass__(...) This method is called when a class is subclassed. ## __iter__() Implement iter(self). ## __le__(value, /) Return self\u0026lt;=value. ## __len__() Return len(self). ## __lt__(value, /) Return self\u0026lt;value. ## __mod__(value, /) Return self%value. ## __mul__(value, /) Return self*value.n ## __ne__(value, /) Return self!=value. ## __new__(*args, **kwargs) Create and return a new object. See help(type) for accurate signature. ## __reduce__(...) helper for pickle ## __reduce_ex__(...) helper for pickle ## __repr__() Return repr(self). ## __rmod__(value, /) Return value%self. ## __rmul__(value, /) Return self*value. ## __setattr__(name, value, /) Implement setattr(self, name, value). ## __sizeof__(...) S.__sizeof__() -\u0026gt; size of S in memory, in bytes ## __str__() Return str(self). ## __subclasshook__(...) Abstract classes can override this to customize issubclass(). ## capitalize(...) S.capitalize() -\u0026gt; str ## casefold(...) S.casefold() -\u0026gt; str ## center(...) S.center(width[, fillchar]) -\u0026gt; str ## count(...) S.count(sub[, start[, end]]) -\u0026gt; int ## encode(...) S.encode(encoding='utf-8', errors='strict') -\u0026gt; bytes ## endswith(...) S.endswith(suffix[, start[, end]]) -\u0026gt; bool ## expandtabs(...) S.expandtabs(tabsize=8) -\u0026gt; str ## find(...) S.find(sub[, start[, end]]) -\u0026gt; int ## format(...) S.format(*args, **kwargs) -\u0026gt; str ## format_map(...) S.format_map(mapping) -\u0026gt; str ## index(...) S.index(sub[, start[, end]]) -\u0026gt; int ## isalnum(...) S.isalnum() -\u0026gt; bool ## isalpha(...) S.isalpha() -\u0026gt; bool ## isdecimal(...) S.isdecimal() -\u0026gt; bool ## isdigit(...) S.isdigit() -\u0026gt; bool ## isidentifier(...) S.isidentifier() -\u0026gt; bool ## islower(...) S.islower() -\u0026gt; bool ## isnumeric(...) S.isnumeric() -\u0026gt; bool ## isprintable(...) S.isprintable() -\u0026gt; bool ## isspace(...) S.isspace() -\u0026gt; bool ## istitle(...) S.istitle() -\u0026gt; bool ## isupper(...) S.isupper() -\u0026gt; bool ## join(...) S.join(iterable) -\u0026gt; str ## ljust(...) S.ljust(width[, fillchar]) -\u0026gt; str ## lower(...) S.lower() -\u0026gt; str ## lstrip(...) S.lstrip([chars]) -\u0026gt; str ## maketrans(x, y=None, z=None, /) Return a translation table usable for str.translate(). ## partition(...) S.partition(sep) -\u0026gt; (head, sep, tail) ## replace(...) S.replace(old, new[, count]) -\u0026gt; str ## rfind(...) S.rfind(sub[, start[, end]]) -\u0026gt; int ## rindex(...) S.rindex(sub[, start[, end]]) -\u0026gt; int ## rjust(...) S.rjust(width[, fillchar]) -\u0026gt; str ## rpartition(...) S.rpartition(sep) -\u0026gt; (head, sep, tail) ## rsplit(...) S.rsplit(sep=None, maxsplit=-1) -\u0026gt; list of strings ## rstrip(...) S.rstrip([chars]) -\u0026gt; str ## split(...) S.split(sep=None, maxsplit=-1) -\u0026gt; list of strings ## splitlines(...) S.splitlines([keepends]) -\u0026gt; list of strings ## startswith(...) S.startswith(prefix[, start[, end]]) -\u0026gt; bool ## strip(...) S.strip([chars]) -\u0026gt; str ## swapcase(...) S.swapcase() -\u0026gt; str ## title(...) S.title() -\u0026gt; str ## translate(...) S.translate(table) -\u0026gt; str ## upper(...) S.upper() -\u0026gt; str ## zfill(...) S.zfill(width) -\u0026gt; str   "
},
{
	"uri": "/tags/raspberry-pi/",
	"title": "Raspberry Pi",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/shell/",
	"title": "Shell",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/coding/shell/",
	"title": "Shell",
	"tags": ["bash", "shell", "powershell"],
	"description": "",
	"content": "\r\rPowershell Note - 1\rIntroduction of Powershell ...\n\r\r"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/ubuntu/",
	"title": "Ubuntu",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/webpack/",
	"title": "Webpack",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/windows/",
	"title": "Windows",
	"tags": [],
	"description": "",
	"content": ""
}]