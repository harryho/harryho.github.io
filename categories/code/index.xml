<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on Hello World</title>
    <link>https://harryho.github.io/categories/code/</link>
    <description>Recent content in Code on Hello World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2015, harryho; All rights reserved.</copyright>
    <lastBuildDate>Sun, 10 Apr 2016 14:59:31 +1100</lastBuildDate>
    
	<atom:link href="https://harryho.github.io/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LCTHW C Lectures 2</title>
      <link>https://harryho.github.io/code/lcthw-lectures.2/</link>
      <pubDate>Sun, 10 Apr 2016 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/code/lcthw-lectures.2/</guid>
      <description>Author: Zed A. Shaw
All content comes from Zed&amp;rsquo;s Lecture Repository and Libraries Repository. All credit goes to Zed.
Exercise 32 Double Linked Lists The Plan
Learn about your very first data structure:
Double Linked Lists
Creating A liblcthw Project
We&amp;rsquo;ll need a project for the rest of the book called liblcthw.
Algorithms and Data Structures
A big step in going from amateur to professional is learning about data structures and algorithms.</description>
    </item>
    
    <item>
      <title>LCTHW C Lectures 4</title>
      <link>https://harryho.github.io/code/lcthw-lectures.4/</link>
      <pubDate>Sun, 10 Apr 2016 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/code/lcthw-lectures.4/</guid>
      <description>Author: Zed A. Shaw
All content comes from Zed&amp;rsquo;s Lecture Repository and Libraries Repository. All credit goes to Zed.
Exercise 48a A Simple Network Server: Project Description
The Plan
Start your first long running project:
statserve
The Purpose
You&amp;rsquo;ll get the project started and get a minimum first hack going.
The Requirements
 Create a simple network server that accepts a connection on port 7899 from netclient or the nc command, and echoes back anything you type.</description>
    </item>
    
    <item>
      <title>LCTHW C Lectures 3</title>
      <link>https://harryho.github.io/code/lcthw-lectures.3/</link>
      <pubDate>Fri, 08 Apr 2016 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/code/lcthw-lectures.3/</guid>
      <description>Author: Zed A. Shaw
All content comes from Zed&amp;rsquo;s Lecture Repository and Libraries Repository. All credit goes to Zed.
Exercise 41 Project devpkg .\ex41\devpkg
.\ex41\devpkg\commands.c
#include &amp;lt;apr_uri.h&amp;gt; #include &amp;lt;apr_fnmatch.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;quot;commands.h&amp;quot; #include &amp;quot;dbg.h&amp;quot; #include &amp;quot;bstrlib.h&amp;quot; #include &amp;quot;db.h&amp;quot; #include &amp;quot;shell.h&amp;quot; int Command_depends(apr_pool_t * p, const char *path) { FILE *in = NULL; bstring line = NULL; in = fopen(path, &amp;quot;r&amp;quot;); check(in != NULL, &amp;quot;Failed to open downloaded depends: %s&amp;quot;, path); for (line = bgets((bNgetc) fgetc, in, &#39;\n&#39;); line !</description>
    </item>
    
    <item>
      <title>LCTHW C Lectures 1</title>
      <link>https://harryho.github.io/code/lcthw-lectures.1/</link>
      <pubDate>Sat, 19 Mar 2016 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/code/lcthw-lectures.1/</guid>
      <description>Author: Zed A. Shaw
All content comes from Zed&amp;rsquo;s Lecture Repository and Libraries Repository. All credit goes to Zed.
Exercise 0 Installing Software The Plan
 Install software on your system. Test that it works right.  Linux Install
On Debian/Ubuntu use:
$ sudo apt-get install build-essential  On RedHat/CentOS:
$ sudo yum groupinstall development-tools  Linux Testing
Test that your C compiler works with:
$ cc --version  OSX Install</description>
    </item>
    
    <item>
      <title>C# Notes -- Part 1</title>
      <link>https://harryho.github.io/code/csharp-notes-1/</link>
      <pubDate>Fri, 10 Apr 2015 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/code/csharp-notes-1/</guid>
      <description>Prelude  C# notes is the place, which I keep the good practice and solution from my projects and research.
 Create simple .net project without Visual Studio Assumption  DotNet Frameowork path c:\Windows\Microsfot.Net\Frameowork\v4.0.30319  Simple C# project Create a proejct named c#project md c#project cd c#project md bin src echo.&amp;gt;c#project.proj echo.&amp;gt;src\helloworld.cs  Open Project configuration c#project.proj with notepad &amp;lt;Project DefaultTargets = &amp;quot;Compile&amp;quot; xmlns=&amp;quot;http://schemas.microsoft.com/developer/msbuild/2003&amp;quot; &amp;gt; &amp;lt;!-- Set the application name as a property --&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;appname&amp;gt;c#app&amp;lt;/appname&amp;gt; &amp;lt;/PropertyGroup&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>C# Notes -- Part 2</title>
      <link>https://harryho.github.io/code/csharp-notes-2/</link>
      <pubDate>Fri, 10 Apr 2015 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/code/csharp-notes-2/</guid>
      <description>Problem  Set up the some scheduled tasks running in the backgroud to take care of data update or sync for every 15 mins, or everyday or every week
 Solution Options as scheduled backgroud service Windows Task Scheduler  Click the Start button. Click Control Panel. Click System and Maintenance. Click Administrative Tools. Double-click Task Scheduler.  Use Window Service as task scheduler Overview of design The design here is a simplified version, which I built for previous projects.</description>
    </item>
    
    <item>
      <title>Java Notes, Part 3: Date Time API </title>
      <link>https://harryho.github.io/code/java-notes-3/</link>
      <pubDate>Tue, 10 Feb 2015 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/code/java-notes-3/</guid>
      <description>Date-Time API Through the java.time packages, Java 8 provides a comprehensive Date-Time API to work with date, time, and datetime. By default, most of the classes are based on the ISO-8601 standards. The main classes are
 Instant  represents an instant on the timeline and it is suitable for machines, for example, as timestamps for event  LocalDate, LocalTime, LocalDateTime
 represents human readable date, time, and datetime without a time zone.</description>
    </item>
    
    <item>
      <title>JavaScript and Object Oriented Programming</title>
      <link>https://harryho.github.io/code/javascript-oop/</link>
      <pubDate>Thu, 20 Mar 2014 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/code/javascript-oop/</guid>
      <description>What is JavaScript?  Please find the answer on Home Page  What is Object Oriented Programming?  Object-oriented programming (OOP) is a programming paradigm based on the concept of &amp;ldquo;objects&amp;rdquo;, which may contain data, in the form of fields, as known as attributes or properties; and actions, in the form of functions, as known as methods.
For example, Car is an object. The color and model of the car are attributes.</description>
    </item>
    
    <item>
      <title>Java Notes, Part-2</title>
      <link>https://harryho.github.io/code/java-notes-2/</link>
      <pubDate>Mon, 08 Jul 2013 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/code/java-notes-2/</guid>
      <description>Thread Join  The join method allows one thread to wait for the completion of another. join responds to an interrupt by exiting with an InterruptedException.
 Demo code of thread join
  public class JoinDemo implements Runnable { private Random rand = new Random(System.currentTimeMillis()); public void run() { //simulate some CPU expensive task for (int i = 0; i &amp;lt; 100000000; i++) { rand.nextInt(); } System.out.println(&amp;quot;[&amp;quot; + Thread.</description>
    </item>
    
    <item>
      <title>Java Notes, Part-1</title>
      <link>https://harryho.github.io/code/java-notes-1/</link>
      <pubDate>Sat, 10 Dec 2011 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/code/java-notes-1/</guid>
      <description>Prelude  Java notes is the place, which I keep the good practice and solution from my projects and research.
 Refactor constant variables with Enum Enum was a great improvement in Java 1.5. From that more and more developer abandom the interface or abstract class as constant variable container.
Before Java 1.5 you will following coding in many Java program.
// Use interface or abstract class as constant variable container public interface Country { public static final String AU = &amp;quot;Australian&amp;quot;; public static final String UK = &amp;quot;United Kingdom&amp;quot;; public static final String US = &amp;quot;United State&amp;quot;; } public class Util { public static String getLanguageCode(String country) { String languageCode = &amp;quot;en&amp;quot;; switch (country) { case Country.</description>
    </item>
    
  </channel>
</rss>