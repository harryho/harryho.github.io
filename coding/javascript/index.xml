<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Hello World</title>
    <link>/coding/javascript/</link>
    <description>Recent content in JavaScript on Hello World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/coding/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS &amp; ES Note - 1</title>
      <link>/coding/javascript/js-note-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/javascript/js-note-1/</guid>
      <description>The most unpredictable keyword and feature You may already guessed what I am talking about. Yes, thethis keyword. It is not only a powerful feature, but also often misinterpreted keyword.
In JavaScript, we also have this concept inside a Function constructor when it is invoked using the “new” keyword, however it is not the only rule and “this” can often refer to a different object from a different execution context.</description>
    </item>
    
    <item>
      <title>JS &amp; ES Note - 2</title>
      <link>/coding/javascript/js-note-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/javascript/js-note-2/</guid>
      <description>The equal operator doesn&amp;rsquo;t always mean equivalent  Have you got confused by the equal or not equal expression in the JavaScript? I will say you are definitely not the only one. Even many senior developers come from back-end programming background, they all scratch the head to find out why the equal or not-equal expression doesn&amp;rsquo;t work as they expect. The truth is those expression are really different from other programming language.</description>
    </item>
    
    <item>
      <title>JS &amp; ES Note - 3</title>
      <link>/coding/javascript/js-note-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/javascript/js-note-3/</guid>
      <description>The var statement  var declarations, wherever they occur, are processed before any code is executed. This is called hoisting.
 The scope of a variable declared with var is its current execution context, which is either the enclosing function or, for variables declared outside any function, global. If you re-declare a JavaScript variable, it will not lose its value.
 Assigning a value to an undeclared variable implicitly creates it as a global variable (it becomes a property of the global object) when the assignment is executed.</description>
    </item>
    
    <item>
      <title>JS &amp; ES snippet</title>
      <link>/coding/javascript/js-note-99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/javascript/js-note-99/</guid>
      <description>Setup the global node modules  Add an environment variable to tell node where the global node module sits
# I use nvm to manage my node and node modules export NODE_PATH=${HOME}/.nvm/versions/node/&amp;lt;node_version&amp;gt;/lib/node_modules  If you use npm by default, you may have permission problem to access the node modules. I suggest you to set a customized global node module folder under your home directory.
 Create a new folder under your home directory Install npm to new global node module update environment variables in the profile</description>
    </item>
    
  </channel>
</rss>