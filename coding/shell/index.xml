<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on Hello World</title>
    <link>/coding/shell/</link>
    <description>Recent content in Shell on Hello World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/coding/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adv Bash - 1</title>
      <link>/coding/shell/bash-note-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/shell/bash-note-1/</guid>
      <description>Special Characters What makes a character special? If it has a meaning beyond its literal meaning, a meta-meaning, then we refer to it as a special character. Along with commands and keywords, special characters are building blocks of Bash scripts.
Special Shell Variables    Variable Meaning     $0 Filename of script   $1 Positional parameter #1   $2 - $9 Positional parameters #2 - #9   ${10} Positional parameter #10   $# Number of positional parameters   &amp;ldquo;$*&amp;rdquo; All the positional parameters (as a single word) *   &amp;ldquo;$@&amp;rdquo; All the positional parameters (as separate strings)   ${#*} Number of positional parameters   ${#@} Number of positional parameters   $?</description>
    </item>
    
    <item>
      <title>Adv Bash - 2</title>
      <link>/coding/shell/bash-note-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/shell/bash-note-2/</guid>
      <description>Manipulating Strings Bash supports a surprising number of string manipulation operations. Unfortunately, these tools lack a unified focus. Some are a subset of parameter substitution, and others fall under the functionality of the UNIX expr command. This results in inconsistent command syntax and overlap of functionality, not to mention confusion.
String Operations    Expression Meaning     ${#string} Length of $string   ${string:position} Extract substring from $string at $position   ${string:position:length} Extract $length characters substring from $string at $position [zero-indexed,   ${string#substring} Strip shortest match of $substring from front of $string   ${string##substring} Strip longest match of $substring from front of $string   ${string%substring} Strip shortest match of $substring from back of $string   ${string%%substring} Strip longest match of $substring from back of $string   ${string/substring/replacement} Replace first match of $substring with $replacement   ${string//substring/replacement} Replace all matches of $substring with $replacement   ${string/#substring/replacement} If $substring matches front end of $string, substitute $replacement for $substring   ${string/%substring/replacement} If $substring matches back end of $string, substitute $replacement for $substring   expr match &amp;ldquo;$string&amp;rdquo; &amp;lsquo;$substring&amp;rsquo; Length of matching $substring* at beginning of $string   expr &amp;ldquo;$string&amp;rdquo; : &amp;lsquo;$substring&amp;rsquo; Length of matching $substring* at beginning of $string   expr index &amp;ldquo;$string&amp;rdquo; $substring Numerical position in $string of first character in $substring* that matches [0 if no match, first character counts as position 1]   expr substr $string $position $length Extract$length characters from $string starting at $position [0 if   expr match &amp;ldquo;$string&amp;rdquo; &amp;lsquo;($substring)&amp;rsquo; Extract$substring*, searching from beginning of $string   expr &amp;ldquo;$string&amp;rdquo; : &amp;lsquo;($substring)&amp;rsquo; Extract$substring* , searching from beginning of $string   expr match &amp;ldquo;$string&amp;rdquo; &amp;lsquo;.</description>
    </item>
    
    <item>
      <title>Adv Bash - 3</title>
      <link>/coding/shell/bash-note-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/shell/bash-note-3/</guid>
      <description>Operators: Files    Operator Tests Whether Operator Tests Whether     -e File exists -s File is not zero size   -f File is a regular file     -d File is a directory -r File has read permission   -h File is a symbolic link -w File has write permission   -L File is a symbolic link -x File has execute permission   -b File is a block device     -c File is a character device -g sgid flag set   -p File is a pipe -u suid flag set   -S File is a socket -k &amp;ldquo;sticky bit&amp;rdquo; set   -t File is associated with a terminal     -N File modified since it was last read F1 -nt F2 File F1 is newer than F2 *   -O You own the file F1 -ot F2 File F1 is older than F2 *   -G Group id of file same as yours F1 -ef F2 Files F1 and F2 are hard links to the same file *   !</description>
    </item>
    
    <item>
      <title>Cron Job Note - 1</title>
      <link>/coding/shell/cron-note-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/shell/cron-note-1/</guid>
      <description>Introduction Cron job is one of most common techniques used on every Unix / Linux.
Common Use Cases House keeping - Clean up the backup   Run every night to remove the daily backup tar ball
  Assumption:
 The script file named housekeeping.sh. The script sits inside folder bin which is under your user account. All backup files have the .tar as extension. The script will check the backup tar balls within the folder bacup, which is under your user account as well.</description>
    </item>
    
    <item>
      <title>Cron Job Note - 2</title>
      <link>/coding/shell/cron-note-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/shell/cron-note-2/</guid>
      <description>Refresh the database (NoSQL) - Cassandra  The sample script is used to backup the data from production database and refresh the data to staging or test database. It is not supposed to restore data because of database corruption.
 Backup the Cassandra database nightly   There is a keyspace named hho_ks in the Cassandra nodes store the production data.
  Every night the staging Cassandra server will be refreshed with production&#39;s snapshot</description>
    </item>
    
    <item>
      <title>Powershell Note - 1</title>
      <link>/coding/shell/ps-note-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/shell/ps-note-1/</guid>
      <description>PowerShell is a task-based command-line shell and scripting language built on .NET. PowerShell helps system administrators and power-users rapidly automate tasks that manage operating systems (Linux, macOS, and Windows) and processes.
 Prerequisites  The OS of Windows 7 or later version Install Powershell 4 or later version. You can find it on Microsoft website Has basic computer knowledge  Launch PS command prompt  Type command on windows command prompt: powershell  Get PS Version  Type $psversiontable   PS C:\&amp;gt;$psversiontable ## You might see sth below Name Value ---- ----- PSVersion 4.</description>
    </item>
    
  </channel>
</rss>