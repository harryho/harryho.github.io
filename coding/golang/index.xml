<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Hello World</title>
    <link>/coding/golang/</link>
    <description>Recent content in Golang on Hello World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/coding/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang Note - 1</title>
      <link>/coding/golang/go-note-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/golang/go-note-1/</guid>
      <description>Go Introduction  Golang&amp;rsquo;s popularity is skyrocketing. The thriving of Docker and Kubernetes push the Golang to a higher level.
Go is easy to become functional with and appropriate for junior developers to work on. Also, having a language that encourages readability and comprehension is extremely useful. The mixture of duck typing (via interfaces) and convenience features such as &amp;ldquo;:=&amp;rdquo; for short variable declarations give Go the feel of a dynamically typed language while retaining the positives of a strongly typed one.</description>
    </item>
    
    <item>
      <title>Golang Note - 2</title>
      <link>/coding/golang/go-note-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/golang/go-note-2/</guid>
      <description>Map  Maps are a special kind of data structure: an unordered collection of pairs of items, where one element of the pair is the key, and the other element, associated with the key, is the data or the value, hence they are also called associative arrays or dictionaries.
 The key type can be any type for which the operations == and != are defined, like string, int, float.</description>
    </item>
    
    <item>
      <title>Golang Note - 3</title>
      <link>/coding/golang/go-note-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/golang/go-note-3/</guid>
      <description>Struct  Go supports user-defined or custom types in the form of alias types or structs. A struct tries to represent a real-world entity with its properties. Structs are composite types, to use when you want to define a type which consist of a number of properties, each having their own type and value, grouping pieces of data together.
 Struct with tags  A field in a struct can, apart from a name and a type, also optionally have a tag: this is a string attached to the field, which could be documentation or some other important label.</description>
    </item>
    
  </channel>
</rss>