<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rustlang on Hello World</title>
    <link>/coding/rustlang/</link>
    <description>Recent content in Rustlang on Hello World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/coding/rustlang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Types &amp; Ownership</title>
      <link>/coding/rustlang/rust-note-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/rustlang/rust-note-1/</guid>
      <description>Mutability Rust encourages you to favor immutability. It’s important that we get compile-time errors when we attempt to change a value that we previously designated as immutable because this very situation can lead to bugs.
But mutability can be very useful. To make them mutable is simply adding mut in front of the variable name. In addition to allowing this value to change, mut conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable value.</description>
    </item>
    
    <item>
      <title>Error handling</title>
      <link>/coding/rustlang/rust-note-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/rustlang/rust-note-3/</guid>
      <description>Error  Rust groups errors into two major categories: recoverable and unrecoverable errors.
 Rust doesn’t have exceptions. Instead, it has the type Resultfor recoverable errors and the panic! macro that stops execution when the program encounters an unrecoverable error.
  panic! - Unrecoverable Errors  Rust has the panic! macro. When the panic! macro executes, your program will print a failure message, unwind and clean up the stack, and then quit.</description>
    </item>
    
    <item>
      <title>Generic Type &amp; Trait </title>
      <link>/coding/rustlang/rust-note-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/rustlang/rust-note-4/</guid>
      <description>Generic Type  Generics are abstract stand-ins for concrete types or other properties. When we’re writing code, we can express the behavior of generics or how they relate to other generics without knowing what will be in their place when compiling and running the code.  Removing Duplication by Extracting a Function  steps we took to change the duplication code :
 Identify duplicate code.
 Extract the duplicate code into the body of the function and specify the inputs and return values of that code in the function signature.</description>
    </item>
    
    <item>
      <title>Project, Vector, String &amp; Hashmap</title>
      <link>/coding/rustlang/rust-note-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/coding/rustlang/rust-note-2/</guid>
      <description>Project management  Rust has a number of features that allow you to manage your code’s organization, including which details are exposed, which details are private, and what names are in each scope in your programs.
 Packages: A Cargo feature that lets you build, test, and share crates Crates: A tree of modules that produces a library or executable Modules and use: Let you control the organization, scope, and privacy of paths Paths: A way of naming an item, such as a struct, function, or module   Package &amp;amp; Crate  A package is one or more crates that provide a set of functionality.</description>
    </item>
    
  </channel>
</rss>