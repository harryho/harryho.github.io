<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Hello World</title>
    <link>https://harryho.github.io/tags/javascript/index.xml</link>
    <description>Recent content in Javascript on Hello World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2015, harryho; All rights reserved.</copyright>
    <atom:link href="https://harryho.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Angular vs React vs Vue</title>
      <link>https://harryho.github.io/article/vue-ng-react/</link>
      <pubDate>Wed, 07 Jun 2017 16:56:21 +1100</pubDate>
      
      <guid>https://harryho.github.io/article/vue-ng-react/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Angular, React, Vue as most popular JavaScript frameworks at present, we just discuss Angular 1.x, Angular 2 / 4, React 15+ (Redux), and Vue 2+ here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;client-side-is-a-battle-field&#34;&gt;Client side is a battle field&lt;/h2&gt;

&lt;p&gt;In past 6-8 years, the Restful API has been accepted as one of standard web interface for most web applications, solution architect can simply add REST API on the top of existing web layer or business layer to provide REST API and support multiple client devices. So the developer can continue to develop or maintain system with their favorite programming language, framework or technical stacks.&lt;/p&gt;

&lt;p&gt;On the contrary, it is a completely different story on the client-side, there are tons of variant JavaScript frameworks emerged in the last 10 years. It is good to have more options, but it is a nightmare for web developers who are working in such battle field, because they need to try a lot of different stuff to make a decision, especially when the project schedule is tight, it makes tech lead or architect more stressed. something more worse is when the development team try to adopt new client-side framework for the new project, it is very difficult to make a decision which framework we should choose.&lt;/p&gt;

&lt;p&gt;There is a big risk to adopt new programming language(ES 6 or Typescript), new  framework, as well as new development, build and test tool, if the team has no enough skills or experience. As solution architect, they need to think it through for development team, and also consider if the team can really pick it up quickly. That is why we have to compare those frameworks here before we make a decision.&lt;/p&gt;

&lt;h2 id=&#34;performance-is-not-a-priority-or-crucial-criterion-for-choosing-a-framework&#34;&gt;Performance is not a priority or crucial criterion for choosing a framework&lt;/h2&gt;

&lt;p&gt;We can find lots of comparison between those frameworks, and so many of them are related to performance, programming language, design pattern, etc. Actually many web applications in the world are just small to median size web application, we don&amp;rsquo;t need to build the web application as Google, Facebook or Twitter. In my opinion, the performance of framework is the not critical benchmark, at lease it is not first priority which we need to consider if it is right for the team. Except performance, we have more concern on tech stacks, community and ecosystem involved with the framework, which have more impact on team&amp;rsquo;s productivity and system&amp;rsquo;s maintainability.&lt;/p&gt;

&lt;h2 id=&#34;the-difference-of-those-framework&#34;&gt;The difference of those framework&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look into the frameworks and list the difference of these frameworks.&lt;/p&gt;

&lt;h3 id=&#34;basic-tech-stacks&#34;&gt;Basic tech stacks&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tech Stacks&lt;/th&gt;
&lt;th&gt;Angular 1.x&lt;/th&gt;
&lt;th&gt;Angular 2 / 4&lt;/th&gt;
&lt;th&gt;React 1.5 (Redux)&lt;/th&gt;
&lt;th&gt;Vue 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vanilla JS&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ES 6&lt;/td&gt;
&lt;td&gt;1.5+&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TypeScript&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MVC&lt;/td&gt;
&lt;td&gt;1.2-1.4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Component-Based&lt;/td&gt;
&lt;td&gt;1.5+&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Shadow DOM&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Virtual DOM&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Immutable state&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;Yes:  Programming language which the framework uses.&lt;/li&gt;
&lt;li&gt;Supported: Programming language which the framework supports.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cool-stuff-is-not-always-the-best&#34;&gt;Cool stuff is not always the best&lt;/h3&gt;

&lt;p&gt;We have seen so many cool stuff which are finally abandoned in the past. We shouldn&amp;rsquo;t choose new framework because it looks cool. We choose the new one because it really solve our existing problem, improve our productivity and quality in the long run. Don&amp;rsquo;t forget there is always some cost to adopt new stuff. We need to balance the cost and outcome of such technical investment, and we can work it out if it is right time to do it.&lt;/p&gt;

&lt;h3 id=&#34;programming-language-is-still-the-barrier&#34;&gt;Programming language is still the barrier&lt;/h3&gt;

&lt;p&gt;Programming language is still the barrier we have to evaluate with the existing development team. Even ES6 or TypeScript (TS) claims it is compatible to Vanilla JS, but when you start to look into new framework or sample project, which are coded with ES6 or TS, it still makes you so confused if you are not familiar with such syntax. It will significantly impact the efficiency of learning new framework. So there is always a learning curve, which we cannot ignore, to code something in a new programming.&lt;/p&gt;

&lt;p&gt;Someone complaints all those JS frameworks makes the build process much more complicated than the old web frameworks. Does it really matter? The short answer is Yes, but we are not going discuss the advantage in details here. If your team comes from .Net Web Form or Java MVC background, it would be a steep curve for the team to pick up ES6 or TypeScript and Component-based framework, not mentioned new build and test tools.&lt;/p&gt;

&lt;p&gt;No wonder some .Net teams were struggling with Node.js integration on Visual Studio, especially when the team members have no Node.js experience. So we need the whole team to discuss the difficulties before we adopt new technology and framework. It is helpful to make sure the team has the same view, and it is good for us to plan our training and decide how to transform development team step by step.&lt;/p&gt;

&lt;h3 id=&#34;what-to-start&#34;&gt;What to start&lt;/h3&gt;

&lt;p&gt;For the team which comes with Web Form, with Vanilla JS background, we can start with Angular 1.x (Up to 1.4) on some small projects, or we can build something training project, because the MVC pattern is very similar to their previous coding experience.&lt;/p&gt;

&lt;p&gt;For the team which has experience of Angular 1.2 ~ 1.4, they can choose to stay on later version of Angular 1.x, e.g. Angular 1.5+, and they can start to convert coding pattern from MVC to Component-based. After that, if the team is planning to move to Angular 2 / 4, it is better to do some TypeScript training. In my view, so far the ecosystem for Angular 2 / 4 is still under development. It is a bit risk to use Angular 2 / 4 to real-world production. There are quite many gotchas which you have to figure out on your own.&lt;/p&gt;

&lt;p&gt;For the team which has TypeScript or ES6 experience, they can choose what they prefer. They can spend more time on UI integration. There are a few customized UI package for bespoke framework. That is what we are going to discuss in the next.&lt;/p&gt;

&lt;h3 id=&#34;responsive-ui-library-support&#34;&gt;Responsive UI library support&lt;/h3&gt;

&lt;p&gt;To build a real-world application, we need to integrate some popular responsive UI libraries instead of building all styles on our own. Let&amp;rsquo;s take a look the support of Bootstrap or Material-Design for different frameworks.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;UI library&lt;/th&gt;
&lt;th&gt;Angular 1.x&lt;/th&gt;
&lt;th&gt;Angular 2 / 4&lt;/th&gt;
&lt;th&gt;React 1.5 (Redux)&lt;/th&gt;
&lt;th&gt;Vue 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bootstrap 3&lt;/td&gt;
&lt;td&gt;ui-bootstrap (Very Good)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;react-bootstrap(Very Good)&lt;/td&gt;
&lt;td&gt;VueStrap* (Very Good)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Bootstrap 4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ui-bootstrap (Alpha)&lt;/td&gt;
&lt;td&gt;In progress&lt;/td&gt;
&lt;td&gt;BootstrapVue (Good)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Material Design&lt;/td&gt;
&lt;td&gt;Materialize (Good)&lt;/td&gt;
&lt;td&gt;Angular Material(Basic)&lt;/td&gt;
&lt;td&gt;Material-UI (Good)&lt;/td&gt;
&lt;td&gt;Vuetify (Very Good)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;VueStrap: Please use the &lt;a href=&#34;https://github.com/wffranco/vue-strap&#34;&gt;Willen&amp;rsquo;s fork&lt;/a&gt; for Vue 2.&lt;/li&gt;
&lt;li&gt;Libraries in the table above has been tested or used in some projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From what we can see now, the Bootstrap 4 is similar to Material-Desgin. So it is good news for developer. They just need to pick their favor, and they will always get analogical effect.&lt;/p&gt;

&lt;h3 id=&#34;stable-api&#34;&gt;Stable API&lt;/h3&gt;

&lt;p&gt;Against to Angular 1.x, the Angular 2 is a complete new animal. Angular 4 comes with some breaking changes, which breaks a few Angular 2 dependencies. Since the API of Angular 4 is still under active development, we cannot use it for production. According to Angular team&amp;rsquo;s announcement, they want to fix all Angular-2&amp;rsquo;s bugs and issues in Angular 4 and keep all built-in libraries sync to Angular 4. It will take a long while to get things ready. If your project uses Angular 1.2-1.4, I&amp;rsquo;d like to suggest you to keep it, until Angular 4 is finalized.&lt;/p&gt;

&lt;p&gt;React-Redux is much more popular than Flux, but it doesn&amp;rsquo;t means it is better than React-Flux pattern. In my opinion, React-Flux is much more straight and close to original React design. If you ready use React-Flux, you have better to stick with it.&lt;/p&gt;

&lt;p&gt;Vue 2 comes with some breaking changes. There is migration guide for Vue 1.x to Vue 2. It doesn&amp;rsquo;t seem very different. Vue 2 is ready for production.&lt;/p&gt;

&lt;h3 id=&#34;how-to-compare&#34;&gt;How to compare&lt;/h3&gt;

&lt;p&gt;In order to compare those frameworks properly, I use those frameworks to create a small real-world web application, which has built-in authentication support for the back-end API service, and integrated with some responsive UI framework, e.g. Bootstrap or Material-Design.&lt;/p&gt;

&lt;p&gt;You will find there is no project built on the Angular 1.x, because my team and me have done a lot real-world application upon Angular 1.x. We know Angular 1.x is quite matured, which you replicate any web application with this framework.&lt;/p&gt;

&lt;p&gt;On the other hand, Angular 1.x is built with Vanilla JS, i.e. you don’t need transpiler to build Angular 1.x app, so it is a bit unfair to compare with the framework which is coded with ES 6 or TypeScript, because the build tool and setup for Angular 1.x is easier than others. I mention the Angular 1.x here to remind them, actually there is other option for the team comes from old MVC stacks. It would be proper way to transform the team smoothly.&lt;/p&gt;

&lt;h3 id=&#34;following-are-the-projects-and-related-screenshots&#34;&gt;Following are the projects and related screenshots&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-angular4-crm/&#34;&gt;Angular 4 CRM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/ng4crm-screenshot-2.jpg&#34; alt=&#34;Screenshot-Angular4Crm&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-react-crm/&#34;&gt;React CRM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/rrcrm-screenshot-2.jpg&#34; alt=&#34;Screenshot-React-Crm&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-vue2-crm/&#34;&gt;Vue 2 CRM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/v2crm-screenshot-2.jpg&#34; alt=&#34;Screenshot-Vue2crm&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;comparison-of-projects-for-different-framework&#34;&gt;Comparison of projects for different framework&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s go back to projects above and take a look. They implement almost the same features as real-world application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication &amp;amp; Token support for Restful API&lt;/li&gt;
&lt;li&gt;Customer CRUD functions&lt;/li&gt;
&lt;li&gt;Order CRUD functions&lt;/li&gt;
&lt;li&gt;Dashboard including two charts (Bar/Line/Doughnut)&lt;/li&gt;
&lt;li&gt;Integrate with Material Design (Angular project include)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Angular 4 CRM&lt;/th&gt;
&lt;th&gt;React Redux CRM&lt;/th&gt;
&lt;th&gt;Vue 2 CRM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Dependencies&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Code Size&lt;/td&gt;
&lt;td&gt;135KB&lt;/td&gt;
&lt;td&gt;113KB&lt;/td&gt;
&lt;td&gt;49KB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Effort&lt;/td&gt;
&lt;td&gt;72 hrs&lt;/td&gt;
&lt;td&gt;80 hrs&lt;/td&gt;
&lt;td&gt;48hrs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;Dependencies: Any dependencies for test, distribute are excluded&lt;/li&gt;
&lt;li&gt;Code Size: It includes some customized CSS file, but image files are excluded&lt;/li&gt;
&lt;li&gt;Effort: The effort for learning curve has been eliminated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;According to above the dependencies, code size, we can see the project based on Vue.js is much simpler than other two projects. &lt;/p&gt;

&lt;p&gt;In my opinion, Vue 2 is my favor for next new project. It combines advantages of Angular and React. It also addresses some problems which we found in Angular and React. &lt;/p&gt;

&lt;p&gt;Vue.js uses Virtual DOM, which avoids many dirty checking in Angular 1.x, and the complicated coding pattern (Observable ReactiveJs) in Angular 2 / 4. &lt;/p&gt;

&lt;p&gt;Vue.js makes the handling of immutable and mutable variables much easier than React. Its template is very handy and straight. It is the same as normal HTML, it is very easy to convert the mock-up HTML into Vue template, especially when you need to customize you styles. &lt;/p&gt;

&lt;p&gt;Vue.js is not just cool, it is elegant and simple. I am pretty sure if you have Angular or React background, you can pick it up in a couple hours or days. Once you start to use it, you won’t want to go back. Its official routing system is quite stable and easy to use. Compare with Angular-Router and React-Router, it is much more reliable.&lt;/p&gt;

&lt;p&gt;Generally, Material-Design libraries for React is not handy as other customized version for Angular or Vue. The special coding style of JSX needs to convert all CSS and HTML into JSX format. To be honest, I am not so convinced by React’s JSX, because it is not straight as final HTML or CSS. Compare to other framework, it is a bit verbose and inconvenient. We cannot simply copy the style code from the browser’s dev tool when we debug it on the browser. i.e. You need to put more effort to make your page pretty.&lt;/p&gt;

&lt;p&gt;Angular’s Material-Design library has very limit components. To build a real-world application you need to add another UI library to supplement the former missing components. Last but not least, the Vuetify is the best Material-Design so far we have found and tested.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Before we make any conclusion, we have to be aware the world keeps changing. Perhaps after I finish this article, some problem of framework have been solved, or some resolved problem comes back again. We need to review the decision we made and correct them ASAP if we find the cost is overweight the outcome.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Team with Web Form and Vanilla Js background should starts with Angular 1.4 and be familiar with Node.js&lt;/li&gt;
&lt;li&gt;Team with Web Form and Vanilla Js background should start to learn ES 6 or TypeScript.&lt;/li&gt;
&lt;li&gt;Team with ES6 /TypeScript background can start should any framework you prefer&lt;/li&gt;
&lt;li&gt;Angular 4 and its ecosystem is under active development.&lt;/li&gt;
&lt;li&gt;Vue.js framework is a very nice. Give a go on your next project.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>_index</title>
      <link>https://harryho.github.io/</link>
      <pubDate>Wed, 07 Jun 2017 16:56:21 +1100</pubDate>
      
      <guid>https://harryho.github.io/</guid>
      <description>

&lt;h1 id=&#34;angular-vs-react-vs-vue&#34;&gt;Angular vs React vs Vue&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Angular, React, Vue are most popular JavaScript frameworks at present. Here we just discuss Angular 1.x, Angular 2 / 4, React 15+ (Redux), and Vue 2+.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;client-side-is-a-battle-field&#34;&gt;Client side is a battle field&lt;/h2&gt;

&lt;p&gt;In past 6-8 years, the Restful API has been accepted as one of standard web interface for most web applications, solution architect can simply add REST API on the top of existing web layer to provide REST API and support multiple client devices. So the developer can continue to maintain or develop system with their favorite framework or technical stacks.&lt;/p&gt;

&lt;p&gt;On the client-side, it is a completely different story, there are tons of variant JavaScript frameworks emerged in the last 10 years. It is good to have more options, but it is a nightmare for web developer who is working in such battle field. Especially, when the development team try to adopt new client-side framework for the new project, it is very difficult to make a decision which framework we should choose.&lt;/p&gt;

&lt;p&gt;There is a big risk to adopt new programming language(ES 6 or Typescript), new  framework, as well as new development, build and test tool. As a solution architect, he or she needs to think it through for development team, and also consider if the team can really pick it up quickly. That is why we have to compare those frameworks here before we make a decision.&lt;/p&gt;

&lt;h2 id=&#34;performance-is-not-a-priority-or-crucial-criterion-for-choosing-a-framework&#34;&gt;Performance is not a priority or crucial criterion for choosing a framework&lt;/h2&gt;

&lt;p&gt;We can find lots of comparison between those frameworks, and so many of them are related to performance, programming language, design pattern, etc. Actually many web applications in the world are just small to median size web application, we don&amp;rsquo;t need to build the web application as Google, Facebook or Twitter. In my opinion, the performance of framework is the not critical benchmark, at lease it is not first priority which we need to consider if it is right for the team. Except performance, we have more concern on tech stacks, community and ecosystem involved with the framework, which have more impact on team&amp;rsquo;s productivity and system&amp;rsquo;s maintainability.&lt;/p&gt;

&lt;h2 id=&#34;the-difference-of-those-framework&#34;&gt;The difference of those framework&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look into the frameworks and list the difference of these frameworks.&lt;/p&gt;

&lt;h3 id=&#34;basic-tech-stacks&#34;&gt;Basic tech stacks&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tech Stacks&lt;/th&gt;
&lt;th&gt;Angular 1.x&lt;/th&gt;
&lt;th&gt;Angular 2 / 4&lt;/th&gt;
&lt;th&gt;React 1.5 (Redux)&lt;/th&gt;
&lt;th&gt;Vue 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vanilla JS&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ES 6&lt;/td&gt;
&lt;td&gt;1.5+&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TypeScript&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MVC&lt;/td&gt;
&lt;td&gt;1.2-1.4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Component-Based&lt;/td&gt;
&lt;td&gt;1.5+&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Shadow DOM&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Virtual DOM&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Immutable state&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;Yes:  Programming language which the framework uses.&lt;/li&gt;
&lt;li&gt;Supported: Programming language which the framework supports.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cool-stuff-is-not-always-the-best&#34;&gt;Cool stuff is not always the best&lt;/h3&gt;

&lt;p&gt;We have seen so many cool stuff which are finally abandoned in the past. We shouldn&amp;rsquo;t choose new framework because it looks cool. We choose the new one because it really solve our existing problem, improve our productivity and quality in the long run. Don&amp;rsquo;t forget there is always some cost to adopt new stuff. We need to balance the cost and outcome of such technical investment, and we can work it out if it is right time to do it.&lt;/p&gt;

&lt;h3 id=&#34;programming-language-is-the-barrier&#34;&gt;Programming language is the barrier&lt;/h3&gt;

&lt;p&gt;Programming language is still the barrier we have to evaluate with the existing development team. Even ES6 or TypeScript (TS) claims it is compatible to Vanilla JS, but when you start to look into new framework or sample project, which are coded with ES6 or TS, it still makes you so confused if you are not familiar with such syntax. It will significantly impact the efficiency of learning new framework. So there is always a learning curve, which we cannot ignore, to code something in a new programming. If your team comes from .Net Web Form or Java MVC background, it would be a steep curve for the team to pick up ES6 or TypeScript and Component-based framework, not mentioned new build and test tools.&lt;/p&gt;

&lt;p&gt;No wonder some .Net teams were struggling with Node.js integration on Visual Studio, especially when the team members have no Node.js experience. So we need the whole team to discuss the difficulties before we adopt new technology and framework. It is helpful to make sure the team has the same view, and it is good for us to plan our training and decide how to transform development team step by step.&lt;/p&gt;

&lt;h3 id=&#34;what-to-start&#34;&gt;What to start&lt;/h3&gt;

&lt;p&gt;For the team which comes with Web Form, with Vanilla JS background, we can start with Angular 1.x (Up to 1.4) on some small projects, or we can build something training project, because the MVC pattern is very similar to their previous coding experience.&lt;/p&gt;

&lt;p&gt;For the team which has experience of Angular 1.2 ~ 1.4, they can choose to stay on later version of Angular 1.x, e.g. Angular 1.5+, and they can start to convert coding pattern from MVC to Component-based. After that, if the team is planning to move to Angular 2 / 4, it is better to do some TypeScript training. In my view, so far the ecosystem for Angular 2 / 4 is still under development. It is a bit risk to use Angular 2 / 4 to real-world production. There are quite many gotchas which you have to figure out on your own.&lt;/p&gt;

&lt;p&gt;For the team which has TypeScript or ES6 experience, they can choose what they prefer. They can spend more time on UI integration. There are a few customized UI package for bespoke framework. That is what we are going to discuss in the next.&lt;/p&gt;

&lt;h3 id=&#34;responsive-ui-library-support&#34;&gt;Responsive UI library support&lt;/h3&gt;

&lt;p&gt;To build a real-world application, we need to integrate some popular responsive UI libraries instead of building all styles on our own. Let&amp;rsquo;s take a look the support of Bootstrap or Material-Design for different frameworks.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;UI library&lt;/th&gt;
&lt;th&gt;Angular 1.x&lt;/th&gt;
&lt;th&gt;Angular 2 / 4&lt;/th&gt;
&lt;th&gt;React 1.5 (Redux)&lt;/th&gt;
&lt;th&gt;Vue 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bootstrap 3&lt;/td&gt;
&lt;td&gt;ui-bootstrap (Very Good)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;react-bootstrap(Very Good)&lt;/td&gt;
&lt;td&gt;VueStrap* (Very Good)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Bootstrap 4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ui-bootstrap (Alpha)&lt;/td&gt;
&lt;td&gt;In progress&lt;/td&gt;
&lt;td&gt;BootstrapVue (Good)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Material Design&lt;/td&gt;
&lt;td&gt;Materialize (Good)&lt;/td&gt;
&lt;td&gt;Angular Material(Basic)&lt;/td&gt;
&lt;td&gt;Material-UI (Good)&lt;/td&gt;
&lt;td&gt;Vuetify (Very Good)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;VueStrap: Please use the &lt;a href=&#34;https://github.com/wffranco/vue-strap&#34;&gt;Willen&amp;rsquo;s fork&lt;/a&gt; for Vue 2.&lt;/li&gt;
&lt;li&gt;Libraries in the table above has been tested or used in some projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From what we can see now, the Bootstrap 4 is similar to Material-Desgin. So it is good news for developer. They just need to pick their favor, and they will always get analogical effect.&lt;/p&gt;

&lt;h3 id=&#34;stable-api&#34;&gt;Stable API&lt;/h3&gt;

&lt;p&gt;Against to Angular 1.x, the Angular 2 is a complete new animal. Angular 4 comes with breaking changes, which breaks many Angular 2 dependencies. Since the API is still changing, we cannot use it for production. According to Angular team&amp;rsquo;s announcement, they want to fix all Angular-2&amp;rsquo;s bugs and issues on Angular 4 and keep all built-in libraries sync to Angular 4. It will take a long while to get things ready. If your project uses Angular 1.2-1.4, I&amp;rsquo;d like to suggest you to keep it.&lt;/p&gt;

&lt;p&gt;React-Redux is much more popular than Flux, but it doesn&amp;rsquo;t means it is better than React-Flux pattern. In my opinion, React-Flux is much more straight and close to original React design. If you ready use React-Flux, you have better to stick with it.&lt;/p&gt;

&lt;p&gt;Vue 2 comes with some breaking changes. There is migration guide for Vue 1.x to Vue 2. It doesn&amp;rsquo;t seem very different. Vue 2 is ready for production.&lt;/p&gt;

&lt;h3 id=&#34;how-to-compare&#34;&gt;How to compare&lt;/h3&gt;

&lt;p&gt;In order to compare those frameworks properly, I use those frameworks to create a small real-world web application, which has built-in authentication support for the back-end API service, and integrated with some responsive UI framework, e.g. Bootstrap or Material-Design.&lt;/p&gt;

&lt;h3 id=&#34;following-are-the-projects-and-related-screenshots&#34;&gt;Following are the projects and related screenshots&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-angular4-crm/&#34;&gt;Angular 4 CRM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/ng4crm-screenshot-2.jpg&#34; alt=&#34;Screenshot-Angular4Crm&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-react-crm/&#34;&gt;React CRM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/rrcrm-screenshot-2.jpg&#34; alt=&#34;Screenshot-React-Crm&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-vue2-crm/&#34;&gt;Vue 2 CRM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/v2crm-screenshot-2.jpg&#34; alt=&#34;Screenshot-Vue2crm&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;comparison-of-projects-for-different-framework&#34;&gt;Comparison of projects for different framework&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s go back to projects above and take a look. They implement almost the same features as real-world application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication &amp;amp; Token support for Restful API&lt;/li&gt;
&lt;li&gt;Customer CRUD functions&lt;/li&gt;
&lt;li&gt;Order CRUD functions&lt;/li&gt;
&lt;li&gt;Dashboard including two charts (Bar/Line/Doughnut)&lt;/li&gt;
&lt;li&gt;Integrate with Material Design (Angular project include)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Angular 4 CRM&lt;/th&gt;
&lt;th&gt;React Redux CRM&lt;/th&gt;
&lt;th&gt;Vue 2 CRM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Dependencies&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Code Size&lt;/td&gt;
&lt;td&gt;135KB&lt;/td&gt;
&lt;td&gt;113KB&lt;/td&gt;
&lt;td&gt;49KB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Effort&lt;/td&gt;
&lt;td&gt;72 hrs&lt;/td&gt;
&lt;td&gt;80 hrs&lt;/td&gt;
&lt;td&gt;48hrs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;Effort: The effort for learning curve has been eliminated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;According to above the dependencies, code size, we can see the project based on Vue.js is much more simple than other two projects.&lt;/p&gt;

&lt;p&gt;Vue.js makes the switch between immutable and mutable much easier than React. It combines advantages of Angular and React. Vue.js template is very handy and straight. It is the same as normal HTML, it is very easy to convert the mock-up HTML into Vue template.&lt;/p&gt;

&lt;p&gt;Vue.js is not just cool, it is elegant and simple. It is really a good combination of Angular and React. I am pretty if you have Angular or React background, you can pick it up in a couple days. Once you start to use it, you won&amp;rsquo;t want to go back. Its official routing system is quite stable and easy to use. Compare with Angular-Router and React-Router, it is much more reliable.&lt;/p&gt;

&lt;p&gt;Generally, Material-Design libraries for React is not handy as other customized version for Angular or Vue. The special coding style of JSX needs to convert all CSS and HTML into JSX format. To be honest, I am not so convinced by React&amp;rsquo;s JSX, because it is not straight as final HTML or CSS. Compare to other framework, it is a bit verbose and inconvenient. We cannot simply copy the style code from the browser&amp;rsquo;s dev tool when we debug it on the browser.&lt;/p&gt;

&lt;p&gt;Angular&amp;rsquo;s Material-Design library has very limit components. To build a real-world application you need to add another UI library to supplement the former missing components. Last but not least, the Vuetify is the best Material-Design so far we have found and tested.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Before we make any conclusion, we have to be aware the world keeps changing. Perhaps after I finish this article, some problem of framework have been solved, or some resolved problem comes back again. We need to review the decision we made and correct them ASAP if we find the cost is overweight the outcome.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Team with Web Form and Vanilla Js background should starts with Angular 1.4 and be familiar with Node.js&lt;/li&gt;
&lt;li&gt;Team with Web Form and Vanilla Js background should start to learn ES 6 or TypeScript.&lt;/li&gt;
&lt;li&gt;Team with ES6 /TypeScript background can start should any framework you prefer&lt;/li&gt;
&lt;li&gt;Angular 4 and its ecosystem is under active development.&lt;/li&gt;
&lt;li&gt;Vue.js framework is a very nice. Give a go on your next project.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Angular 4 Crm Project</title>
      <link>https://harryho.github.io/project/reetek-angular4-crm/</link>
      <pubDate>Wed, 07 Dec 2016 16:56:21 +1100</pubDate>
      
      <guid>https://harryho.github.io/project/reetek-angular4-crm/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Ng4Crm&lt;/strong&gt; is reusable CRM project for real-world business based on Angular 4, Angular-Material &amp;amp; Bootstrap 3.&lt;/p&gt;

&lt;p&gt;This project starts from a popular starter project &lt;a href=&#34;https://github.com/AngularClass/angular-starter&#34;&gt;AngularClass/AngularStarter&lt;/a&gt;. The goal of this project is to create reusable project for real-world business. To achieve this target, we need a solution which should include authentication process, restful API feature with token support and simple but elegant UI design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This project is built on the top of AngularClass/Angular-Starter.&lt;/li&gt;
&lt;li&gt;The UI part of this project combine Angular-Material and Bootstrap 3. Because the controls from Angular-Material is very limited, there are a few extra components require Bootstrap 3 for help.&lt;/li&gt;
&lt;li&gt;This project includes ng-charts, pagination, progress-bar, confirmation dialog, etc. features.&lt;/li&gt;
&lt;li&gt;It uses Json-Server as fake Restful API. (You can simple replace it with your own API)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;structure-of-ng4crm&#34;&gt;Structure of Ng4Crm&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;path\to\ng4crm
+---config             &amp;lt;-// configuration of dev or prod environment
+---db                 &amp;lt;-// json files for json-server
|   +---db.json        &amp;lt;-// dummy db
|   \---routes.json    &amp;lt;-// configure fake restful api
+---screenshots
+---src                &amp;lt;-// vue components 
|   +---app
|   |   +---_gurad             &amp;lt;-// auth guard for authentication
|   |   +---_models             &amp;lt;-// common models for whole app
|   |   +---_services            &amp;lt;-// common services for whole app
|   |   +---about                &amp;lt;-// about component   
|   |   +---customer              &amp;lt;-// customer component
|   |   +---dashboard            &amp;lt;-// dashboard component  
|   |   +---notfoundpage         &amp;lt;-// notfoundpage component  
|   |   +---login                &amp;lt;-// login component  
|   |   +---order                &amp;lt;-// customer component 
|   |   +---root                &amp;lt;-// root component 
|   |   +---shared                &amp;lt;-// common component for whole app
|   |   +---app.component.ts
|   |   +---app.module.ts
|   |   +---app.routes.ts
|   |   +---app.services.ts
|   |   +---environment.ts
|   |   \---...
|   +---assets         &amp;lt;-//   images  and css from third parties
|   +---styles         &amp;lt;-//   customized css files
|   +---main.browser.aot.ts     
|   +---main.browser.ts  
|   +---polyfills.browser.ts  
|   \---...
\...

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;screenshots&#34;&gt;Screenshots&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/ng4crm-screenshot-1.jpg&#34; alt=&#34;Screenshot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/ng4crm-screenshot-2.jpg&#34; alt=&#34;Screenshot2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/ng4crm-screenshot-3.jpg&#34; alt=&#34;Screenshot3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/ng4crm-screenshot-4.jpg&#34; alt=&#34;Screenshot4&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;browse-repository-https-github-com-harryho-ng4crm-git&#34;&gt;Browse &lt;a href=&#34;https://github.com/harryho/ng4crm.git&#34;&gt;Repository&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two similar projects respectively built on the Vue.js and React. If you have interests in those technical stacks. You can find and clone those projects below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-vue2-crm&#34;&gt;Vue2 Crm&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-react-crm&#34;&gt;React Redux Crm&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>React Redux Crm Project</title>
      <link>https://harryho.github.io/project/reetek-react-crm/</link>
      <pubDate>Wed, 07 Dec 2016 16:56:21 +1100</pubDate>
      
      <guid>https://harryho.github.io/project/reetek-react-crm/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;React-Crm&lt;/strong&gt; is reusable CRM starter project for real-world business based on React 15.4, React-Redux &amp;amp; Material-UI.&lt;/p&gt;

&lt;p&gt;The goal of this starter project is to create reusable project for real-world business. To achieve this target, we need a solution which should include authentication process, restful API feature with token support and simple but elegant UI design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This project is built on the top of React/Redux.&lt;/li&gt;
&lt;li&gt;The UI part of this project uses Material-UI.&lt;/li&gt;
&lt;li&gt;This project uses Redux-Thunk to support backend API.&lt;/li&gt;
&lt;li&gt;It uses Json-Server as fake Restful API. (You can simple replace it with your own API)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;structure-of-react-crm&#34;&gt;Structure of React-Crm&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;path\to\ng4crm
+---config             &amp;lt;-// configuration of dev or prod environment
+---db                 &amp;lt;-// json files for json-server
|   +---db.json        &amp;lt;-// dummy db
|   \---routes.json    &amp;lt;-// configure fake restful api
+---screenshots
+---src                &amp;lt;-// vue components 
|   +---app
|   |   +---_gurad             &amp;lt;-// auth guard for authentication
|   |   +---_models             &amp;lt;-// common models for whole app
|   |   +---_services            &amp;lt;-// common services for whole app
|   |   +---about                &amp;lt;-// about component   
|   |   +---customer              &amp;lt;-// customer component
|   |   +---dashboard            &amp;lt;-// dashboard component  
|   |   +---notfoundpage         &amp;lt;-// notfoundpage component  
|   |   +---login                &amp;lt;-// login component  
|   |   +---order                &amp;lt;-// customer component 
|   |   +---root                &amp;lt;-// root component 
|   |   +---shared                &amp;lt;-// common component for whole app
|   |   +---app.component.ts
|   |   +---app.module.ts
|   |   +---app.routes.ts
|   |   +---app.services.ts
|   |   +---environment.ts
|   |   \---...
|   +---assets         &amp;lt;-//   images  and css from third parties
|   +---styles         &amp;lt;-//   customized css files
|   +---main.browser.aot.ts     
|   +---main.browser.ts  
|   +---polyfills.browser.ts  
|   \---...
\...

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;screenshots&#34;&gt;Screenshots&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/rrcrm-screenshot-1.jpg&#34; alt=&#34;Screenshot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/rrcrm-screenshot-2.jpg&#34; alt=&#34;Screenshot2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/rrcrm-screenshot-3.jpg&#34; alt=&#34;Screenshot3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/rrcrm-screenshot-4.jpg&#34; alt=&#34;Screenshot4&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;browse-repository-https-github-com-harryho-react-crm-git&#34;&gt;Browse &lt;a href=&#34;https://github.com/harryho/react-crm.git&#34;&gt;Repository&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two similar projects respectively built on the Vue.js and Angular. If you have interests in those technical stacks. You can find and clone those projects below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-vue2-crm/&#34;&gt;Vue2 Crm&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-angular4-crm&#34;&gt;Angular4 Crm&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Vue 2 Admin Project</title>
      <link>https://harryho.github.io/project/reetek-vue2-admin/</link>
      <pubDate>Wed, 07 Dec 2016 16:56:21 +1100</pubDate>
      
      <guid>https://harryho.github.io/project/reetek-vue2-admin/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Vue2Admin&lt;/strong&gt; is a fully responsive admin template that is inspired by &lt;a href=&#34;https://almsaeedstudio.com&#34;&gt;AdminLTE&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This template is built-in with Vue 2 at the start.&lt;/li&gt;
&lt;li&gt;It include Vue Resource, Vuex as well.&lt;/li&gt;
&lt;li&gt;The plugins for this project are loaded with script loader.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;structure-of-reetek-vue2admin&#34;&gt;Structure of Reetek Vue2Admin&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;path\to\vue2admin
+---build              &amp;lt;-// webpack files
+---config             &amp;lt;-// configuration of dev or prod environment
+---screenshots
+---src                &amp;lt;-// vue components 
|   +---components
|   |   +---charts
|   |   +---dashboard
|   |   +---forms
|   |   +---mailbox
|   |   +---misc
|   |   +---pages
|   |   +---tables
|   |   +---ui
|   |   \---widget
|   \---filters
+---static              &amp;lt;-// css, dump data, fonts, image files and plugins
|   +---css
|   +---data
|   +---fonts
|   +---img
|   |   +---credit
|   |   \---stock
|   \---js
|       \---plugins         &amp;lt;-// plugins for admin dashboard 
|           +---AdminLTE
|           +---bootstrap
|           +---bootstrap-slider
|           +---bootstrap-wysihtml5
|           +---chartjs
|           +---ckeditor
|           + ...
\---test
    +---e2e
    \---unit
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;screenshots&#34;&gt;Screenshots&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/vue2admin_screenshot1_sm.png&#34; alt=&#34;Screenshot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/vue2admin_screenshot2_sm.png&#34; alt=&#34;Screenshot2&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;browse-repository-https-github-com-harryho-vue2admin-git&#34;&gt;Browse &lt;a href=&#34;https://github.com/harryho/vue2admin.git&#34;&gt;Repository&lt;/a&gt;&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Vue 2 Crm Project</title>
      <link>https://harryho.github.io/project/reetek-vue2-crm/</link>
      <pubDate>Wed, 07 Dec 2016 16:56:21 +1100</pubDate>
      
      <guid>https://harryho.github.io/project/reetek-vue2-crm/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Vue2Crm&lt;/strong&gt; is a reusable Vue.js CRM starter project for real-world business based on Vue 2 PWA template with Vuetify.&lt;/p&gt;

&lt;p&gt;The goal of this project is to create a reusable project for real-world business. To achieve this target, we need a solution which includes authentication process, restful API feature and simple but elegant UI design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This starter project is built-in with Vue 2 PWA from scratch.&lt;/li&gt;
&lt;li&gt;The whole UI is built on the Vuetify&lt;/li&gt;
&lt;li&gt;It includes Vuex, Axios as well.&lt;/li&gt;
&lt;li&gt;It uses Json-Server as fake Restful API. (You can simple replace it with your own API)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;structure-of-vue2crm&#34;&gt;Structure of Vue2Crm&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;path\to\vue2crm
+---build              &amp;lt;-// webpack files
+---config             &amp;lt;-// configuration of dev or prod environment
+---db                 &amp;lt;-// json files for json-server
|   +---db.json        &amp;lt;-// dummy db
|   \---routes.json    &amp;lt;-// configure fake restful api
+---screenshots
+---src                &amp;lt;-// vue components 
|   +---components
|   |   +---404.vue
|   |   +---About.vue
|   |   +---Customers.vue
|   |   +---Customer.vue
|   |   +---Orders.vue
|   |   +---Order.vue
|   |   +---Login.vue
|   |   \---...
|   +---router         &amp;lt;-// vue-router
|   +---utils
|   |   +---auth.js    &amp;lt;-// auth service
|   |   +---backend-api.js  &amp;lt;-// Axios instance 
|   |   +---store.js   &amp;lt;-//  Vuex
|   \---stylus         &amp;lt;-// Customize stylus
+---static              &amp;lt;-// css, fonts, image files
|   +---img
|   \---manifest.json   &amp;lt;-// PWA manifest file
\---test
    +---e2e
    \---unit

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;screenshots&#34;&gt;Screenshots&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/v2crm-screenshot-1.jpg&#34; alt=&#34;Screenshot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/v2crm-screenshot-2.jpg&#34; alt=&#34;Screenshot2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/v2crm-screenshot-3.jpg&#34; alt=&#34;Screenshot3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://harryho.github.io/img/v2crm-screenshot-4.jpg&#34; alt=&#34;Screenshot4&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;browse-repository-https-github-com-harryho-vue2crm-git&#34;&gt;Browse &lt;a href=&#34;https://github.com/harryho/vue2crm.git&#34;&gt;Repository&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two similar projects respectively built on the Angular and React. If you have interests in those technical stacks. You can find those projects below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-angular4-crm&#34;&gt;Angular4 Crm&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://harryho.github.io/project/reetek-react-crm&#34;&gt;React Redux Crm&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Angularjs Webpack ES6 Starter</title>
      <link>https://harryho.github.io/project/angularjs-webpack-es6-starter/</link>
      <pubDate>Tue, 15 Nov 2016 16:56:21 +1100</pubDate>
      
      <guid>https://harryho.github.io/project/angularjs-webpack-es6-starter/</guid>
      <description>

&lt;p&gt;This starter was inspired by another similar angular webpack starter repository. It simply includes font-awesome, bootstrap for the people who don&amp;rsquo;t want to use boostrap-webpack, font-awesome-webpack. I find it saves us so much effort to create prototype, since we don&amp;rsquo;t need spectacular UI.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This starter uses angular 1.5 for someone want to build component.&lt;/li&gt;
&lt;li&gt;This repo followes mvc patterns instead of component pattern.&lt;/li&gt;
&lt;li&gt;ES6, and ES7 support with babel.&lt;/li&gt;
&lt;li&gt;Development server with live reload.&lt;/li&gt;
&lt;li&gt;Production builds with cache busting.&lt;/li&gt;
&lt;li&gt;Testing environment using karma to run tests and jasmine as the framework.&lt;/li&gt;
&lt;li&gt;Code coverage when tests are run.&lt;/li&gt;
&lt;li&gt;Include font-awesome without font-awesome-loader.&lt;/li&gt;
&lt;li&gt;Include Bootstrap 3 without bootstrap-loader.&lt;/li&gt;
&lt;li&gt;No gulp and no grunt, just npm scripts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;structure-of-starter&#34;&gt;Structure of starter&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
\path\to\angularjs-webpack-es6-starter
|   .babelrc                                    &amp;lt;-// default setting es2015.
|   karma.conf.js                               &amp;lt;-// tests and report setup 
|   webpack.config.js                           &amp;lt;-// webpack config
\---src
    |   tests.webpack.js
    |   
    +---app
    |   |   app.html                            &amp;lt;-// app view
    |   |   app.js                              &amp;lt;-// app module
    |   |   app.routes.js                       &amp;lt;-// app route to manage all routes 
    |   |   app.runner.js                       &amp;lt;-// app runner for state change enhancement  
    |   |   app.spec.js                         &amp;lt;-// app spec file for testing 
    |   |   
    |   +---common                              &amp;lt;-// common module for whole app
    |   |   |   common.js
    |   |   |   common.spec.js
    |   |   +---directives                      &amp;lt;-// common directives for whole app
    |   |   |       appUiDirectives.js
    |   |   |       appUiDirectives.spec.js
    |   |   |       commonDirectives.js
    |   |   |       commonDirectives.spec.js
    |   |   +---services                        &amp;lt;-// common views for whole app
    |   |   |       ApiService.js
    |   |   |       ApiService.spec.js
    |   |   |       UtilService.js
    |   |   |       UtilService.spec.js
    |   |   \---views                           &amp;lt;-// contains common views
    |   |           footer-view.html
    |   |           header-view.html
    |   |           sidebar-view.html
    |   |           topbar-view.html
    |   \---main                                &amp;lt;-// built-in fonts, css, images 
    |       \---dashboard
    |           +---controllers
    |           |       dashboardController.js
    |           |       dashboardController.spec.js
    |           \---views
    |                   dashboard-view.html
    |                   
    +---public                                  &amp;lt;-// built-in fonts, css, images 
    |   |   index.html
    |   +---fonts
    |   |   +--- ...
    |   \---img
    |       +--- favicon.ico
    \---style                                  &amp;lt;-// css files including customized css
           
    
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;browse-repository-https-github-com-harryho-angularjs-webpack-es6-starter-git&#34;&gt;Browse &lt;a href=&#34;https://github.com/harryho/angularjs-webpack-es6-starter.git&#34;&gt;Repository&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript and Object Oriented Programming</title>
      <link>https://harryho.github.io/code/javascript-oop/</link>
      <pubDate>Thu, 20 Mar 2014 14:59:31 +1100</pubDate>
      
      <guid>https://harryho.github.io/code/javascript-oop/</guid>
      <description>

&lt;h2 id=&#34;what-is-javascript&#34;&gt;What is JavaScript?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Please find the answer on &lt;a href=&#34;https://harryho.github.io/#JavaScript&#34;&gt;Home Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-object-oriented-programming&#34;&gt;What is Object Oriented Programming?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Object-oriented programming (OOP) is a programming paradigm based on the concept of &amp;ldquo;objects&amp;rdquo;, which may contain data, in the form of fields, as known as attributes or properties; and actions, in the form of functions, as known as methods.&lt;/p&gt;

&lt;p&gt;For example, Car is an object. The color and model of the car are attributes. Then accelerate to 60km/h, brake to 0km/h, and turn left or right of the car are the actions. From this sample, you can tell OOP makes the code more close to the real world. That is why it is most popular paradigm for developing buisness application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;assumption&#34;&gt;Assumption&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You should have basic knowledge of Javascript.&lt;/li&gt;
&lt;li&gt;You should know how to test sample code on Chrome or Firefox. It is simple, just open your browser and click &lt;code&gt;F12&lt;/code&gt;, copy the code to console and then press &lt;code&gt;Enter&lt;/code&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data-types&#34;&gt;Data types&lt;/h2&gt;

&lt;p&gt;The JavaScript (ECMAScript) standard defines six data types. Five are primitives, including Boolean, Null, Undefined, Number, String, and Object. In JavaScript, most things are objects, from core JavaScript features like strings and arrays to the browser APIs built on top of JavaScript. You can even create your own objects to encapsulate related functions and variables into efficient packages, and act as handy data containers. The object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language, therefore we&amp;rsquo;ve provided this module to help you. Here we teach object theory and syntax in detail, then look at how to create your own objects.&lt;/p&gt;

&lt;h2 id=&#34;object-and-prototype&#34;&gt;Object and prototype&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;How to define a object&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a couple ways to create variable as object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var obj1 = {};
var obj2 = new Object();
var obj3 = Object.create(null);
console.log( obj );
console.log( obj2 );
console.log( obj3 );

/*
output: 
object {}
object {}
object {}
*/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Object type gives developers so much power and flexibility to customize their own data type. All JavaScript objects inherit the properties and methods from their prototype. The Object.prototype is on the top of the prototype chain. All JavaScript objects (Date, Array, RegExp, Function, &amp;hellip;.) inherit from the Object.prototype.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Object has properties and method. Object&amp;rsquo;s method are the actions that can be performed on objects, they are one of most powerful feature for developers. Let&amp;rsquo;s see how we can create object with properties and methods.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create three cars with basic object usage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var car1 = { color: &#39;red&#39;, make:&#39;Toyota&#39;, model:&#39;Sedan&#39;, getInfo: function (){
        console.log( this );
}};
var car2 = { color: &#39;black&#39;, make:&#39;BMW&#39;, model:&#39;Coupe&#39;, getInfo: function (){
        console.log( this );
}};
var car3 = { color: &#39;white&#39;, make:&#39;Subaru&#39;, model:&#39;SUV&#39;, getInfo:function (){
        console.log( this );
}};
car1.getInfo();
car2.getInfo(); 
car3.getInfo();

/*
Output:
Object {color: &amp;quot;red&amp;quot;, make: &amp;quot;Toyota&amp;quot;, model: &amp;quot;Sedan&amp;quot;} 
Object {color: &amp;quot;black&amp;quot;, make: &amp;quot;BMW&amp;quot;, model: &amp;quot;Coupe&amp;quot;} 
Object {color: &amp;quot;white&amp;quot;, make: &amp;quot;Subaru&amp;quot;, model: &amp;quot;SUV&amp;quot;}
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You will find the same method defined in every object. Can we make it better to just define the method once? The answer is Yes. Use an object constructor to create an object prototype. Any new object inherit the same propotype will have the same properties and methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var Car = function(color, make, model, getInfo ) {
    this.color=&#39;&#39;;
    this.make=&#39;&#39;;
    this.model=&#39;&#39;;
    this.getInfo= function( time ){
            console.log( this );
    };
};

var car1 = new Car(&#39;red&#39;,&#39;Toyota&#39;,&#39;Sedan&#39;);
var car2 = new Car(&#39;black&#39;,&#39;BMW&#39;, &#39;Coupe&#39;);
var car3 = new Car(&#39;white&#39;,&#39;Subaru&#39;,&#39;SUV&#39;);
car1.getInfo();
car2.getInfo(); 
car3.getInfo();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You will get same result as before. If you compare two blocks of code, you may think the second way has more code than the first one. Let&amp;rsquo;s image if you need to create 20 objects and every object with 20 methods, then you totaly need to write 20 X 20 = 400 methods. Object&amp;rsquo;s prototype is powerful, but we need to be careful when we want to use it, especially the &lt;code&gt;this&lt;/code&gt; prototype. We need discuss this more in detail.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Other sample of prototype&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Car = function(color, make, model ) {
    this.color=&#39;&#39;;
    this.make=&#39;&#39;;
    this.model=&#39;&#39;;
};
Car.prototype = {        
    getInfo : function( ){
            console.log( this );
    }
};
var car1 = new Car(&#39;red&#39;,&#39;Toyota&#39;,&#39;Sedan&#39;);
var car2 = new Car(&#39;black&#39;,&#39;BMW&#39;, &#39;Coupe&#39;);
var car3 = new Car(&#39;white&#39;,&#39;Subaru&#39;,&#39;SUV&#39;);
car1.getInfo();
car2.getInfo(); 
car3.getInfo();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The last way to use prototype is kind of verbose. The second one is more concise and nice is most popular paradigm.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;class-and-inheritance&#34;&gt;Class and inheritance&lt;/h2&gt;

&lt;p&gt;JavaScript has no built-in way of creating or implementing interfaces.
It also lacks built-in methods for determining whether an object implements the same set of
methods as another object, making it difficult to use objects interchangeably. Luckily, JavaScript
is extremely flexible, making it easy to add these features.&lt;/p&gt;

&lt;p&gt;JavaScript has no built-in way of creating or implementing interfaces.
It also lacks built-in methods for determining whether an object implements the same set of
methods as another object, making it difficult to use objects interchangeably. Luckily, JavaScript
is extremely flexible, making it easy to add these features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inheritance issue in Javascript&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Pet() {
    this.name =  &amp;quot;&amp;quot;;
    this.species =  &amp;quot;&amp;quot;;
    this.offsprings = [];
    this.setName = function ( name ) { this.name = name ;};
    this.deliverBaby = function( obj ){
        this.offsprings.push( obj );
    }
    this.getInfo = function (){
        console.log( &amp;quot; species: &amp;quot;,this.species, &amp;quot; name: &amp;quot; ,this.name );
        console.log( &amp;quot; has &amp;quot;, this.offsprings.length ,&amp;quot; offsprings &amp;quot;);
    }
};

function Dog()  {
};

Dog.prototype = new Pet();
Dog.prototype.species = &amp;quot;Dog&amp;quot;;

var dog1 = Object.create(new Dog());
dog1.setName ( &amp;quot;Polly&amp;quot;);

var dog2 = new Dog();
dog2.setName ( &amp;quot;Lulu&amp;quot;);

dog1.deliverBaby( new Dog());
dog2.deliverBaby( new Dog());

dog1.getInfo();
dog2.getInfo();

/*
output :
    species:  Dog  name:  Polly 
    has  2  offsprings              &amp;lt;- It is wrong. It should be 1 only.
    species:  Dog  name:  Lulu 
    has  2  offsprings              &amp;lt;- It is wrong. It should be 1 only.
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can tell there is something wrong with the prototype and constructor at a glance. It really confused many developers with C++/Java OOP backgroud. The sample code looks fine, but it doesn&amp;rsquo;t work as other OOP programming language. It is your and Brendan Eich&amp;rsquo;s problem, because he was told to make JavaScript look like Java, even there is no built-in OO mechanism at the beginning. This just looks like an odd way of doing class-based OOP without real classes, and leaves the programmer wondering why they didn’t implement proper class-based OOP. JavaScript keeps using constructor, which obscured JavaScript’s true prototypal nature. It turns out most developers don&amp;rsquo;t know how to use it properly and efficiently, including myself at the early stage.&lt;/p&gt;

&lt;p&gt;Function is first-class citizen in JavaScript world, but it’s not really a class. We need to understand the constructor creates an empty object, then sets the prototype of empty object to the prototype property of the constructor, then set constructor function with &lt;code&gt;this&lt;/code&gt; pointing to the newly-created object, and finally returns the object. You will get more confused after you see this definition. Let&amp;rsquo;s us create a simple sample and take a close look why the constructor and prototype will cause this problem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var MyClass = function(){
    this.name = &#39;MyClass&#39;;
    this.getInfo = function ( ){
        console.log( this );
    }
}
MyClass.prototype.propObject = { id: 0, property: &#39;property&#39; }

var objectA = new MyClass();
var objectB = new MyClass();

console.log( &#39;object A:&#39;, objectA.name ,  &#39;object B:&#39;, objectB.name  );
console.log( &#39;MyClass.prototype  === objectA.constructor.prototype ? &#39;, MyClass.prototype === objectA.constructor.prototype );
console.log( &#39;MyClass.prototype  === objectB.constructor.prototype ? &#39;, MyClass.prototype  === objectB.constructor.prototype );

console.log( &amp;quot; objectA.propObject : &amp;quot;, objectA.propObject , &amp;quot; objectB.propObject : &amp;quot;,  objectB.propObject  );

objectA.propObject.id = 1; 
objectA.propObject.property = &#39;AAA&#39;; 

console.log( &amp;quot; objectA.propObject : &amp;quot;, objectA.propObject,  &amp;quot; objectB.propObject : &amp;quot;,  objectB.propObject  );
/*
output :

MyClass object B: MyClass
MyClass.prototype  === objectA.constructor.prototype ?  true
MyClass.prototype  === objectB.constructor.prototype ?  true
objectA.propObject :  Object {id: 0, property: &amp;quot;property&amp;quot;}  objectB.propObject :  Object {id: 0, property: &amp;quot;property&amp;quot;}
objectA.propObject :  Object {id: 1, property: &amp;quot;AAA&amp;quot;}  objectB.propObject :  Object {id: 1, property: &amp;quot;AAA&amp;quot;}  
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we draw a diagram of above sample, you will see what is happening behind the scene. Since the prototype property is a reference, changing the prototype object’s properties at runtime will affect all objects using the prototype.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;
+------------+             
|  MyClass   |        +---- objectA.prototype
| prototype&amp;lt;----------|
|            |        +---- objectB.prototype
+------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we figure out the root cause. You will say it is easy to fix. We just need to create new prototype for each object, and clone the properties and methods from supper class. Yes, you are right, but it is not I want to recommand to you. First, we need to see if we really inheritance, secondly, if it is better to maintain if use inheritance.&lt;/p&gt;

&lt;p&gt;If we still want to use inheritance, I will suggest not to just inherit the properties, instead of methods. In my opinion, there is very rare of scenario, we really need to inherit method. So we just need to find to proper way to solve the problem of properties inheritance.&lt;/p&gt;

&lt;h3 id=&#34;object-based-inheritance&#34;&gt;Object-based Inheritance&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
function Pet(name, master) {
    this.name = name || &amp;quot;&amp;quot;;
    this.species = &amp;quot;&amp;quot;;
    this.master = master || {
        name: &#39;&#39;,
        gender: &#39;&#39;
    };
    this.offsprings = [];
    this.deliverBaby= function ( obj) {
        this.offsprings.push(obj);
    },
    this.getInfo = function () {
        console.log(&amp;quot; species: &amp;quot;, this.species, &amp;quot; name: &amp;quot;, this.name, &amp;quot; master : &amp;quot;, this.master.name, &amp;quot; &amp;quot;, this.master.gender);
        this.offsprings.forEach(function (e) {
            console.log(&amp;quot; has baby :  &amp;quot;, e.name, &amp;quot; &amp;quot;, e.species);
        });
    }
}

function Dog(name, master) {
    Pet.call(this, name, master);
    this.mother = null;
    this.species = &amp;quot;Dog&amp;quot;;
}

var dog1 = new Dog(&#39;Polly&#39;);
dog1.master = {
    name: &#39;John&#39;,
    gender: &#39;M&#39;
};

var dog2 = new Dog(&#39;Lulu&#39;, {
    name: &#39;Ada&#39;,
    gender: &#39;F&#39;
});

dog1.deliverBaby(new Dog(&#39;Polly-Baby-Dog&#39;));
dog2.deliverBaby(new Dog(&#39;Lulu-Baby-Dog&#39;));
dog2.deliverBaby(new Dog(&#39;Lulu-Baby-Dog-2&#39;));

dog1.getInfo();
dog2.getInfo();

/*
output:

Dog  name:  Polly  master :  John   M
has baby :   Polly-Baby-Dog   Dog
species:  Dog  name:  Lulu  master :  Ada   F
has baby :   Lulu-Baby-Dog   Dog
has baby :   Lulu-Baby-Dog-2   Dog
*/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After you test, would you ask: &amp;ldquo;what? how this works? It looks share the same prototype with &lt;code&gt;this&lt;/code&gt;&amp;rdquo;? Actually the problem is the special object &lt;code&gt;this&lt;/code&gt; in Javascript, which is one of the most misunderstood parts of JavaScript. Today it still confuses many other JS developers. If you have experience with other JavaScript framework. You will find many samples which use &lt;code&gt;that&lt;/code&gt; , &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;vm&lt;/code&gt; to replace the built-in &lt;code&gt;this&lt;/code&gt;. e.g. &lt;code&gt;var that = {}&lt;/code&gt;, &lt;code&gt;var self = {}&lt;/code&gt;,etc. Let&amp;rsquo;s see the new version of above sample code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
function Pet(name, master) {
    var self = {};
    self.name = name || &amp;quot;&amp;quot;;
    self.species = &amp;quot;&amp;quot;;
    self.master = master || {
        name: &#39;&#39;,
        gender: &#39;&#39;
    };
    self.offsprings = [];
    return self;
}

function Dog(name, master) {
    var self = {};
    Pet.call(self, name, master);
    self.species = &amp;quot;Dog&amp;quot;;
    self.prototype = this.constructor.prototype;
    return self;
}

Dog.prototype = {    
    deliverBaby: function ( self, obj) {
        self.offsprings.push(obj);
    },
    getInfo: function (self) {
        console.log(&amp;quot; species: &amp;quot;, self.species, &amp;quot; name: &amp;quot;, self.name, &amp;quot; master : &amp;quot;, self.master.name, &amp;quot; &amp;quot;, this.master.gender);
        self.offsprings.forEach(function (e) {
            console.log(&amp;quot; has baby :  &amp;quot;, e.name, &amp;quot; &amp;quot;, e.species);
        });
    }
};

var dog1 = new Dog(&#39;Polly&#39;);
dog1.master = {
    name: &#39;John&#39;,
    gender: &#39;M&#39;
};
var dog2 = new Dog(&#39;Lulu&#39;, {
    name: &#39;Ada&#39;,
    gender: &#39;F&#39;
});

dog1.deliverBaby(dog1, new Dog(&#39;Polly-Baby-Dog&#39;));
dog2.deliverBaby(dog2, new Dog(&#39;Lulu-Baby-Dog&#39;));
dog2.deliverBaby(dog2, new Dog(&#39;Lulu-Baby-Dog-2&#39;));

dog1.getInfo();
dog2.getInfo();

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I rewrite above sample a few lines of code, then you will figour out why it is working, but maybe you still want to implement inheritance as other OOP lanuage C++, Java. Then let&amp;rsquo;s take a look the classical inheritance, which is much more close to other OOP language. In classical inheritance it&amp;rsquo;s impossible (or at least very difficult) to choose which properties you want to inherit. They use virtual base classes and interfaces to solve the diamond problem. It is much more complicated.&lt;/p&gt;

&lt;h3 id=&#34;classical-inheritance&#34;&gt;Classical inheritance&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
function extend(subClass, superClass) {
    var F = function () {};
    F.prototype = superClass.prototype;
    subClass.prototype = new F();
    subClass.prototype.constructor = subClass;
    subClass.superclass = superClass.prototype;

    if (superClass.prototype.constructor == Object.prototype.constructor) {
        superClass.prototype.constructor = superClass;
    }
}

function Pet(name, master) {
    this.name = name || &amp;quot;&amp;quot;;
    this.species = &amp;quot;&amp;quot;;
    this.master = master || {
        name: &#39;&#39;,
        gender: &#39;&#39;
    };
    this.offsprings = [];
}

Pet.prototype.deliverBaby = function (obj) {
    this.offsprings.push(obj);
};

Pet.prototype.getInfo = function () {
    console.log(&amp;quot; species: &amp;quot;, this.species, &amp;quot; name: &amp;quot;, this.name, &amp;quot; master : &amp;quot;, (this.master?this.master.name:&#39;&#39;), &amp;quot; &amp;quot;,  (this.master?this.master.gender:&#39;&#39;));
    this.offsprings.forEach(function (e) {
        console.log(&amp;quot; has baby :  &amp;quot;, e.name, &amp;quot; &amp;quot;, e.species);
    });
}


function Dog(name, master) {
    Dog.superclass.constructor.call(this, name, master);
    this.species = &amp;quot;Dog&amp;quot;;
}

extend(Dog, Pet);

Dog.prototype.getInfo = function () {     
    console.log(&amp;quot; Override --- &amp;quot; );
    Dog.superclass.getInfo.call(this) ;
};

var dog1 = new Dog(&#39;Polly&#39;);
dog1.master = {
    name: &#39;John&#39;,
    gender: &#39;M&#39;
};

var dog2 = new Dog(&#39;Lulu&#39;, {
    name: &#39;Ada&#39;,
    gender: &#39;F&#39;
});

dog1.deliverBaby(new Dog(&#39;Polly-Baby-Dog&#39;));
dog2.deliverBaby(new Dog(&#39;Lulu-Baby-Dog&#39;));
dog2.deliverBaby(new Dog(&#39;Lulu-Baby-Dog-2&#39;));

dog1.getInfo();
dog2.getInfo();


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most programmers who come from a classical background argue that classical inheritance is more powerful than prototypal inheritance. The truth is that prototypal inheritance supports inheriting from multiple prototypes. Prototypal inheritance simply means one object inheriting from another object.&lt;/p&gt;

&lt;p&gt;Whether classical or prototypal, is used to reduce the redundancy in code. Since prototypal inheritance allows for multiple inheritance, code which requires multiple inheritance is less redundant if written using prototypal inheritance rather than in a language which has classical inheritance but no multiple inheritance.&lt;/p&gt;

&lt;h3 id=&#34;prototypal-inheritance&#34;&gt;Prototypal inheritance&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
function clone(obj) {
    if (obj === null || typeof obj !== &#39;object&#39;) {
        return obj;
    }

    var temp = obj.constructor(); // give temp the original obj&#39;s constructor
    for (var key in obj) {
        temp[key] = clone(obj[key]);
    } 
    return temp;
}

var Pet = {
    name: &amp;quot;&amp;quot;,
    species: &amp;quot;&amp;quot;,
    master: {
        name: &#39;&#39;,
        gender: &#39;&#39;
    },
    offsprings: [],
    deliverBaby: function (obj) {
        this.offsprings.push(obj);
    },
    getInfo: function () {
        console.log(&amp;quot; species: &amp;quot;, this.species, &amp;quot; name: &amp;quot;, name, &amp;quot; master : &amp;quot;, this.master.name, &amp;quot; &amp;quot;, this.master.gender);
        this.offsprings.forEach(function (e) {
            console.log(&amp;quot; has baby :  &amp;quot;, e.name, &amp;quot; &amp;quot;, e.species);
        });
    }
};

var Dog = clone(Pet);
Dog.species = &#39;Dog&#39;;

Dog.getInfo = function () {
    console.log(&amp;quot; Override -- species: &amp;quot;, this.species, &amp;quot; name: &amp;quot;, this.name, &amp;quot; master : &amp;quot;, this.master.name, &amp;quot; &amp;quot;, this.master.gender);
    this.offsprings.forEach(function (e) {
        console.log(&amp;quot; has baby :  &amp;quot;, e.name, &amp;quot; &amp;quot;, e.species);
    });
};

var dog1 = clone(Dog);
var dog2 = clone(Dog);

dog1.name = &#39;Polly&#39;;
dog1.master = {
    name: &#39;John&#39;,
    gender: &#39;M&#39;
};
dog2.name = &#39;Lulu&#39;;
dog2.master = {
    name: &#39;Ada&#39;,
    gender: &#39;F&#39;
};

var dog11 = clone(Dog);
dog11.name = &#39;Polly-Baby-Dog&#39;;
var dog21 = clone(Dog);
var dog22 = clone(Dog);
dog21.name = &#39;Lulu-Baby-Dog&#39;;
dog22.name = &#39;Lulu-Baby-Dog-2&#39;;

dog1.deliverBaby(dog11);
dog2.deliverBaby(dog21);
dog2.deliverBaby(dog22);

dog1.getInfo();
dog2.getInfo();

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the most important advantages of prototypal inheritance is that you can add new properties to prototypes after they are created. This allows you to add new methods to a prototype which will be automatically made available to all the objects which delegate to that prototype.
This allows you to add new methods to a prototype which will be automatically made available to all the objects which delegate to that prototype.This is not possible in classical inheritance because once a class is created you can&amp;rsquo;t modify it at runtime. This is probably the single biggest advantage of prototypal inheritance over classical inheritance, and it should have been at the top.&lt;/p&gt;

&lt;h2 id=&#34;module-and-namespace&#34;&gt;Module and namespace&lt;/h2&gt;

&lt;p&gt;There are quite a lot of benefits from module and namespace, especially when you are going to build some special common api shared within the whole application, even multiple systems across your whole entire enterprise. First thing first, we should not pollute the context, since it will potentially break existing functions or other third party frameworks which have been introduced in your applicatio, vice versa.&lt;/p&gt;

&lt;p&gt;On the other hand, it is a good way to create reusable component, and it is easily for further enhancement, or maybe maintenance. JavaScript is very easy to create a module. One of the most widely used design patterns in JavaScript is the module pattern.&lt;/p&gt;

&lt;h3 id=&#34;closure&#34;&gt;Closure&lt;/h3&gt;

&lt;p&gt;The module pattern makes use of one of the nicer features of JavaScript – closures – in order to give you some control of the privacy of your methods so that third party applications cannot access private data or override it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple closure&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var closureObject = (function() {
    var _privateProperty = &#39;private&#39;;
    var _privateMethod = function () {
        console.log( &#39; private method &#39;);
    };
    return {
        publicProperty: &#39;Public Property&#39;,
        publicMethod: function() {
            console.log( &#39; Call &#39;, _privateMethod() , &#39; from public method &#39;);
        },
        setPrivateProperty: function ( newValue ){
            _privateProperty= newValue;
        },
        getPrivateProperty: function( ){
            return _privateProperty;
        }
    }
}());

console.log(  closureObject.publicProperty );
console.log(  closureObject._privateProperty ); 
// console.log(  closureObject._privateMethod() ); // This will cause Uncaught TypeError
console.log(  closureObject.getPrivateProperty() );

closureObject.setPrivateProperty( &#39;public&#39;);
console.log(  closureObject.getPrivateProperty() );

/* 
output:

Public Property
undefined             // privateProperty can not be accessed directly
private               
public                // privateProperty can be updated by public method
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From above sample code, you can the JavaScript can easily implement the encapsulation as OOP language. Closure is the base the module pattern, and module is the base of namespace. Maybe you will wonder why we need module and namespace,just closure is good enough for us control the API. If we take a second thought we will realize if some application has the same object called closureObject, both will crash at run time. As a simple solution, we can make a very long, different and ridiculous name to avoid the conflict, but it is not a nice solution. Then module turns out as a better way to solve this problem.&lt;/p&gt;

&lt;h3 id=&#34;module&#34;&gt;Module&lt;/h3&gt;

&lt;p&gt;Module is not rock science. Actually it is quite easy to implement.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple module sample&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var myModule = (function(undefined) {
    var _privateProperty = &#39;private&#39;;
    var _privateMethod = function () {
        console.log( &#39; private method &#39;);
    };
    return {
        publicProperty: &#39;Public Property&#39;,
        publicMethod: function() {
            console.log( &#39; Call &#39;, _privateMethod() , &#39; from public method &#39;);
        },
        setPrivateProperty: function ( newValue ){
            _privateProperty= newValue;
        },
        getPrivateProperty: function( ){
            return _privateProperty;
        }
    }
}());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may say &amp;ldquo;What? closure is module.&amp;rdquo; Yes, you can say that. The little difference is the auguements during auto initialization. By having an function argument undefined (the name actually does not matter) which you don&amp;rsquo;t pass a parameter to, you could make sure you have a variable which really is undefined. This technique ensures that it will work as expected, in case it will be excluded to unintential amendment by other script.&lt;/p&gt;

&lt;p&gt;Once we create our module, we can simply extend the module with the same technique.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Module&amp;rsquo;s extension with override or new api&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var myModule = (function() {
    ....
}());

var extendModule = (function( m){
     m.publicMethod = function ( newArgument ) { // overload publicMethod 
          //   TODO
     };

     m.newApi = function () {  // 
         // TODO
     };

}(myModule));

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;namespace&#34;&gt;Namespace&lt;/h3&gt;

&lt;p&gt;Now we will go further to namespace, which is based on module technique. Namespace gives you the ability to have public and private properties and methods.
The code inside doesn’t use the Object Literal notation. Allows you to use $ inside your code without worrying about clashing with other libraries
Allows your library to grow across files using the “window.rtkns = window.rtkns || {}” technique
A common pattern that you will see in many libraries, widgets, and plugins&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
(function (rtkns, $, undefined) {

    rtkns.createNS = function (namespace) {
        var nsparts = namespace.split(&amp;quot;.&amp;quot;);
        var parent = rtkns;

        if (nsparts[0] === &amp;quot;rtkns&amp;quot;) {
            nsparts = nsparts.slice(1);
        }

        for (var i = 0; i &amp;lt; nsparts.length; i++) {
            var partname = nsparts[i];

            if (typeof parent[partname] === &amp;quot;undefined&amp;quot;) {
                parent[partname] = {};
            }
            parent = parent[partname];
        }
        return parent;
    };

    var clone = function(obj) {
        if (obj === null || typeof obj !== &#39;object&#39;) {
            return obj;
        }

        var temp = obj.constructor(); // give temp the original obj&#39;s constructor
        for (var key in obj) {
            temp[key] = clone(obj[key]);
        } 
        return temp;
    };

    rtkns.clone = clone;

    rtkns.createNS(&amp;quot;rtkns&amp;quot;);


    rtkns.utils = rtkns.createNS(&amp;quot;rtkns.utils&amp;quot;);

    rtkns.model = rtkns.createNS(&amp;quot;rtkns.model&amp;quot;);


    rtkns.model.entity = {
        id: 0,
        createdBy:&#39;&#39;,
        modifiedBy:&#39;&#39;,
        created: null,
        modified: null,
    };
    var entity = rtkns.model.entity;
    
    rtkns.model.order = clone ( entity);
    var order = rtkns.model.order ;
    order.amount = 0;
    order.description = &#39;&#39;;


    rtkns.model.client = clone( entity);
    var client =  rtkns.model.client ;
    client.name = &#39;&#39;;
    client.email = &#39;&#39;;
    client.orders = [];
    client.purchase = function ( order ){
        this.orders.push( order );
    };

    rtkns.utils.toString = function (entity) {
        return entity?JSON.stringify(entity):entity;
    };


}(window.rtkns = window.rtkns || {}));

var rtkns = window.rtkns;

var client1 = rtkns.clone( rtkns.model.client );
client1.name = &#39;client 1&#39;;
client1.email = &#39;client1.email@test.com&#39;;
var client2 = rtkns.clone( rtkns.model.client );
client2.name = &#39;client 2&#39;;
client2.email = &#39;client2.email@test.com&#39;;

var order1 = rtkns.clone( rtkns.model.order );
order1.amount = 100;
order1.description = &#39;order 1&#39;;

var order2 = rtkns.clone( rtkns.model.order );
order2.amount = 600;
order2.description = &#39;order 2&#39;;

client1.purchase( order1 );
client2.purchase( order2 );

console.log(rtkns.utils.toString( client1));
console.log(rtkns.utils.toString( client2));

/*

output:
{&amp;quot;id&amp;quot;:0,&amp;quot;createdBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;modifiedBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created&amp;quot;:null,&amp;quot;modified&amp;quot;:null,&amp;quot;name&amp;quot;:&amp;quot;client 1&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;client1.email@test.com&amp;quot;,&amp;quot;orders&amp;quot;:[{&amp;quot;id&amp;quot;:0,&amp;quot;createdBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;modifiedBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created&amp;quot;:null,&amp;quot;modified&amp;quot;:null,&amp;quot;amount&amp;quot;:100,&amp;quot;description&amp;quot;:&amp;quot;order 1&amp;quot;}]}
VM95:2 {&amp;quot;id&amp;quot;:0,&amp;quot;createdBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;modifiedBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created&amp;quot;:null,&amp;quot;modified&amp;quot;:null,&amp;quot;name&amp;quot;:&amp;quot;client 2&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;client2.email@test.com&amp;quot;,&amp;quot;orders&amp;quot;:[{&amp;quot;id&amp;quot;:0,&amp;quot;createdBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;modifiedBy&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created&amp;quot;:null,&amp;quot;modified&amp;quot;:null,&amp;quot;amount&amp;quot;:600,&amp;quot;description&amp;quot;:&amp;quot;order 2&amp;quot;}]}
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sample above combine namespace and prototypal inheritance. Namespace allows you to add new module for enhancement, and it allows you to organize your API better.  On the other hand, through the globle namespace you can inject customized service, or you can replace it. The disadvantage of namespace, when the source code blows up, it will be a bit more complicated, especially you break different into different files. Mock test or unit test will needs a bit more work to do as well. There is no pattern that is a Silver Bullet, but rather you should assess where you are at and examine the pros and cons of each pattern to address your situation.&lt;/p&gt;

&lt;h2 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h2&gt;

&lt;p&gt;An interface tells programmers what methods a given class implements, which makes it easier to use. Interfaces also stabilize the ways in which different classes can communicate.&lt;/p&gt;

&lt;p&gt;Using any interface implementation in JavaScript will create a small performance hit, due in part to the overhead of having another method invocation.&lt;/p&gt;

&lt;p&gt;The biggest drawback is that there is no way to force other programmers to respect the interfaces you have created. In JavaScript, you must manually ensure that a given class implements an interface. You can mitigate this problem by using coding conventions and helper classes, but it will never entirely go away. Everyone on your project must agree to use them and check for them; otherwise much of their value is lost.&lt;/p&gt;

&lt;p&gt;JavaScript does not come with built-in support for interfaces, and there is no Interface keyword, so any method you use to implement this will be very different from what languages such as C++, Java, and making it a little more difficult. JavaScript uses what&amp;rsquo;s called duck typing. (If it walks like a duck, and quacks like a duck, as far as JS cares, it&amp;rsquo;s a duck.) If your object has quack(), walk(), and fly() methods, code can use it wherever it expects an object that can walk, quack, and fly, without requiring the implementation of some &amp;ldquo;Duckable&amp;rdquo; interface.&lt;/p&gt;

&lt;p&gt;JavaScript will use Interface object to ensure if the new instance implements the same action as Interface object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;

var Interface = function(interfaceName, interfaceMembers) {
    if (!(this instanceof Interface)) {
        return new Interface(interfaceName, interfaceMembers);
    }

    var interfaceObj = this;

    Object.keys(interfaceMembers).forEach(function(memberName) {
        interfaceObj[memberName] = function() {
            Interface.errorDetect(interfaceName, memberName);
        };
    });

    interfaceObj.name = interfaceName;

    return interfaceObj;
};

Interface.errorDetect = function(interfaceName, interfaceMember) {
    throw Error(&#39;errorDetect: Class does not implement interface member &#39; + interfaceName + &#39;.&#39; + interfaceMember + &#39;()&#39;);
};

Interface.ensureImplement = function(obj /*, interfaces */ ) {
    var interfaces = [].slice.call(arguments, 1);

    interfaces.forEach(function(_interface) {
        Object.keys(_interface).forEach(function(interfaceMember) {
            var isFunction = typeof _interface[interfaceMember] === &#39;function&#39;;

            if (isFunction &amp;amp;&amp;amp; !obj[interfaceMember]) {
                Interface.errorDetect(_interface.name, interfaceMember);
            }
        });
    });

    return true;
};


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;How to use this interface&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Samples below show you how  the Interface can ensure the object implement multiple interfaces.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Sample 1 with only one interface

var ILog = Interface(&#39;ILog&#39;, {
    logInfo:function(){},
    logWarning:function(){},
    logError:function(){},
}); 


var loggerA = {
    logInfo:function(){},
    logWarning:function(){},
    logError:function(){},
};

// loggerB does not implement all methods
var loggerB = {
    logInfo:function(){},
    logWarning:function(){},
};

console.log(Interface.ensureImplement( loggerA, ILog));
console.log(Interface.ensureImplement( loggerB, ILog));

/*
output:
true
Uncaught Error: errorDetect: Class does not implement interface member ILog.logError()
...
*/

// Sample 2 with 2 interfaces

var Submarine = Interface(&#39;Submarine&#39;, {
    operateUnderwater:function(){}
}); 

var Car = Interface(&#39;Car&#39;, {
    operateOnRoad:function(){}
}); 

var SubmarineCar = {
    operateUnderwater:function(){},
    operateOnRoad:function(){},
};

console.log(Interface.ensureImplement( SubmarineCar, Submarine, Car ));

/**
output:
true
*/
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>